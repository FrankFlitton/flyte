// @generated by protoc-gen-connect-es v1.1.3 with parameter "target=js+dts+ts"
// @generated from file flyteidl/service/admin.proto (package flyteidl.service, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Task, TaskCreateRequest, TaskCreateResponse, TaskList } from "../admin/task_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { NamedEntity, NamedEntityGetRequest, NamedEntityIdentifierList, NamedEntityIdentifierListRequest, NamedEntityList, NamedEntityListRequest, NamedEntityUpdateRequest, NamedEntityUpdateResponse, ObjectGetRequest, ResourceListRequest } from "../admin/common_pb.js";
import { Workflow, WorkflowCreateRequest, WorkflowCreateResponse, WorkflowList } from "../admin/workflow_pb.js";
import { ActiveLaunchPlanListRequest, ActiveLaunchPlanRequest, LaunchPlan, LaunchPlanCreateRequest, LaunchPlanCreateResponse, LaunchPlanList, LaunchPlanUpdateRequest, LaunchPlanUpdateResponse } from "../admin/launch_plan_pb.js";
import { Execution, ExecutionCreateRequest, ExecutionCreateResponse, ExecutionList, ExecutionRecoverRequest, ExecutionRelaunchRequest, ExecutionTerminateRequest, ExecutionTerminateResponse, ExecutionUpdateRequest, ExecutionUpdateResponse, WorkflowExecutionGetDataRequest, WorkflowExecutionGetDataResponse, WorkflowExecutionGetMetricsRequest, WorkflowExecutionGetMetricsResponse, WorkflowExecutionGetRequest } from "../admin/execution_pb.js";
import { NodeExecution, NodeExecutionForTaskListRequest, NodeExecutionGetDataRequest, NodeExecutionGetDataResponse, NodeExecutionGetRequest, NodeExecutionList, NodeExecutionListRequest } from "../admin/node_execution_pb.js";
import { Project, ProjectListRequest, ProjectRegisterRequest, ProjectRegisterResponse, Projects, ProjectUpdateResponse } from "../admin/project_pb.js";
import { NodeExecutionEventRequest, NodeExecutionEventResponse, TaskExecutionEventRequest, TaskExecutionEventResponse, WorkflowExecutionEventRequest, WorkflowExecutionEventResponse } from "../admin/event_pb.js";
import { TaskExecution, TaskExecutionGetDataRequest, TaskExecutionGetDataResponse, TaskExecutionGetRequest, TaskExecutionList, TaskExecutionListRequest } from "../admin/task_execution_pb.js";
import { ProjectDomainAttributesDeleteRequest, ProjectDomainAttributesDeleteResponse, ProjectDomainAttributesGetRequest, ProjectDomainAttributesGetResponse, ProjectDomainAttributesUpdateRequest, ProjectDomainAttributesUpdateResponse } from "../admin/project_domain_attributes_pb.js";
import { ProjectAttributesDeleteRequest, ProjectAttributesDeleteResponse, ProjectAttributesGetRequest, ProjectAttributesGetResponse, ProjectAttributesUpdateRequest, ProjectAttributesUpdateResponse } from "../admin/project_attributes_pb.js";
import { WorkflowAttributesDeleteRequest, WorkflowAttributesDeleteResponse, WorkflowAttributesGetRequest, WorkflowAttributesGetResponse, WorkflowAttributesUpdateRequest, WorkflowAttributesUpdateResponse } from "../admin/workflow_attributes_pb.js";
import { ListMatchableAttributesRequest, ListMatchableAttributesResponse } from "../admin/matchable_resource_pb.js";
import { GetVersionRequest, GetVersionResponse } from "../admin/version_pb.js";
import { DescriptionEntity, DescriptionEntityList, DescriptionEntityListRequest } from "../admin/description_entity_pb.js";

/**
 * The following defines an RPC service that is also served over HTTP via grpc-gateway.
 * Standard response codes for both are defined here: https://github.com/grpc-ecosystem/grpc-gateway/blob/master/runtime/errors.go
 *
 * @generated from service flyteidl.service.AdminService
 */
export declare const AdminService: {
  readonly typeName: "flyteidl.service.AdminService",
  readonly methods: {
    /**
     * Create and upload a :ref:`ref_flyteidl.admin.Task` definition
     *
     * @generated from rpc flyteidl.service.AdminService.CreateTask
     */
    readonly createTask: {
      readonly name: "CreateTask",
      readonly I: typeof TaskCreateRequest,
      readonly O: typeof TaskCreateResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetch a :ref:`ref_flyteidl.admin.Task` definition.
     *
     * @generated from rpc flyteidl.service.AdminService.GetTask
     */
    readonly getTask: {
      readonly name: "GetTask",
      readonly I: typeof ObjectGetRequest,
      readonly O: typeof Task,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetch a list of :ref:`ref_flyteidl.admin.NamedEntityIdentifier` of task objects. 
     *
     * @generated from rpc flyteidl.service.AdminService.ListTaskIds
     */
    readonly listTaskIds: {
      readonly name: "ListTaskIds",
      readonly I: typeof NamedEntityIdentifierListRequest,
      readonly O: typeof NamedEntityIdentifierList,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetch a list of :ref:`ref_flyteidl.admin.Task` definitions.
     *
     * @generated from rpc flyteidl.service.AdminService.ListTasks
     */
    readonly listTasks: {
      readonly name: "ListTasks",
      readonly I: typeof ResourceListRequest,
      readonly O: typeof TaskList,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Create and upload a :ref:`ref_flyteidl.admin.Workflow` definition
     *
     * @generated from rpc flyteidl.service.AdminService.CreateWorkflow
     */
    readonly createWorkflow: {
      readonly name: "CreateWorkflow",
      readonly I: typeof WorkflowCreateRequest,
      readonly O: typeof WorkflowCreateResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetch a :ref:`ref_flyteidl.admin.Workflow` definition.
     *
     * @generated from rpc flyteidl.service.AdminService.GetWorkflow
     */
    readonly getWorkflow: {
      readonly name: "GetWorkflow",
      readonly I: typeof ObjectGetRequest,
      readonly O: typeof Workflow,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetch a list of :ref:`ref_flyteidl.admin.NamedEntityIdentifier` of workflow objects.
     *
     * @generated from rpc flyteidl.service.AdminService.ListWorkflowIds
     */
    readonly listWorkflowIds: {
      readonly name: "ListWorkflowIds",
      readonly I: typeof NamedEntityIdentifierListRequest,
      readonly O: typeof NamedEntityIdentifierList,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetch a list of :ref:`ref_flyteidl.admin.Workflow` definitions.
     *
     * @generated from rpc flyteidl.service.AdminService.ListWorkflows
     */
    readonly listWorkflows: {
      readonly name: "ListWorkflows",
      readonly I: typeof ResourceListRequest,
      readonly O: typeof WorkflowList,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Create and upload a :ref:`ref_flyteidl.admin.LaunchPlan` definition
     *
     * @generated from rpc flyteidl.service.AdminService.CreateLaunchPlan
     */
    readonly createLaunchPlan: {
      readonly name: "CreateLaunchPlan",
      readonly I: typeof LaunchPlanCreateRequest,
      readonly O: typeof LaunchPlanCreateResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetch a :ref:`ref_flyteidl.admin.LaunchPlan` definition.
     *
     * @generated from rpc flyteidl.service.AdminService.GetLaunchPlan
     */
    readonly getLaunchPlan: {
      readonly name: "GetLaunchPlan",
      readonly I: typeof ObjectGetRequest,
      readonly O: typeof LaunchPlan,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetch the active version of a :ref:`ref_flyteidl.admin.LaunchPlan`.
     *
     * @generated from rpc flyteidl.service.AdminService.GetActiveLaunchPlan
     */
    readonly getActiveLaunchPlan: {
      readonly name: "GetActiveLaunchPlan",
      readonly I: typeof ActiveLaunchPlanRequest,
      readonly O: typeof LaunchPlan,
      readonly kind: MethodKind.Unary,
    },
    /**
     * List active versions of :ref:`ref_flyteidl.admin.LaunchPlan`.
     *
     * @generated from rpc flyteidl.service.AdminService.ListActiveLaunchPlans
     */
    readonly listActiveLaunchPlans: {
      readonly name: "ListActiveLaunchPlans",
      readonly I: typeof ActiveLaunchPlanListRequest,
      readonly O: typeof LaunchPlanList,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetch a list of :ref:`ref_flyteidl.admin.NamedEntityIdentifier` of launch plan objects.
     *
     * @generated from rpc flyteidl.service.AdminService.ListLaunchPlanIds
     */
    readonly listLaunchPlanIds: {
      readonly name: "ListLaunchPlanIds",
      readonly I: typeof NamedEntityIdentifierListRequest,
      readonly O: typeof NamedEntityIdentifierList,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetch a list of :ref:`ref_flyteidl.admin.LaunchPlan` definitions.
     *
     * @generated from rpc flyteidl.service.AdminService.ListLaunchPlans
     */
    readonly listLaunchPlans: {
      readonly name: "ListLaunchPlans",
      readonly I: typeof ResourceListRequest,
      readonly O: typeof LaunchPlanList,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Updates the status of a registered :ref:`ref_flyteidl.admin.LaunchPlan`.
     *
     * @generated from rpc flyteidl.service.AdminService.UpdateLaunchPlan
     */
    readonly updateLaunchPlan: {
      readonly name: "UpdateLaunchPlan",
      readonly I: typeof LaunchPlanUpdateRequest,
      readonly O: typeof LaunchPlanUpdateResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Triggers the creation of a :ref:`ref_flyteidl.admin.Execution`
     *
     * @generated from rpc flyteidl.service.AdminService.CreateExecution
     */
    readonly createExecution: {
      readonly name: "CreateExecution",
      readonly I: typeof ExecutionCreateRequest,
      readonly O: typeof ExecutionCreateResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Triggers the creation of an identical :ref:`ref_flyteidl.admin.Execution`
     *
     * @generated from rpc flyteidl.service.AdminService.RelaunchExecution
     */
    readonly relaunchExecution: {
      readonly name: "RelaunchExecution",
      readonly I: typeof ExecutionRelaunchRequest,
      readonly O: typeof ExecutionCreateResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Recreates a previously-run workflow execution that will only start executing from the last known failure point.
     * In Recover mode, users cannot change any input parameters or update the version of the execution.
     * This is extremely useful to recover from system errors and byzantine faults like - Loss of K8s cluster, bugs in platform or instability, machine failures,
     * downstream system failures (downstream services), or simply to recover executions that failed because of retry exhaustion and should complete if tried again.
     * See :ref:`ref_flyteidl.admin.ExecutionRecoverRequest` for more details.
     *
     * @generated from rpc flyteidl.service.AdminService.RecoverExecution
     */
    readonly recoverExecution: {
      readonly name: "RecoverExecution",
      readonly I: typeof ExecutionRecoverRequest,
      readonly O: typeof ExecutionCreateResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetches a :ref:`ref_flyteidl.admin.Execution`.
     *
     * @generated from rpc flyteidl.service.AdminService.GetExecution
     */
    readonly getExecution: {
      readonly name: "GetExecution",
      readonly I: typeof WorkflowExecutionGetRequest,
      readonly O: typeof Execution,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Update execution belonging to project domain :ref:`ref_flyteidl.admin.Execution`.
     *
     * @generated from rpc flyteidl.service.AdminService.UpdateExecution
     */
    readonly updateExecution: {
      readonly name: "UpdateExecution",
      readonly I: typeof ExecutionUpdateRequest,
      readonly O: typeof ExecutionUpdateResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetches input and output data for a :ref:`ref_flyteidl.admin.Execution`.
     *
     * @generated from rpc flyteidl.service.AdminService.GetExecutionData
     */
    readonly getExecutionData: {
      readonly name: "GetExecutionData",
      readonly I: typeof WorkflowExecutionGetDataRequest,
      readonly O: typeof WorkflowExecutionGetDataResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetch a list of :ref:`ref_flyteidl.admin.Execution`.
     *
     * @generated from rpc flyteidl.service.AdminService.ListExecutions
     */
    readonly listExecutions: {
      readonly name: "ListExecutions",
      readonly I: typeof ResourceListRequest,
      readonly O: typeof ExecutionList,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Terminates an in-progress :ref:`ref_flyteidl.admin.Execution`.
     *
     * @generated from rpc flyteidl.service.AdminService.TerminateExecution
     */
    readonly terminateExecution: {
      readonly name: "TerminateExecution",
      readonly I: typeof ExecutionTerminateRequest,
      readonly O: typeof ExecutionTerminateResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetches a :ref:`ref_flyteidl.admin.NodeExecution`.
     *
     * @generated from rpc flyteidl.service.AdminService.GetNodeExecution
     */
    readonly getNodeExecution: {
      readonly name: "GetNodeExecution",
      readonly I: typeof NodeExecutionGetRequest,
      readonly O: typeof NodeExecution,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetch a list of :ref:`ref_flyteidl.admin.NodeExecution`.
     *
     * @generated from rpc flyteidl.service.AdminService.ListNodeExecutions
     */
    readonly listNodeExecutions: {
      readonly name: "ListNodeExecutions",
      readonly I: typeof NodeExecutionListRequest,
      readonly O: typeof NodeExecutionList,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetch a list of :ref:`ref_flyteidl.admin.NodeExecution` launched by the reference :ref:`ref_flyteidl.admin.TaskExecution`.
     *
     * @generated from rpc flyteidl.service.AdminService.ListNodeExecutionsForTask
     */
    readonly listNodeExecutionsForTask: {
      readonly name: "ListNodeExecutionsForTask",
      readonly I: typeof NodeExecutionForTaskListRequest,
      readonly O: typeof NodeExecutionList,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetches input and output data for a :ref:`ref_flyteidl.admin.NodeExecution`.
     *
     * @generated from rpc flyteidl.service.AdminService.GetNodeExecutionData
     */
    readonly getNodeExecutionData: {
      readonly name: "GetNodeExecutionData",
      readonly I: typeof NodeExecutionGetDataRequest,
      readonly O: typeof NodeExecutionGetDataResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Registers a :ref:`ref_flyteidl.admin.Project` with the Flyte deployment.
     *
     * @generated from rpc flyteidl.service.AdminService.RegisterProject
     */
    readonly registerProject: {
      readonly name: "RegisterProject",
      readonly I: typeof ProjectRegisterRequest,
      readonly O: typeof ProjectRegisterResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Updates an existing :ref:`ref_flyteidl.admin.Project` 
     * flyteidl.admin.Project should be passed but the domains property should be empty;
     * it will be ignored in the handler as domains cannot be updated via this API.
     *
     * @generated from rpc flyteidl.service.AdminService.UpdateProject
     */
    readonly updateProject: {
      readonly name: "UpdateProject",
      readonly I: typeof Project,
      readonly O: typeof ProjectUpdateResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetches a list of :ref:`ref_flyteidl.admin.Project` 
     *
     * @generated from rpc flyteidl.service.AdminService.ListProjects
     */
    readonly listProjects: {
      readonly name: "ListProjects",
      readonly I: typeof ProjectListRequest,
      readonly O: typeof Projects,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Indicates a :ref:`ref_flyteidl.event.WorkflowExecutionEvent` has occurred.
     *
     * @generated from rpc flyteidl.service.AdminService.CreateWorkflowEvent
     */
    readonly createWorkflowEvent: {
      readonly name: "CreateWorkflowEvent",
      readonly I: typeof WorkflowExecutionEventRequest,
      readonly O: typeof WorkflowExecutionEventResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Indicates a :ref:`ref_flyteidl.event.NodeExecutionEvent` has occurred.
     *
     * @generated from rpc flyteidl.service.AdminService.CreateNodeEvent
     */
    readonly createNodeEvent: {
      readonly name: "CreateNodeEvent",
      readonly I: typeof NodeExecutionEventRequest,
      readonly O: typeof NodeExecutionEventResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Indicates a :ref:`ref_flyteidl.event.TaskExecutionEvent` has occurred.
     *
     * @generated from rpc flyteidl.service.AdminService.CreateTaskEvent
     */
    readonly createTaskEvent: {
      readonly name: "CreateTaskEvent",
      readonly I: typeof TaskExecutionEventRequest,
      readonly O: typeof TaskExecutionEventResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetches a :ref:`ref_flyteidl.admin.TaskExecution`.
     *
     * @generated from rpc flyteidl.service.AdminService.GetTaskExecution
     */
    readonly getTaskExecution: {
      readonly name: "GetTaskExecution",
      readonly I: typeof TaskExecutionGetRequest,
      readonly O: typeof TaskExecution,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetches a list of :ref:`ref_flyteidl.admin.TaskExecution`.
     *
     * @generated from rpc flyteidl.service.AdminService.ListTaskExecutions
     */
    readonly listTaskExecutions: {
      readonly name: "ListTaskExecutions",
      readonly I: typeof TaskExecutionListRequest,
      readonly O: typeof TaskExecutionList,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetches input and output data for a :ref:`ref_flyteidl.admin.TaskExecution`.
     *
     * @generated from rpc flyteidl.service.AdminService.GetTaskExecutionData
     */
    readonly getTaskExecutionData: {
      readonly name: "GetTaskExecutionData",
      readonly I: typeof TaskExecutionGetDataRequest,
      readonly O: typeof TaskExecutionGetDataResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Creates or updates custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.
     *
     * @generated from rpc flyteidl.service.AdminService.UpdateProjectDomainAttributes
     */
    readonly updateProjectDomainAttributes: {
      readonly name: "UpdateProjectDomainAttributes",
      readonly I: typeof ProjectDomainAttributesUpdateRequest,
      readonly O: typeof ProjectDomainAttributesUpdateResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetches custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.
     *
     * @generated from rpc flyteidl.service.AdminService.GetProjectDomainAttributes
     */
    readonly getProjectDomainAttributes: {
      readonly name: "GetProjectDomainAttributes",
      readonly I: typeof ProjectDomainAttributesGetRequest,
      readonly O: typeof ProjectDomainAttributesGetResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Deletes custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.
     *
     * @generated from rpc flyteidl.service.AdminService.DeleteProjectDomainAttributes
     */
    readonly deleteProjectDomainAttributes: {
      readonly name: "DeleteProjectDomainAttributes",
      readonly I: typeof ProjectDomainAttributesDeleteRequest,
      readonly O: typeof ProjectDomainAttributesDeleteResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Creates or updates custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` at the project level
     *
     * @generated from rpc flyteidl.service.AdminService.UpdateProjectAttributes
     */
    readonly updateProjectAttributes: {
      readonly name: "UpdateProjectAttributes",
      readonly I: typeof ProjectAttributesUpdateRequest,
      readonly O: typeof ProjectAttributesUpdateResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetches custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.
     *
     * @generated from rpc flyteidl.service.AdminService.GetProjectAttributes
     */
    readonly getProjectAttributes: {
      readonly name: "GetProjectAttributes",
      readonly I: typeof ProjectAttributesGetRequest,
      readonly O: typeof ProjectAttributesGetResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Deletes custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.
     *
     * @generated from rpc flyteidl.service.AdminService.DeleteProjectAttributes
     */
    readonly deleteProjectAttributes: {
      readonly name: "DeleteProjectAttributes",
      readonly I: typeof ProjectAttributesDeleteRequest,
      readonly O: typeof ProjectAttributesDeleteResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Creates or updates custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project, domain and workflow.
     *
     * @generated from rpc flyteidl.service.AdminService.UpdateWorkflowAttributes
     */
    readonly updateWorkflowAttributes: {
      readonly name: "UpdateWorkflowAttributes",
      readonly I: typeof WorkflowAttributesUpdateRequest,
      readonly O: typeof WorkflowAttributesUpdateResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetches custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project, domain and workflow.
     *
     * @generated from rpc flyteidl.service.AdminService.GetWorkflowAttributes
     */
    readonly getWorkflowAttributes: {
      readonly name: "GetWorkflowAttributes",
      readonly I: typeof WorkflowAttributesGetRequest,
      readonly O: typeof WorkflowAttributesGetResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Deletes custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project, domain and workflow.
     *
     * @generated from rpc flyteidl.service.AdminService.DeleteWorkflowAttributes
     */
    readonly deleteWorkflowAttributes: {
      readonly name: "DeleteWorkflowAttributes",
      readonly I: typeof WorkflowAttributesDeleteRequest,
      readonly O: typeof WorkflowAttributesDeleteResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Lists custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a specific resource type.
     *
     * @generated from rpc flyteidl.service.AdminService.ListMatchableAttributes
     */
    readonly listMatchableAttributes: {
      readonly name: "ListMatchableAttributes",
      readonly I: typeof ListMatchableAttributesRequest,
      readonly O: typeof ListMatchableAttributesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns a list of :ref:`ref_flyteidl.admin.NamedEntity` objects.
     *
     * @generated from rpc flyteidl.service.AdminService.ListNamedEntities
     */
    readonly listNamedEntities: {
      readonly name: "ListNamedEntities",
      readonly I: typeof NamedEntityListRequest,
      readonly O: typeof NamedEntityList,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns a :ref:`ref_flyteidl.admin.NamedEntity` object.
     *
     * @generated from rpc flyteidl.service.AdminService.GetNamedEntity
     */
    readonly getNamedEntity: {
      readonly name: "GetNamedEntity",
      readonly I: typeof NamedEntityGetRequest,
      readonly O: typeof NamedEntity,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Updates a :ref:`ref_flyteidl.admin.NamedEntity` object.
     *
     * @generated from rpc flyteidl.service.AdminService.UpdateNamedEntity
     */
    readonly updateNamedEntity: {
      readonly name: "UpdateNamedEntity",
      readonly I: typeof NamedEntityUpdateRequest,
      readonly O: typeof NamedEntityUpdateResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc flyteidl.service.AdminService.GetVersion
     */
    readonly getVersion: {
      readonly name: "GetVersion",
      readonly I: typeof GetVersionRequest,
      readonly O: typeof GetVersionResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetch a :ref:`ref_flyteidl.admin.DescriptionEntity` object.
     *
     * @generated from rpc flyteidl.service.AdminService.GetDescriptionEntity
     */
    readonly getDescriptionEntity: {
      readonly name: "GetDescriptionEntity",
      readonly I: typeof ObjectGetRequest,
      readonly O: typeof DescriptionEntity,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetch a list of :ref:`ref_flyteidl.admin.DescriptionEntity` definitions.
     *
     * @generated from rpc flyteidl.service.AdminService.ListDescriptionEntities
     */
    readonly listDescriptionEntities: {
      readonly name: "ListDescriptionEntities",
      readonly I: typeof DescriptionEntityListRequest,
      readonly O: typeof DescriptionEntityList,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetches runtime metrics for a :ref:`ref_flyteidl.admin.Execution`.
     *
     * @generated from rpc flyteidl.service.AdminService.GetExecutionMetrics
     */
    readonly getExecutionMetrics: {
      readonly name: "GetExecutionMetrics",
      readonly I: typeof WorkflowExecutionGetMetricsRequest,
      readonly O: typeof WorkflowExecutionGetMetricsResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

