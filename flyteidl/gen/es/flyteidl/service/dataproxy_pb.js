// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/service/dataproxy.proto (package flyteidl.service, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Duration, proto3, Timestamp } from "@bufbuild/protobuf";
import { NodeExecutionIdentifier } from "../core/identifier_pb.js";
import { Literal, LiteralMap } from "../core/literals_pb.js";

/**
 * ArtifactType
 *
 * @generated from enum flyteidl.service.ArtifactType
 */
export const ArtifactType = proto3.makeEnum(
  "flyteidl.service.ArtifactType",
  [
    {no: 0, name: "ARTIFACT_TYPE_UNDEFINED", localName: "UNDEFINED"},
    {no: 1, name: "ARTIFACT_TYPE_DECK", localName: "DECK"},
  ],
);

/**
 * @generated from message flyteidl.service.CreateUploadLocationResponse
 */
export const CreateUploadLocationResponse = proto3.makeMessageType(
  "flyteidl.service.CreateUploadLocationResponse",
  () => [
    { no: 1, name: "signed_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "native_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "expires_at", kind: "message", T: Timestamp },
  ],
);

/**
 * CreateUploadLocationRequest specified request for the CreateUploadLocation API.
 * The implementation in data proxy service will create the s3 location with some server side configured prefixes,
 * and then:
 *   - project/domain/(a deterministic str representation of the content_md5)/filename (if present); OR
 *   - project/domain/filename_root (if present)/filename (if present).
 *
 * @generated from message flyteidl.service.CreateUploadLocationRequest
 */
export const CreateUploadLocationRequest = proto3.makeMessageType(
  "flyteidl.service.CreateUploadLocationRequest",
  () => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "expires_in", kind: "message", T: Duration },
    { no: 5, name: "content_md5", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "filename_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * CreateDownloadLocationRequest specified request for the CreateDownloadLocation API.
 *
 * @generated from message flyteidl.service.CreateDownloadLocationRequest
 * @deprecated
 */
export const CreateDownloadLocationRequest = proto3.makeMessageType(
  "flyteidl.service.CreateDownloadLocationRequest",
  () => [
    { no: 1, name: "native_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expires_in", kind: "message", T: Duration },
  ],
);

/**
 * @generated from message flyteidl.service.CreateDownloadLocationResponse
 * @deprecated
 */
export const CreateDownloadLocationResponse = proto3.makeMessageType(
  "flyteidl.service.CreateDownloadLocationResponse",
  () => [
    { no: 1, name: "signed_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expires_at", kind: "message", T: Timestamp },
  ],
);

/**
 * CreateDownloadLinkRequest defines the request parameters to create a download link (signed url)
 *
 * @generated from message flyteidl.service.CreateDownloadLinkRequest
 */
export const CreateDownloadLinkRequest = proto3.makeMessageType(
  "flyteidl.service.CreateDownloadLinkRequest",
  () => [
    { no: 1, name: "artifact_type", kind: "enum", T: proto3.getEnumType(ArtifactType) },
    { no: 2, name: "expires_in", kind: "message", T: Duration },
    { no: 3, name: "node_execution_id", kind: "message", T: NodeExecutionIdentifier, oneof: "source" },
  ],
);

/**
 * CreateDownloadLinkResponse defines the response for the generated links
 *
 * @generated from message flyteidl.service.CreateDownloadLinkResponse
 */
export const CreateDownloadLinkResponse = proto3.makeMessageType(
  "flyteidl.service.CreateDownloadLinkResponse",
  () => [
    { no: 1, name: "signed_url", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "expires_at", kind: "message", T: Timestamp },
    { no: 3, name: "pre_signed_urls", kind: "message", T: PreSignedURLs },
  ],
);

/**
 * Wrapper object since the message is shared across this and the GetDataResponse
 *
 * @generated from message flyteidl.service.PreSignedURLs
 */
export const PreSignedURLs = proto3.makeMessageType(
  "flyteidl.service.PreSignedURLs",
  () => [
    { no: 1, name: "signed_url", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "expires_at", kind: "message", T: Timestamp },
  ],
);

/**
 * General request artifact to retrieve data from a Flyte artifact url.
 *
 * @generated from message flyteidl.service.GetDataRequest
 */
export const GetDataRequest = proto3.makeMessageType(
  "flyteidl.service.GetDataRequest",
  () => [
    { no: 1, name: "flyte_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message flyteidl.service.GetDataResponse
 */
export const GetDataResponse = proto3.makeMessageType(
  "flyteidl.service.GetDataResponse",
  () => [
    { no: 1, name: "literal_map", kind: "message", T: LiteralMap, oneof: "data" },
    { no: 2, name: "pre_signed_urls", kind: "message", T: PreSignedURLs, oneof: "data" },
    { no: 3, name: "literal", kind: "message", T: Literal, oneof: "data" },
  ],
);

