// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/service/external_plugin_service.proto (package flyteidl.service, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { LiteralMap } from "../core/literals_pb.js";
import type { TaskTemplate } from "../core/tasks_pb.js";

/**
 * The state of the execution is used to control its visibility in the UI/CLI.
 *
 * @generated from enum flyteidl.service.State
 * @deprecated
 */
export declare enum State {
  /**
   * @generated from enum value: RETRYABLE_FAILURE = 0;
   */
  RETRYABLE_FAILURE = 0,

  /**
   * @generated from enum value: PERMANENT_FAILURE = 1;
   */
  PERMANENT_FAILURE = 1,

  /**
   * @generated from enum value: PENDING = 2;
   */
  PENDING = 2,

  /**
   * @generated from enum value: RUNNING = 3;
   */
  RUNNING = 3,

  /**
   * @generated from enum value: SUCCEEDED = 4;
   */
  SUCCEEDED = 4,
}

/**
 * Represents a request structure to create task.
 *
 * @generated from message flyteidl.service.TaskCreateRequest
 * @deprecated
 */
export declare class TaskCreateRequest extends Message<TaskCreateRequest> {
  /**
   * The inputs required to start the execution. All required inputs must be
   * included in this map. If not required and not provided, defaults apply.
   * +optional
   *
   * @generated from field: flyteidl.core.LiteralMap inputs = 1;
   */
  inputs?: LiteralMap;

  /**
   * Template of the task that encapsulates all the metadata of the task.
   *
   * @generated from field: flyteidl.core.TaskTemplate template = 2;
   */
  template?: TaskTemplate;

  /**
   * Prefix for where task output data will be written. (e.g. s3://my-bucket/randomstring)
   *
   * @generated from field: string output_prefix = 3;
   */
  outputPrefix: string;

  constructor(data?: PartialMessage<TaskCreateRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.service.TaskCreateRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskCreateRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskCreateRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskCreateRequest;

  static equals(a: TaskCreateRequest | PlainMessage<TaskCreateRequest> | undefined, b: TaskCreateRequest | PlainMessage<TaskCreateRequest> | undefined): boolean;
}

/**
 * Represents a create response structure.
 *
 * @generated from message flyteidl.service.TaskCreateResponse
 * @deprecated
 */
export declare class TaskCreateResponse extends Message<TaskCreateResponse> {
  /**
   * @generated from field: string job_id = 1;
   */
  jobId: string;

  constructor(data?: PartialMessage<TaskCreateResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.service.TaskCreateResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskCreateResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskCreateResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskCreateResponse;

  static equals(a: TaskCreateResponse | PlainMessage<TaskCreateResponse> | undefined, b: TaskCreateResponse | PlainMessage<TaskCreateResponse> | undefined): boolean;
}

/**
 * A message used to fetch a job state from backend plugin server.
 *
 * @generated from message flyteidl.service.TaskGetRequest
 * @deprecated
 */
export declare class TaskGetRequest extends Message<TaskGetRequest> {
  /**
   * A predefined yet extensible Task type identifier.
   *
   * @generated from field: string task_type = 1;
   */
  taskType: string;

  /**
   * The unique id identifying the job.
   *
   * @generated from field: string job_id = 2;
   */
  jobId: string;

  constructor(data?: PartialMessage<TaskGetRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.service.TaskGetRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskGetRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskGetRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskGetRequest;

  static equals(a: TaskGetRequest | PlainMessage<TaskGetRequest> | undefined, b: TaskGetRequest | PlainMessage<TaskGetRequest> | undefined): boolean;
}

/**
 * Response to get an individual task state.
 *
 * @generated from message flyteidl.service.TaskGetResponse
 * @deprecated
 */
export declare class TaskGetResponse extends Message<TaskGetResponse> {
  /**
   * The state of the execution is used to control its visibility in the UI/CLI.
   *
   * @generated from field: flyteidl.service.State state = 1;
   */
  state: State;

  /**
   * The outputs of the execution. It's typically used by sql task. Flyteplugins service will create a
   * Structured dataset pointing to the query result table.
   * +optional
   *
   * @generated from field: flyteidl.core.LiteralMap outputs = 2;
   */
  outputs?: LiteralMap;

  constructor(data?: PartialMessage<TaskGetResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.service.TaskGetResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskGetResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskGetResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskGetResponse;

  static equals(a: TaskGetResponse | PlainMessage<TaskGetResponse> | undefined, b: TaskGetResponse | PlainMessage<TaskGetResponse> | undefined): boolean;
}

/**
 * A message used to delete a task.
 *
 * @generated from message flyteidl.service.TaskDeleteRequest
 * @deprecated
 */
export declare class TaskDeleteRequest extends Message<TaskDeleteRequest> {
  /**
   * A predefined yet extensible Task type identifier.
   *
   * @generated from field: string task_type = 1;
   */
  taskType: string;

  /**
   * The unique id identifying the job.
   *
   * @generated from field: string job_id = 2;
   */
  jobId: string;

  constructor(data?: PartialMessage<TaskDeleteRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.service.TaskDeleteRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskDeleteRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskDeleteRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskDeleteRequest;

  static equals(a: TaskDeleteRequest | PlainMessage<TaskDeleteRequest> | undefined, b: TaskDeleteRequest | PlainMessage<TaskDeleteRequest> | undefined): boolean;
}

/**
 * Response to delete a task.
 *
 * @generated from message flyteidl.service.TaskDeleteResponse
 * @deprecated
 */
export declare class TaskDeleteResponse extends Message<TaskDeleteResponse> {
  constructor(data?: PartialMessage<TaskDeleteResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.service.TaskDeleteResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskDeleteResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskDeleteResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskDeleteResponse;

  static equals(a: TaskDeleteResponse | PlainMessage<TaskDeleteResponse> | undefined, b: TaskDeleteResponse | PlainMessage<TaskDeleteResponse> | undefined): boolean;
}

