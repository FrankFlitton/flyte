// @generated by protoc-gen-connect-es v1.1.3 with parameter "target=js+dts+ts"
// @generated from file flyteidl/service/signal.proto (package flyteidl.service, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Signal, SignalGetOrCreateRequest, SignalList, SignalListRequest, SignalSetRequest, SignalSetResponse } from "../admin/signal_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * SignalService defines an RPC Service that may create, update, and retrieve signal(s).
 *
 * @generated from service flyteidl.service.SignalService
 */
export declare const SignalService: {
  readonly typeName: "flyteidl.service.SignalService",
  readonly methods: {
    /**
     * Fetches or creates a :ref:`ref_flyteidl.admin.Signal`.
     *
     * Purposefully left out an HTTP API for this RPC call. This is meant to idempotently retrieve
     * a signal, meaning the first call will create the signal and all subsequent calls will
     * fetch the existing signal. This is only useful during Flyte Workflow execution and therefore
     * is not exposed to mitigate unintended behavior.
     * option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
     *   description: "Retrieve a signal, creating it if it does not exist."
     * };
     *
     * @generated from rpc flyteidl.service.SignalService.GetOrCreateSignal
     */
    readonly getOrCreateSignal: {
      readonly name: "GetOrCreateSignal",
      readonly I: typeof SignalGetOrCreateRequest,
      readonly O: typeof Signal,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Fetch a list of :ref:`ref_flyteidl.admin.Signal` definitions.
     *
     * @generated from rpc flyteidl.service.SignalService.ListSignals
     */
    readonly listSignals: {
      readonly name: "ListSignals",
      readonly I: typeof SignalListRequest,
      readonly O: typeof SignalList,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Sets the value on a :ref:`ref_flyteidl.admin.Signal` definition
     *
     * @generated from rpc flyteidl.service.SignalService.SetSignal
     */
    readonly setSignal: {
      readonly name: "SetSignal",
      readonly I: typeof SignalSetRequest,
      readonly O: typeof SignalSetResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

