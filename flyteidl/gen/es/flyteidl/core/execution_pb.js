// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/core/execution.proto (package flyteidl.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Duration, proto3 } from "@bufbuild/protobuf";

/**
 * Indicates various phases of Workflow Execution
 *
 * @generated from message flyteidl.core.WorkflowExecution
 */
export const WorkflowExecution = proto3.makeMessageType(
  "flyteidl.core.WorkflowExecution",
  [],
);

/**
 * @generated from enum flyteidl.core.WorkflowExecution.Phase
 */
export const WorkflowExecution_Phase = proto3.makeEnum(
  "flyteidl.core.WorkflowExecution.Phase",
  [
    {no: 0, name: "UNDEFINED"},
    {no: 1, name: "QUEUED"},
    {no: 2, name: "RUNNING"},
    {no: 3, name: "SUCCEEDING"},
    {no: 4, name: "SUCCEEDED"},
    {no: 5, name: "FAILING"},
    {no: 6, name: "FAILED"},
    {no: 7, name: "ABORTED"},
    {no: 8, name: "TIMED_OUT"},
    {no: 9, name: "ABORTING"},
  ],
);

/**
 * Indicates various phases of Node Execution that only include the time spent to run the nodes/workflows
 *
 * @generated from message flyteidl.core.NodeExecution
 */
export const NodeExecution = proto3.makeMessageType(
  "flyteidl.core.NodeExecution",
  [],
);

/**
 * @generated from enum flyteidl.core.NodeExecution.Phase
 */
export const NodeExecution_Phase = proto3.makeEnum(
  "flyteidl.core.NodeExecution.Phase",
  [
    {no: 0, name: "UNDEFINED"},
    {no: 1, name: "QUEUED"},
    {no: 2, name: "RUNNING"},
    {no: 3, name: "SUCCEEDED"},
    {no: 4, name: "FAILING"},
    {no: 5, name: "FAILED"},
    {no: 6, name: "ABORTED"},
    {no: 7, name: "SKIPPED"},
    {no: 8, name: "TIMED_OUT"},
    {no: 9, name: "DYNAMIC_RUNNING"},
    {no: 10, name: "RECOVERED"},
  ],
);

/**
 * Phases that task plugins can go through. Not all phases may be applicable to a specific plugin task,
 * but this is the cumulative list that customers may want to know about for their task.
 *
 * @generated from message flyteidl.core.TaskExecution
 */
export const TaskExecution = proto3.makeMessageType(
  "flyteidl.core.TaskExecution",
  [],
);

/**
 * @generated from enum flyteidl.core.TaskExecution.Phase
 */
export const TaskExecution_Phase = proto3.makeEnum(
  "flyteidl.core.TaskExecution.Phase",
  [
    {no: 0, name: "UNDEFINED"},
    {no: 1, name: "QUEUED"},
    {no: 2, name: "RUNNING"},
    {no: 3, name: "SUCCEEDED"},
    {no: 4, name: "ABORTED"},
    {no: 5, name: "FAILED"},
    {no: 6, name: "INITIALIZING"},
    {no: 7, name: "WAITING_FOR_RESOURCES"},
  ],
);

/**
 * Represents the error message from the execution.
 *
 * @generated from message flyteidl.core.ExecutionError
 */
export const ExecutionError = proto3.makeMessageType(
  "flyteidl.core.ExecutionError",
  () => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "error_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "kind", kind: "enum", T: proto3.getEnumType(ExecutionError_ErrorKind) },
  ],
);

/**
 * Error type: System or User
 *
 * @generated from enum flyteidl.core.ExecutionError.ErrorKind
 */
export const ExecutionError_ErrorKind = proto3.makeEnum(
  "flyteidl.core.ExecutionError.ErrorKind",
  [
    {no: 0, name: "UNKNOWN"},
    {no: 1, name: "USER"},
    {no: 2, name: "SYSTEM"},
  ],
);

/**
 * Log information for the task that is specific to a log sink
 * When our log story is flushed out, we may have more metadata here like log link expiry
 *
 * @generated from message flyteidl.core.TaskLog
 */
export const TaskLog = proto3.makeMessageType(
  "flyteidl.core.TaskLog",
  () => [
    { no: 1, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "message_format", kind: "enum", T: proto3.getEnumType(TaskLog_MessageFormat) },
    { no: 4, name: "ttl", kind: "message", T: Duration },
  ],
);

/**
 * @generated from enum flyteidl.core.TaskLog.MessageFormat
 */
export const TaskLog_MessageFormat = proto3.makeEnum(
  "flyteidl.core.TaskLog.MessageFormat",
  [
    {no: 0, name: "UNKNOWN"},
    {no: 1, name: "CSV"},
    {no: 2, name: "JSON"},
  ],
);

/**
 * Represents customized execution run-time attributes.
 *
 * @generated from message flyteidl.core.QualityOfServiceSpec
 */
export const QualityOfServiceSpec = proto3.makeMessageType(
  "flyteidl.core.QualityOfServiceSpec",
  () => [
    { no: 1, name: "queueing_budget", kind: "message", T: Duration },
  ],
);

/**
 * Indicates the priority of an execution.
 *
 * @generated from message flyteidl.core.QualityOfService
 */
export const QualityOfService = proto3.makeMessageType(
  "flyteidl.core.QualityOfService",
  () => [
    { no: 1, name: "tier", kind: "enum", T: proto3.getEnumType(QualityOfService_Tier), oneof: "designation" },
    { no: 2, name: "spec", kind: "message", T: QualityOfServiceSpec, oneof: "designation" },
  ],
);

/**
 * @generated from enum flyteidl.core.QualityOfService.Tier
 */
export const QualityOfService_Tier = proto3.makeEnum(
  "flyteidl.core.QualityOfService.Tier",
  [
    {no: 0, name: "UNDEFINED"},
    {no: 1, name: "HIGH"},
    {no: 2, name: "MEDIUM"},
    {no: 3, name: "LOW"},
  ],
);

