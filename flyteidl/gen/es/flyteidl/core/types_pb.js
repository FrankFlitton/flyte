// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/core/types.proto (package flyteidl.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3, Struct } from "@bufbuild/protobuf";

/**
 * Define a set of simple types.
 *
 * @generated from enum flyteidl.core.SimpleType
 */
export const SimpleType = proto3.makeEnum(
  "flyteidl.core.SimpleType",
  [
    {no: 0, name: "NONE"},
    {no: 1, name: "INTEGER"},
    {no: 2, name: "FLOAT"},
    {no: 3, name: "STRING"},
    {no: 4, name: "BOOLEAN"},
    {no: 5, name: "DATETIME"},
    {no: 6, name: "DURATION"},
    {no: 7, name: "BINARY"},
    {no: 8, name: "ERROR"},
    {no: 9, name: "STRUCT"},
  ],
);

/**
 * Defines schema columns and types to strongly type-validate schemas interoperability.
 *
 * @generated from message flyteidl.core.SchemaType
 */
export const SchemaType = proto3.makeMessageType(
  "flyteidl.core.SchemaType",
  () => [
    { no: 3, name: "columns", kind: "message", T: SchemaType_SchemaColumn, repeated: true },
  ],
);

/**
 * @generated from message flyteidl.core.SchemaType.SchemaColumn
 */
export const SchemaType_SchemaColumn = proto3.makeMessageType(
  "flyteidl.core.SchemaType.SchemaColumn",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(SchemaType_SchemaColumn_SchemaColumnType) },
  ],
  {localName: "SchemaType_SchemaColumn"},
);

/**
 * @generated from enum flyteidl.core.SchemaType.SchemaColumn.SchemaColumnType
 */
export const SchemaType_SchemaColumn_SchemaColumnType = proto3.makeEnum(
  "flyteidl.core.SchemaType.SchemaColumn.SchemaColumnType",
  [
    {no: 0, name: "INTEGER"},
    {no: 1, name: "FLOAT"},
    {no: 2, name: "STRING"},
    {no: 3, name: "BOOLEAN"},
    {no: 4, name: "DATETIME"},
    {no: 5, name: "DURATION"},
  ],
);

/**
 * @generated from message flyteidl.core.StructuredDatasetType
 */
export const StructuredDatasetType = proto3.makeMessageType(
  "flyteidl.core.StructuredDatasetType",
  () => [
    { no: 1, name: "columns", kind: "message", T: StructuredDatasetType_DatasetColumn, repeated: true },
    { no: 2, name: "format", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "external_schema_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "external_schema_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * @generated from message flyteidl.core.StructuredDatasetType.DatasetColumn
 */
export const StructuredDatasetType_DatasetColumn = proto3.makeMessageType(
  "flyteidl.core.StructuredDatasetType.DatasetColumn",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "literal_type", kind: "message", T: LiteralType },
  ],
  {localName: "StructuredDatasetType_DatasetColumn"},
);

/**
 * Defines type behavior for blob objects
 *
 * @generated from message flyteidl.core.BlobType
 */
export const BlobType = proto3.makeMessageType(
  "flyteidl.core.BlobType",
  () => [
    { no: 1, name: "format", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dimensionality", kind: "enum", T: proto3.getEnumType(BlobType_BlobDimensionality) },
  ],
);

/**
 * @generated from enum flyteidl.core.BlobType.BlobDimensionality
 */
export const BlobType_BlobDimensionality = proto3.makeEnum(
  "flyteidl.core.BlobType.BlobDimensionality",
  [
    {no: 0, name: "SINGLE"},
    {no: 1, name: "MULTIPART"},
  ],
);

/**
 * Enables declaring enum types, with predefined string values
 * For len(values) > 0, the first value in the ordered list is regarded as the default value. If you wish
 * To provide no defaults, make the first value as undefined.
 *
 * @generated from message flyteidl.core.EnumType
 */
export const EnumType = proto3.makeMessageType(
  "flyteidl.core.EnumType",
  () => [
    { no: 1, name: "values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * Defines a tagged union type, also known as a variant (and formally as the sum type).
 *
 * A sum type S is defined by a sequence of types (A, B, C, ...), each tagged by a string tag
 * A value of type S is constructed from a value of any of the variant types. The specific choice of type is recorded by
 * storing the varaint's tag with the literal value and can be examined in runtime.
 *
 * Type S is typically written as
 * S := Apple A | Banana B | Cantaloupe C | ...
 *
 * Notably, a nullable (optional) type is a sum type between some type X and the singleton type representing a null-value:
 * Optional X := X | Null
 *
 * See also: https://en.wikipedia.org/wiki/Tagged_union
 *
 * @generated from message flyteidl.core.UnionType
 */
export const UnionType = proto3.makeMessageType(
  "flyteidl.core.UnionType",
  () => [
    { no: 1, name: "variants", kind: "message", T: LiteralType, repeated: true },
  ],
);

/**
 * Hints to improve type matching
 * e.g. allows distinguishing output from custom type transformers
 * even if the underlying IDL serialization matches.
 *
 * @generated from message flyteidl.core.TypeStructure
 */
export const TypeStructure = proto3.makeMessageType(
  "flyteidl.core.TypeStructure",
  () => [
    { no: 1, name: "tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dataclass_type", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: LiteralType} },
  ],
);

/**
 * TypeAnnotation encapsulates registration time information about a type. This can be used for various control-plane operations. TypeAnnotation will not be available at runtime when a task runs.
 *
 * @generated from message flyteidl.core.TypeAnnotation
 */
export const TypeAnnotation = proto3.makeMessageType(
  "flyteidl.core.TypeAnnotation",
  () => [
    { no: 1, name: "annotations", kind: "message", T: Struct },
  ],
);

/**
 * Defines a strong type to allow type checking between interfaces.
 *
 * @generated from message flyteidl.core.LiteralType
 */
export const LiteralType = proto3.makeMessageType(
  "flyteidl.core.LiteralType",
  () => [
    { no: 1, name: "simple", kind: "enum", T: proto3.getEnumType(SimpleType), oneof: "type" },
    { no: 2, name: "schema", kind: "message", T: SchemaType, oneof: "type" },
    { no: 3, name: "collection_type", kind: "message", T: LiteralType, oneof: "type" },
    { no: 4, name: "map_value_type", kind: "message", T: LiteralType, oneof: "type" },
    { no: 5, name: "blob", kind: "message", T: BlobType, oneof: "type" },
    { no: 7, name: "enum_type", kind: "message", T: EnumType, oneof: "type" },
    { no: 8, name: "structured_dataset_type", kind: "message", T: StructuredDatasetType, oneof: "type" },
    { no: 10, name: "union_type", kind: "message", T: UnionType, oneof: "type" },
    { no: 6, name: "metadata", kind: "message", T: Struct },
    { no: 9, name: "annotation", kind: "message", T: TypeAnnotation },
    { no: 11, name: "structure", kind: "message", T: TypeStructure },
  ],
);

/**
 * A reference to an output produced by a node. The type can be retrieved -and validated- from
 * the underlying interface of the node.
 *
 * @generated from message flyteidl.core.OutputReference
 */
export const OutputReference = proto3.makeMessageType(
  "flyteidl.core.OutputReference",
  () => [
    { no: 1, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "var", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "attr_path", kind: "message", T: PromiseAttribute, repeated: true },
  ],
);

/**
 * @generated from message flyteidl.core.PromiseAttribute
 */
export const PromiseAttribute = proto3.makeMessageType(
  "flyteidl.core.PromiseAttribute",
  () => [
    { no: 1, name: "string_value", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 2, name: "int_value", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "value" },
  ],
);

/**
 * Represents an error thrown from a node.
 *
 * @generated from message flyteidl.core.Error
 */
export const Error = proto3.makeMessageType(
  "flyteidl.core.Error",
  () => [
    { no: 1, name: "failed_node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

