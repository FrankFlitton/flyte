// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/core/execution.proto (package flyteidl.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Indicates various phases of Workflow Execution
 *
 * @generated from message flyteidl.core.WorkflowExecution
 */
export declare class WorkflowExecution extends Message<WorkflowExecution> {
  constructor(data?: PartialMessage<WorkflowExecution>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.core.WorkflowExecution";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowExecution;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowExecution;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowExecution;

  static equals(a: WorkflowExecution | PlainMessage<WorkflowExecution> | undefined, b: WorkflowExecution | PlainMessage<WorkflowExecution> | undefined): boolean;
}

/**
 * @generated from enum flyteidl.core.WorkflowExecution.Phase
 */
export declare enum WorkflowExecution_Phase {
  /**
   * @generated from enum value: UNDEFINED = 0;
   */
  UNDEFINED = 0,

  /**
   * @generated from enum value: QUEUED = 1;
   */
  QUEUED = 1,

  /**
   * @generated from enum value: RUNNING = 2;
   */
  RUNNING = 2,

  /**
   * @generated from enum value: SUCCEEDING = 3;
   */
  SUCCEEDING = 3,

  /**
   * @generated from enum value: SUCCEEDED = 4;
   */
  SUCCEEDED = 4,

  /**
   * @generated from enum value: FAILING = 5;
   */
  FAILING = 5,

  /**
   * @generated from enum value: FAILED = 6;
   */
  FAILED = 6,

  /**
   * @generated from enum value: ABORTED = 7;
   */
  ABORTED = 7,

  /**
   * @generated from enum value: TIMED_OUT = 8;
   */
  TIMED_OUT = 8,

  /**
   * @generated from enum value: ABORTING = 9;
   */
  ABORTING = 9,
}

/**
 * Indicates various phases of Node Execution that only include the time spent to run the nodes/workflows
 *
 * @generated from message flyteidl.core.NodeExecution
 */
export declare class NodeExecution extends Message<NodeExecution> {
  constructor(data?: PartialMessage<NodeExecution>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.core.NodeExecution";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeExecution;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeExecution;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeExecution;

  static equals(a: NodeExecution | PlainMessage<NodeExecution> | undefined, b: NodeExecution | PlainMessage<NodeExecution> | undefined): boolean;
}

/**
 * @generated from enum flyteidl.core.NodeExecution.Phase
 */
export declare enum NodeExecution_Phase {
  /**
   * @generated from enum value: UNDEFINED = 0;
   */
  UNDEFINED = 0,

  /**
   * @generated from enum value: QUEUED = 1;
   */
  QUEUED = 1,

  /**
   * @generated from enum value: RUNNING = 2;
   */
  RUNNING = 2,

  /**
   * @generated from enum value: SUCCEEDED = 3;
   */
  SUCCEEDED = 3,

  /**
   * @generated from enum value: FAILING = 4;
   */
  FAILING = 4,

  /**
   * @generated from enum value: FAILED = 5;
   */
  FAILED = 5,

  /**
   * @generated from enum value: ABORTED = 6;
   */
  ABORTED = 6,

  /**
   * @generated from enum value: SKIPPED = 7;
   */
  SKIPPED = 7,

  /**
   * @generated from enum value: TIMED_OUT = 8;
   */
  TIMED_OUT = 8,

  /**
   * @generated from enum value: DYNAMIC_RUNNING = 9;
   */
  DYNAMIC_RUNNING = 9,

  /**
   * @generated from enum value: RECOVERED = 10;
   */
  RECOVERED = 10,
}

/**
 * Phases that task plugins can go through. Not all phases may be applicable to a specific plugin task,
 * but this is the cumulative list that customers may want to know about for their task.
 *
 * @generated from message flyteidl.core.TaskExecution
 */
export declare class TaskExecution extends Message<TaskExecution> {
  constructor(data?: PartialMessage<TaskExecution>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.core.TaskExecution";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskExecution;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskExecution;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskExecution;

  static equals(a: TaskExecution | PlainMessage<TaskExecution> | undefined, b: TaskExecution | PlainMessage<TaskExecution> | undefined): boolean;
}

/**
 * @generated from enum flyteidl.core.TaskExecution.Phase
 */
export declare enum TaskExecution_Phase {
  /**
   * @generated from enum value: UNDEFINED = 0;
   */
  UNDEFINED = 0,

  /**
   * @generated from enum value: QUEUED = 1;
   */
  QUEUED = 1,

  /**
   * @generated from enum value: RUNNING = 2;
   */
  RUNNING = 2,

  /**
   * @generated from enum value: SUCCEEDED = 3;
   */
  SUCCEEDED = 3,

  /**
   * @generated from enum value: ABORTED = 4;
   */
  ABORTED = 4,

  /**
   * @generated from enum value: FAILED = 5;
   */
  FAILED = 5,

  /**
   * To indicate cases where task is initializing, like: ErrImagePull, ContainerCreating, PodInitializing
   *
   * @generated from enum value: INITIALIZING = 6;
   */
  INITIALIZING = 6,

  /**
   * To address cases, where underlying resource is not available: Backoff error, Resource quota exceeded
   *
   * @generated from enum value: WAITING_FOR_RESOURCES = 7;
   */
  WAITING_FOR_RESOURCES = 7,
}

/**
 * Represents the error message from the execution.
 *
 * @generated from message flyteidl.core.ExecutionError
 */
export declare class ExecutionError extends Message<ExecutionError> {
  /**
   * Error code indicates a grouping of a type of error.
   * More Info: <Link>
   *
   * @generated from field: string code = 1;
   */
  code: string;

  /**
   * Detailed description of the error - including stack trace.
   *
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * Full error contents accessible via a URI
   *
   * @generated from field: string error_uri = 3;
   */
  errorUri: string;

  /**
   * @generated from field: flyteidl.core.ExecutionError.ErrorKind kind = 4;
   */
  kind: ExecutionError_ErrorKind;

  constructor(data?: PartialMessage<ExecutionError>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.core.ExecutionError";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecutionError;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecutionError;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecutionError;

  static equals(a: ExecutionError | PlainMessage<ExecutionError> | undefined, b: ExecutionError | PlainMessage<ExecutionError> | undefined): boolean;
}

/**
 * Error type: System or User
 *
 * @generated from enum flyteidl.core.ExecutionError.ErrorKind
 */
export declare enum ExecutionError_ErrorKind {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: USER = 1;
   */
  USER = 1,

  /**
   * @generated from enum value: SYSTEM = 2;
   */
  SYSTEM = 2,
}

/**
 * Log information for the task that is specific to a log sink
 * When our log story is flushed out, we may have more metadata here like log link expiry
 *
 * @generated from message flyteidl.core.TaskLog
 */
export declare class TaskLog extends Message<TaskLog> {
  /**
   * @generated from field: string uri = 1;
   */
  uri: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: flyteidl.core.TaskLog.MessageFormat message_format = 3;
   */
  messageFormat: TaskLog_MessageFormat;

  /**
   * @generated from field: google.protobuf.Duration ttl = 4;
   */
  ttl?: Duration;

  constructor(data?: PartialMessage<TaskLog>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.core.TaskLog";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskLog;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskLog;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskLog;

  static equals(a: TaskLog | PlainMessage<TaskLog> | undefined, b: TaskLog | PlainMessage<TaskLog> | undefined): boolean;
}

/**
 * @generated from enum flyteidl.core.TaskLog.MessageFormat
 */
export declare enum TaskLog_MessageFormat {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: CSV = 1;
   */
  CSV = 1,

  /**
   * @generated from enum value: JSON = 2;
   */
  JSON = 2,
}

/**
 * Represents customized execution run-time attributes.
 *
 * @generated from message flyteidl.core.QualityOfServiceSpec
 */
export declare class QualityOfServiceSpec extends Message<QualityOfServiceSpec> {
  /**
   * Indicates how much queueing delay an execution can tolerate.
   *
   * @generated from field: google.protobuf.Duration queueing_budget = 1;
   */
  queueingBudget?: Duration;

  constructor(data?: PartialMessage<QualityOfServiceSpec>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.core.QualityOfServiceSpec";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QualityOfServiceSpec;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QualityOfServiceSpec;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QualityOfServiceSpec;

  static equals(a: QualityOfServiceSpec | PlainMessage<QualityOfServiceSpec> | undefined, b: QualityOfServiceSpec | PlainMessage<QualityOfServiceSpec> | undefined): boolean;
}

/**
 * Indicates the priority of an execution.
 *
 * @generated from message flyteidl.core.QualityOfService
 */
export declare class QualityOfService extends Message<QualityOfService> {
  /**
   * @generated from oneof flyteidl.core.QualityOfService.designation
   */
  designation: {
    /**
     * @generated from field: flyteidl.core.QualityOfService.Tier tier = 1;
     */
    value: QualityOfService_Tier;
    case: "tier";
  } | {
    /**
     * @generated from field: flyteidl.core.QualityOfServiceSpec spec = 2;
     */
    value: QualityOfServiceSpec;
    case: "spec";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<QualityOfService>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.core.QualityOfService";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QualityOfService;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QualityOfService;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QualityOfService;

  static equals(a: QualityOfService | PlainMessage<QualityOfService> | undefined, b: QualityOfService | PlainMessage<QualityOfService> | undefined): boolean;
}

/**
 * @generated from enum flyteidl.core.QualityOfService.Tier
 */
export declare enum QualityOfService_Tier {
  /**
   * Default: no quality of service specified.
   *
   * @generated from enum value: UNDEFINED = 0;
   */
  UNDEFINED = 0,

  /**
   * @generated from enum value: HIGH = 1;
   */
  HIGH = 1,

  /**
   * @generated from enum value: MEDIUM = 2;
   */
  MEDIUM = 2,

  /**
   * @generated from enum value: LOW = 3;
   */
  LOW = 3,
}

