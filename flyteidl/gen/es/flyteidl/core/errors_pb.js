// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/core/errors.proto (package flyteidl.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { ExecutionError_ErrorKind } from "./execution_pb.js";

/**
 * Error message to propagate detailed errors from container executions to the execution
 * engine.
 *
 * @generated from message flyteidl.core.ContainerError
 */
export const ContainerError = proto3.makeMessageType(
  "flyteidl.core.ContainerError",
  () => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "kind", kind: "enum", T: proto3.getEnumType(ContainerError_Kind) },
    { no: 4, name: "origin", kind: "enum", T: proto3.getEnumType(ExecutionError_ErrorKind) },
  ],
);

/**
 * Defines a generic error type that dictates the behavior of the retry strategy.
 *
 * @generated from enum flyteidl.core.ContainerError.Kind
 */
export const ContainerError_Kind = proto3.makeEnum(
  "flyteidl.core.ContainerError.Kind",
  [
    {no: 0, name: "NON_RECOVERABLE"},
    {no: 1, name: "RECOVERABLE"},
  ],
);

/**
 * Defines the errors.pb file format the container can produce to communicate
 * failure reasons to the execution engine.
 *
 * @generated from message flyteidl.core.ErrorDocument
 */
export const ErrorDocument = proto3.makeMessageType(
  "flyteidl.core.ErrorDocument",
  () => [
    { no: 1, name: "error", kind: "message", T: ContainerError },
  ],
);

