// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/core/identifier.proto (package flyteidl.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Indicates a resource type within Flyte.
 *
 * @generated from enum flyteidl.core.ResourceType
 */
export declare enum ResourceType {
  /**
   * @generated from enum value: UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TASK = 1;
   */
  TASK = 1,

  /**
   * @generated from enum value: WORKFLOW = 2;
   */
  WORKFLOW = 2,

  /**
   * @generated from enum value: LAUNCH_PLAN = 3;
   */
  LAUNCH_PLAN = 3,

  /**
   * A dataset represents an entity modeled in Flyte DataCatalog. A Dataset is also a versioned entity and can be a compilation of multiple individual objects.
   * Eventually all Catalog objects should be modeled similar to Flyte Objects. The Dataset entities makes it possible for the UI  and CLI to act on the objects 
   * in a similar manner to other Flyte objects
   *
   * @generated from enum value: DATASET = 4;
   */
  DATASET = 4,
}

/**
 * Encapsulation of fields that uniquely identifies a Flyte resource.
 *
 * @generated from message flyteidl.core.Identifier
 */
export declare class Identifier extends Message<Identifier> {
  /**
   * Identifies the specific type of resource that this identifier corresponds to.
   *
   * @generated from field: flyteidl.core.ResourceType resource_type = 1;
   */
  resourceType: ResourceType;

  /**
   * Name of the project the resource belongs to.
   *
   * @generated from field: string project = 2;
   */
  project: string;

  /**
   * Name of the domain the resource belongs to.
   * A domain can be considered as a subset within a specific project.
   *
   * @generated from field: string domain = 3;
   */
  domain: string;

  /**
   * User provided value for the resource.
   *
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * Specific version of the resource.
   *
   * @generated from field: string version = 5;
   */
  version: string;

  constructor(data?: PartialMessage<Identifier>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.core.Identifier";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Identifier;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Identifier;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Identifier;

  static equals(a: Identifier | PlainMessage<Identifier> | undefined, b: Identifier | PlainMessage<Identifier> | undefined): boolean;
}

/**
 * Encapsulation of fields that uniquely identifies a Flyte workflow execution
 *
 * @generated from message flyteidl.core.WorkflowExecutionIdentifier
 */
export declare class WorkflowExecutionIdentifier extends Message<WorkflowExecutionIdentifier> {
  /**
   * Name of the project the resource belongs to.
   *
   * @generated from field: string project = 1;
   */
  project: string;

  /**
   * Name of the domain the resource belongs to.
   * A domain can be considered as a subset within a specific project.
   *
   * @generated from field: string domain = 2;
   */
  domain: string;

  /**
   * User or system provided value for the resource.
   *
   * @generated from field: string name = 4;
   */
  name: string;

  constructor(data?: PartialMessage<WorkflowExecutionIdentifier>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.core.WorkflowExecutionIdentifier";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowExecutionIdentifier;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowExecutionIdentifier;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowExecutionIdentifier;

  static equals(a: WorkflowExecutionIdentifier | PlainMessage<WorkflowExecutionIdentifier> | undefined, b: WorkflowExecutionIdentifier | PlainMessage<WorkflowExecutionIdentifier> | undefined): boolean;
}

/**
 * Encapsulation of fields that identify a Flyte node execution entity.
 *
 * @generated from message flyteidl.core.NodeExecutionIdentifier
 */
export declare class NodeExecutionIdentifier extends Message<NodeExecutionIdentifier> {
  /**
   * @generated from field: string node_id = 1;
   */
  nodeId: string;

  /**
   * @generated from field: flyteidl.core.WorkflowExecutionIdentifier execution_id = 2;
   */
  executionId?: WorkflowExecutionIdentifier;

  constructor(data?: PartialMessage<NodeExecutionIdentifier>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.core.NodeExecutionIdentifier";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeExecutionIdentifier;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeExecutionIdentifier;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeExecutionIdentifier;

  static equals(a: NodeExecutionIdentifier | PlainMessage<NodeExecutionIdentifier> | undefined, b: NodeExecutionIdentifier | PlainMessage<NodeExecutionIdentifier> | undefined): boolean;
}

/**
 * Encapsulation of fields that identify a Flyte task execution entity.
 *
 * @generated from message flyteidl.core.TaskExecutionIdentifier
 */
export declare class TaskExecutionIdentifier extends Message<TaskExecutionIdentifier> {
  /**
   * @generated from field: flyteidl.core.Identifier task_id = 1;
   */
  taskId?: Identifier;

  /**
   * @generated from field: flyteidl.core.NodeExecutionIdentifier node_execution_id = 2;
   */
  nodeExecutionId?: NodeExecutionIdentifier;

  /**
   * @generated from field: uint32 retry_attempt = 3;
   */
  retryAttempt: number;

  constructor(data?: PartialMessage<TaskExecutionIdentifier>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.core.TaskExecutionIdentifier";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskExecutionIdentifier;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskExecutionIdentifier;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskExecutionIdentifier;

  static equals(a: TaskExecutionIdentifier | PlainMessage<TaskExecutionIdentifier> | undefined, b: TaskExecutionIdentifier | PlainMessage<TaskExecutionIdentifier> | undefined): boolean;
}

/**
 * Encapsulation of fields the uniquely identify a signal.
 *
 * @generated from message flyteidl.core.SignalIdentifier
 */
export declare class SignalIdentifier extends Message<SignalIdentifier> {
  /**
   * Unique identifier for a signal.
   *
   * @generated from field: string signal_id = 1;
   */
  signalId: string;

  /**
   * Identifies the Flyte workflow execution this signal belongs to.
   *
   * @generated from field: flyteidl.core.WorkflowExecutionIdentifier execution_id = 2;
   */
  executionId?: WorkflowExecutionIdentifier;

  constructor(data?: PartialMessage<SignalIdentifier>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.core.SignalIdentifier";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignalIdentifier;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignalIdentifier;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignalIdentifier;

  static equals(a: SignalIdentifier | PlainMessage<SignalIdentifier> | undefined, b: SignalIdentifier | PlainMessage<SignalIdentifier> | undefined): boolean;
}

