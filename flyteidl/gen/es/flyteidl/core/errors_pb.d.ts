// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/core/errors.proto (package flyteidl.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { ExecutionError_ErrorKind } from "./execution_pb.js";

/**
 * Error message to propagate detailed errors from container executions to the execution
 * engine.
 *
 * @generated from message flyteidl.core.ContainerError
 */
export declare class ContainerError extends Message<ContainerError> {
  /**
   * A simplified code for errors, so that we can provide a glossary of all possible errors.
   *
   * @generated from field: string code = 1;
   */
  code: string;

  /**
   * A detailed error message.
   *
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * An abstract error kind for this error. Defaults to Non_Recoverable if not specified.
   *
   * @generated from field: flyteidl.core.ContainerError.Kind kind = 3;
   */
  kind: ContainerError_Kind;

  /**
   * Defines the origin of the error (system, user, unknown).
   *
   * @generated from field: flyteidl.core.ExecutionError.ErrorKind origin = 4;
   */
  origin: ExecutionError_ErrorKind;

  constructor(data?: PartialMessage<ContainerError>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.core.ContainerError";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContainerError;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContainerError;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContainerError;

  static equals(a: ContainerError | PlainMessage<ContainerError> | undefined, b: ContainerError | PlainMessage<ContainerError> | undefined): boolean;
}

/**
 * Defines a generic error type that dictates the behavior of the retry strategy.
 *
 * @generated from enum flyteidl.core.ContainerError.Kind
 */
export declare enum ContainerError_Kind {
  /**
   * @generated from enum value: NON_RECOVERABLE = 0;
   */
  NON_RECOVERABLE = 0,

  /**
   * @generated from enum value: RECOVERABLE = 1;
   */
  RECOVERABLE = 1,
}

/**
 * Defines the errors.pb file format the container can produce to communicate
 * failure reasons to the execution engine.
 *
 * @generated from message flyteidl.core.ErrorDocument
 */
export declare class ErrorDocument extends Message<ErrorDocument> {
  /**
   * The error raised during execution.
   *
   * @generated from field: flyteidl.core.ContainerError error = 1;
   */
  error?: ContainerError;

  constructor(data?: PartialMessage<ErrorDocument>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.core.ErrorDocument";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ErrorDocument;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ErrorDocument;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ErrorDocument;

  static equals(a: ErrorDocument | PlainMessage<ErrorDocument> | undefined, b: ErrorDocument | PlainMessage<ErrorDocument> | undefined): boolean;
}

