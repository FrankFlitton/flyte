// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/core/security.proto (package flyteidl.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";

/**
 * Secret encapsulates information about the secret a task needs to proceed. An environment variable
 * FLYTE_SECRETS_ENV_PREFIX will be passed to indicate the prefix of the environment variables that will be present if
 * secrets are passed through environment variables.
 * FLYTE_SECRETS_DEFAULT_DIR will be passed to indicate the prefix of the path where secrets will be mounted if secrets
 * are passed through file mounts.
 *
 * @generated from message flyteidl.core.Secret
 */
export const Secret = proto3.makeMessageType(
  "flyteidl.core.Secret",
  () => [
    { no: 1, name: "group", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "group_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "mount_requirement", kind: "enum", T: proto3.getEnumType(Secret_MountType) },
  ],
);

/**
 * @generated from enum flyteidl.core.Secret.MountType
 */
export const Secret_MountType = proto3.makeEnum(
  "flyteidl.core.Secret.MountType",
  [
    {no: 0, name: "ANY"},
    {no: 1, name: "ENV_VAR"},
    {no: 2, name: "FILE"},
  ],
);

/**
 * OAuth2Client encapsulates OAuth2 Client Credentials to be used when making calls on behalf of that task.
 *
 * @generated from message flyteidl.core.OAuth2Client
 */
export const OAuth2Client = proto3.makeMessageType(
  "flyteidl.core.OAuth2Client",
  () => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_secret", kind: "message", T: Secret },
  ],
);

/**
 * Identity encapsulates the various security identities a task can run as. It's up to the underlying plugin to pick the
 * right identity for the execution environment.
 *
 * @generated from message flyteidl.core.Identity
 */
export const Identity = proto3.makeMessageType(
  "flyteidl.core.Identity",
  () => [
    { no: 1, name: "iam_role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "k8s_service_account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "oauth2_client", kind: "message", T: OAuth2Client },
    { no: 4, name: "execution_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * OAuth2TokenRequest encapsulates information needed to request an OAuth2 token.
 * FLYTE_TOKENS_ENV_PREFIX will be passed to indicate the prefix of the environment variables that will be present if
 * tokens are passed through environment variables.
 * FLYTE_TOKENS_PATH_PREFIX will be passed to indicate the prefix of the path where secrets will be mounted if tokens
 * are passed through file mounts.
 *
 * @generated from message flyteidl.core.OAuth2TokenRequest
 */
export const OAuth2TokenRequest = proto3.makeMessageType(
  "flyteidl.core.OAuth2TokenRequest",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(OAuth2TokenRequest_Type) },
    { no: 3, name: "client", kind: "message", T: OAuth2Client },
    { no: 4, name: "idp_discovery_endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "token_endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Type of the token requested.
 *
 * @generated from enum flyteidl.core.OAuth2TokenRequest.Type
 */
export const OAuth2TokenRequest_Type = proto3.makeEnum(
  "flyteidl.core.OAuth2TokenRequest.Type",
  [
    {no: 0, name: "CLIENT_CREDENTIALS"},
  ],
);

/**
 * SecurityContext holds security attributes that apply to tasks.
 *
 * @generated from message flyteidl.core.SecurityContext
 */
export const SecurityContext = proto3.makeMessageType(
  "flyteidl.core.SecurityContext",
  () => [
    { no: 1, name: "run_as", kind: "message", T: Identity },
    { no: 2, name: "secrets", kind: "message", T: Secret, repeated: true },
    { no: 3, name: "tokens", kind: "message", T: OAuth2TokenRequest, repeated: true },
  ],
);

