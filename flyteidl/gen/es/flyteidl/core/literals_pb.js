// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/core/literals.proto (package flyteidl.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Duration, proto3, Struct, Timestamp } from "@bufbuild/protobuf";
import { BlobType, Error, LiteralType, OutputReference, SchemaType, StructuredDatasetType } from "./types_pb.js";

/**
 * Primitive Types
 *
 * @generated from message flyteidl.core.Primitive
 */
export const Primitive = proto3.makeMessageType(
  "flyteidl.core.Primitive",
  () => [
    { no: 1, name: "integer", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "value" },
    { no: 2, name: "float_value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, oneof: "value" },
    { no: 3, name: "string_value", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 4, name: "boolean", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "value" },
    { no: 5, name: "datetime", kind: "message", T: Timestamp, oneof: "value" },
    { no: 6, name: "duration", kind: "message", T: Duration, oneof: "value" },
  ],
);

/**
 * Used to denote a nil/null/None assignment to a scalar value. The underlying LiteralType for Void is intentionally
 * undefined since it can be assigned to a scalar of any LiteralType.
 *
 * @generated from message flyteidl.core.Void
 */
export const Void = proto3.makeMessageType(
  "flyteidl.core.Void",
  [],
);

/**
 * Refers to an offloaded set of files. It encapsulates the type of the store and a unique uri for where the data is.
 * There are no restrictions on how the uri is formatted since it will depend on how to interact with the store.
 *
 * @generated from message flyteidl.core.Blob
 */
export const Blob = proto3.makeMessageType(
  "flyteidl.core.Blob",
  () => [
    { no: 1, name: "metadata", kind: "message", T: BlobMetadata },
    { no: 3, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message flyteidl.core.BlobMetadata
 */
export const BlobMetadata = proto3.makeMessageType(
  "flyteidl.core.BlobMetadata",
  () => [
    { no: 1, name: "type", kind: "message", T: BlobType },
  ],
);

/**
 * A simple byte array with a tag to help different parts of the system communicate about what is in the byte array.
 * It's strongly advisable that consumers of this type define a unique tag and validate the tag before parsing the data.
 *
 * @generated from message flyteidl.core.Binary
 */
export const Binary = proto3.makeMessageType(
  "flyteidl.core.Binary",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * A strongly typed schema that defines the interface of data retrieved from the underlying storage medium.
 *
 * @generated from message flyteidl.core.Schema
 */
export const Schema = proto3.makeMessageType(
  "flyteidl.core.Schema",
  () => [
    { no: 1, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "message", T: SchemaType },
  ],
);

/**
 * The runtime representation of a tagged union value. See `UnionType` for more details.
 *
 * @generated from message flyteidl.core.Union
 */
export const Union = proto3.makeMessageType(
  "flyteidl.core.Union",
  () => [
    { no: 1, name: "value", kind: "message", T: Literal },
    { no: 2, name: "type", kind: "message", T: LiteralType },
  ],
);

/**
 * @generated from message flyteidl.core.StructuredDatasetMetadata
 */
export const StructuredDatasetMetadata = proto3.makeMessageType(
  "flyteidl.core.StructuredDatasetMetadata",
  () => [
    { no: 1, name: "structured_dataset_type", kind: "message", T: StructuredDatasetType },
  ],
);

/**
 * @generated from message flyteidl.core.StructuredDataset
 */
export const StructuredDataset = proto3.makeMessageType(
  "flyteidl.core.StructuredDataset",
  () => [
    { no: 1, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: StructuredDatasetMetadata },
  ],
);

/**
 * @generated from message flyteidl.core.Scalar
 */
export const Scalar = proto3.makeMessageType(
  "flyteidl.core.Scalar",
  () => [
    { no: 1, name: "primitive", kind: "message", T: Primitive, oneof: "value" },
    { no: 2, name: "blob", kind: "message", T: Blob, oneof: "value" },
    { no: 3, name: "binary", kind: "message", T: Binary, oneof: "value" },
    { no: 4, name: "schema", kind: "message", T: Schema, oneof: "value" },
    { no: 5, name: "none_type", kind: "message", T: Void, oneof: "value" },
    { no: 6, name: "error", kind: "message", T: Error, oneof: "value" },
    { no: 7, name: "generic", kind: "message", T: Struct, oneof: "value" },
    { no: 8, name: "structured_dataset", kind: "message", T: StructuredDataset, oneof: "value" },
    { no: 9, name: "union", kind: "message", T: Union, oneof: "value" },
  ],
);

/**
 * A simple value. This supports any level of nesting (e.g. array of array of array of Blobs) as well as simple primitives.
 *
 * @generated from message flyteidl.core.Literal
 */
export const Literal = proto3.makeMessageType(
  "flyteidl.core.Literal",
  () => [
    { no: 1, name: "scalar", kind: "message", T: Scalar, oneof: "value" },
    { no: 2, name: "collection", kind: "message", T: LiteralCollection, oneof: "value" },
    { no: 3, name: "map", kind: "message", T: LiteralMap, oneof: "value" },
    { no: 4, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * A collection of literals. This is a workaround since oneofs in proto messages cannot contain a repeated field.
 *
 * @generated from message flyteidl.core.LiteralCollection
 */
export const LiteralCollection = proto3.makeMessageType(
  "flyteidl.core.LiteralCollection",
  () => [
    { no: 1, name: "literals", kind: "message", T: Literal, repeated: true },
  ],
);

/**
 * A map of literals. This is a workaround since oneofs in proto messages cannot contain a repeated field.
 *
 * @generated from message flyteidl.core.LiteralMap
 */
export const LiteralMap = proto3.makeMessageType(
  "flyteidl.core.LiteralMap",
  () => [
    { no: 1, name: "literals", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Literal} },
  ],
);

/**
 * A collection of BindingData items.
 *
 * @generated from message flyteidl.core.BindingDataCollection
 */
export const BindingDataCollection = proto3.makeMessageType(
  "flyteidl.core.BindingDataCollection",
  () => [
    { no: 1, name: "bindings", kind: "message", T: BindingData, repeated: true },
  ],
);

/**
 * A map of BindingData items.
 *
 * @generated from message flyteidl.core.BindingDataMap
 */
export const BindingDataMap = proto3.makeMessageType(
  "flyteidl.core.BindingDataMap",
  () => [
    { no: 1, name: "bindings", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: BindingData} },
  ],
);

/**
 * @generated from message flyteidl.core.UnionInfo
 */
export const UnionInfo = proto3.makeMessageType(
  "flyteidl.core.UnionInfo",
  () => [
    { no: 1, name: "targetType", kind: "message", T: LiteralType },
  ],
);

/**
 * Specifies either a simple value or a reference to another output.
 *
 * @generated from message flyteidl.core.BindingData
 */
export const BindingData = proto3.makeMessageType(
  "flyteidl.core.BindingData",
  () => [
    { no: 1, name: "scalar", kind: "message", T: Scalar, oneof: "value" },
    { no: 2, name: "collection", kind: "message", T: BindingDataCollection, oneof: "value" },
    { no: 3, name: "promise", kind: "message", T: OutputReference, oneof: "value" },
    { no: 4, name: "map", kind: "message", T: BindingDataMap, oneof: "value" },
    { no: 5, name: "union", kind: "message", T: UnionInfo },
  ],
);

/**
 * An input/output binding of a variable to either static value or a node output.
 *
 * @generated from message flyteidl.core.Binding
 */
export const Binding = proto3.makeMessageType(
  "flyteidl.core.Binding",
  () => [
    { no: 1, name: "var", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "binding", kind: "message", T: BindingData },
  ],
);

/**
 * A generic key value pair.
 *
 * @generated from message flyteidl.core.KeyValuePair
 */
export const KeyValuePair = proto3.makeMessageType(
  "flyteidl.core.KeyValuePair",
  () => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Retry strategy associated with an executable unit.
 *
 * @generated from message flyteidl.core.RetryStrategy
 */
export const RetryStrategy = proto3.makeMessageType(
  "flyteidl.core.RetryStrategy",
  () => [
    { no: 5, name: "retries", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

