// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/core/interface.proto (package flyteidl.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { LiteralType } from "./types_pb.js";
import type { Literal } from "./literals_pb.js";

/**
 * Defines a strongly typed variable.
 *
 * @generated from message flyteidl.core.Variable
 */
export declare class Variable extends Message<Variable> {
  /**
   * Variable literal type.
   *
   * @generated from field: flyteidl.core.LiteralType type = 1;
   */
  type?: LiteralType;

  /**
   * +optional string describing input variable
   *
   * @generated from field: string description = 2;
   */
  description: string;

  constructor(data?: PartialMessage<Variable>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.core.Variable";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Variable;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Variable;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Variable;

  static equals(a: Variable | PlainMessage<Variable> | undefined, b: Variable | PlainMessage<Variable> | undefined): boolean;
}

/**
 * A map of Variables
 *
 * @generated from message flyteidl.core.VariableMap
 */
export declare class VariableMap extends Message<VariableMap> {
  /**
   * Defines a map of variable names to variables.
   *
   * @generated from field: map<string, flyteidl.core.Variable> variables = 1;
   */
  variables: { [key: string]: Variable };

  constructor(data?: PartialMessage<VariableMap>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.core.VariableMap";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VariableMap;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VariableMap;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VariableMap;

  static equals(a: VariableMap | PlainMessage<VariableMap> | undefined, b: VariableMap | PlainMessage<VariableMap> | undefined): boolean;
}

/**
 * Defines strongly typed inputs and outputs.
 *
 * @generated from message flyteidl.core.TypedInterface
 */
export declare class TypedInterface extends Message<TypedInterface> {
  /**
   * @generated from field: flyteidl.core.VariableMap inputs = 1;
   */
  inputs?: VariableMap;

  /**
   * @generated from field: flyteidl.core.VariableMap outputs = 2;
   */
  outputs?: VariableMap;

  constructor(data?: PartialMessage<TypedInterface>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.core.TypedInterface";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TypedInterface;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TypedInterface;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TypedInterface;

  static equals(a: TypedInterface | PlainMessage<TypedInterface> | undefined, b: TypedInterface | PlainMessage<TypedInterface> | undefined): boolean;
}

/**
 * A parameter is used as input to a launch plan and has
 * the special ability to have a default value or mark itself as required.
 *
 * @generated from message flyteidl.core.Parameter
 */
export declare class Parameter extends Message<Parameter> {
  /**
   * +required Variable. Defines the type of the variable backing this parameter.
   *
   * @generated from field: flyteidl.core.Variable var = 1;
   */
  var?: Variable;

  /**
   * +optional
   *
   * @generated from oneof flyteidl.core.Parameter.behavior
   */
  behavior: {
    /**
     * Defines a default value that has to match the variable type defined.
     *
     * @generated from field: flyteidl.core.Literal default = 2;
     */
    value: Literal;
    case: "default";
  } | {
    /**
     * +optional, is this value required to be filled.
     *
     * @generated from field: bool required = 3;
     */
    value: boolean;
    case: "required";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<Parameter>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.core.Parameter";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Parameter;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Parameter;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Parameter;

  static equals(a: Parameter | PlainMessage<Parameter> | undefined, b: Parameter | PlainMessage<Parameter> | undefined): boolean;
}

/**
 * A map of Parameters.
 *
 * @generated from message flyteidl.core.ParameterMap
 */
export declare class ParameterMap extends Message<ParameterMap> {
  /**
   * Defines a map of parameter names to parameters.
   *
   * @generated from field: map<string, flyteidl.core.Parameter> parameters = 1;
   */
  parameters: { [key: string]: Parameter };

  constructor(data?: PartialMessage<ParameterMap>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.core.ParameterMap";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParameterMap;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParameterMap;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParameterMap;

  static equals(a: ParameterMap | PlainMessage<ParameterMap> | undefined, b: ParameterMap | PlainMessage<ParameterMap> | undefined): boolean;
}

