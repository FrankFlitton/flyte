// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/admin/matchable_resource.proto (package flyteidl.admin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { BoolValue, proto3 } from "@bufbuild/protobuf";
import { SecurityContext } from "../core/security_pb.js";
import { Annotations, Envs, Labels, RawOutputDataConfig } from "./common_pb.js";
import { QualityOfService } from "../core/execution_pb.js";
import { ClusterAssignment } from "./cluster_assignment_pb.js";

/**
 * Defines a resource that can be configured by customizable Project-, ProjectDomain- or WorkflowAttributes
 * based on matching tags.
 *
 * @generated from enum flyteidl.admin.MatchableResource
 */
export const MatchableResource = proto3.makeEnum(
  "flyteidl.admin.MatchableResource",
  [
    {no: 0, name: "TASK_RESOURCE"},
    {no: 1, name: "CLUSTER_RESOURCE"},
    {no: 2, name: "EXECUTION_QUEUE"},
    {no: 3, name: "EXECUTION_CLUSTER_LABEL"},
    {no: 4, name: "QUALITY_OF_SERVICE_SPECIFICATION"},
    {no: 5, name: "PLUGIN_OVERRIDE"},
    {no: 6, name: "WORKFLOW_EXECUTION_CONFIG"},
    {no: 7, name: "CLUSTER_ASSIGNMENT"},
  ],
);

/**
 * Defines a set of overridable task resource attributes set during task registration.
 *
 * @generated from message flyteidl.admin.TaskResourceSpec
 */
export const TaskResourceSpec = proto3.makeMessageType(
  "flyteidl.admin.TaskResourceSpec",
  () => [
    { no: 1, name: "cpu", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "gpu", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "memory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "storage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "ephemeral_storage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Defines task resource defaults and limits that will be applied at task registration.
 *
 * @generated from message flyteidl.admin.TaskResourceAttributes
 */
export const TaskResourceAttributes = proto3.makeMessageType(
  "flyteidl.admin.TaskResourceAttributes",
  () => [
    { no: 1, name: "defaults", kind: "message", T: TaskResourceSpec },
    { no: 2, name: "limits", kind: "message", T: TaskResourceSpec },
  ],
);

/**
 * @generated from message flyteidl.admin.ClusterResourceAttributes
 */
export const ClusterResourceAttributes = proto3.makeMessageType(
  "flyteidl.admin.ClusterResourceAttributes",
  () => [
    { no: 1, name: "attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ],
);

/**
 * @generated from message flyteidl.admin.ExecutionQueueAttributes
 */
export const ExecutionQueueAttributes = proto3.makeMessageType(
  "flyteidl.admin.ExecutionQueueAttributes",
  () => [
    { no: 1, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * @generated from message flyteidl.admin.ExecutionClusterLabel
 */
export const ExecutionClusterLabel = proto3.makeMessageType(
  "flyteidl.admin.ExecutionClusterLabel",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * This MatchableAttribute configures selecting alternate plugin implementations for a given task type.
 * In addition to an override implementation a selection of fallbacks can be provided or other modes
 * for handling cases where the desired plugin override is not enabled in a given Flyte deployment.
 *
 * @generated from message flyteidl.admin.PluginOverride
 */
export const PluginOverride = proto3.makeMessageType(
  "flyteidl.admin.PluginOverride",
  () => [
    { no: 1, name: "task_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "plugin_id", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "missing_plugin_behavior", kind: "enum", T: proto3.getEnumType(PluginOverride_MissingPluginBehavior) },
  ],
);

/**
 * @generated from enum flyteidl.admin.PluginOverride.MissingPluginBehavior
 */
export const PluginOverride_MissingPluginBehavior = proto3.makeEnum(
  "flyteidl.admin.PluginOverride.MissingPluginBehavior",
  [
    {no: 0, name: "FAIL"},
    {no: 1, name: "USE_DEFAULT"},
  ],
);

/**
 * @generated from message flyteidl.admin.PluginOverrides
 */
export const PluginOverrides = proto3.makeMessageType(
  "flyteidl.admin.PluginOverrides",
  () => [
    { no: 1, name: "overrides", kind: "message", T: PluginOverride, repeated: true },
  ],
);

/**
 * Adds defaults for customizable workflow-execution specifications and overrides.
 *
 * @generated from message flyteidl.admin.WorkflowExecutionConfig
 */
export const WorkflowExecutionConfig = proto3.makeMessageType(
  "flyteidl.admin.WorkflowExecutionConfig",
  () => [
    { no: 1, name: "max_parallelism", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "security_context", kind: "message", T: SecurityContext },
    { no: 3, name: "raw_output_data_config", kind: "message", T: RawOutputDataConfig },
    { no: 4, name: "labels", kind: "message", T: Labels },
    { no: 5, name: "annotations", kind: "message", T: Annotations },
    { no: 6, name: "interruptible", kind: "message", T: BoolValue },
    { no: 7, name: "overwrite_cache", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "envs", kind: "message", T: Envs },
  ],
);

/**
 * Generic container for encapsulating all types of the above attributes messages.
 *
 * @generated from message flyteidl.admin.MatchingAttributes
 */
export const MatchingAttributes = proto3.makeMessageType(
  "flyteidl.admin.MatchingAttributes",
  () => [
    { no: 1, name: "task_resource_attributes", kind: "message", T: TaskResourceAttributes, oneof: "target" },
    { no: 2, name: "cluster_resource_attributes", kind: "message", T: ClusterResourceAttributes, oneof: "target" },
    { no: 3, name: "execution_queue_attributes", kind: "message", T: ExecutionQueueAttributes, oneof: "target" },
    { no: 4, name: "execution_cluster_label", kind: "message", T: ExecutionClusterLabel, oneof: "target" },
    { no: 5, name: "quality_of_service", kind: "message", T: QualityOfService, oneof: "target" },
    { no: 6, name: "plugin_overrides", kind: "message", T: PluginOverrides, oneof: "target" },
    { no: 7, name: "workflow_execution_config", kind: "message", T: WorkflowExecutionConfig, oneof: "target" },
    { no: 8, name: "cluster_assignment", kind: "message", T: ClusterAssignment, oneof: "target" },
  ],
);

/**
 * Represents a custom set of attributes applied for either a domain; a domain and project; or
 * domain, project and workflow name.
 * These are used to override system level defaults for kubernetes cluster resource management,
 * default execution values, and more all across different levels of specificity.
 *
 * @generated from message flyteidl.admin.MatchableAttributesConfiguration
 */
export const MatchableAttributesConfiguration = proto3.makeMessageType(
  "flyteidl.admin.MatchableAttributesConfiguration",
  () => [
    { no: 1, name: "attributes", kind: "message", T: MatchingAttributes },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "workflow", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "launch_plan", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Request all matching resource attributes for a resource type.
 * See :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for more details
 *
 * @generated from message flyteidl.admin.ListMatchableAttributesRequest
 */
export const ListMatchableAttributesRequest = proto3.makeMessageType(
  "flyteidl.admin.ListMatchableAttributesRequest",
  () => [
    { no: 1, name: "resource_type", kind: "enum", T: proto3.getEnumType(MatchableResource) },
  ],
);

/**
 * Response for a request for all matching resource attributes for a resource type.
 * See :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for more details
 *
 * @generated from message flyteidl.admin.ListMatchableAttributesResponse
 */
export const ListMatchableAttributesResponse = proto3.makeMessageType(
  "flyteidl.admin.ListMatchableAttributesResponse",
  () => [
    { no: 1, name: "configurations", kind: "message", T: MatchableAttributesConfiguration, repeated: true },
  ],
);

