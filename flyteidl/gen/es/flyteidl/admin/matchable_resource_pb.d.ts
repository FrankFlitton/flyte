// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/admin/matchable_resource.proto (package flyteidl.admin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { SecurityContext } from "../core/security_pb.js";
import type { Annotations, Envs, Labels, RawOutputDataConfig } from "./common_pb.js";
import type { QualityOfService } from "../core/execution_pb.js";
import type { ClusterAssignment } from "./cluster_assignment_pb.js";

/**
 * Defines a resource that can be configured by customizable Project-, ProjectDomain- or WorkflowAttributes
 * based on matching tags.
 *
 * @generated from enum flyteidl.admin.MatchableResource
 */
export declare enum MatchableResource {
  /**
   * Applies to customizable task resource requests and limits.
   *
   * @generated from enum value: TASK_RESOURCE = 0;
   */
  TASK_RESOURCE = 0,

  /**
   * Applies to configuring templated kubernetes cluster resources.
   *
   * @generated from enum value: CLUSTER_RESOURCE = 1;
   */
  CLUSTER_RESOURCE = 1,

  /**
   * Configures task and dynamic task execution queue assignment.
   *
   * @generated from enum value: EXECUTION_QUEUE = 2;
   */
  EXECUTION_QUEUE = 2,

  /**
   * Configures the K8s cluster label to be used for execution to be run
   *
   * @generated from enum value: EXECUTION_CLUSTER_LABEL = 3;
   */
  EXECUTION_CLUSTER_LABEL = 3,

  /**
   * Configures default quality of service when undefined in an execution spec.
   *
   * @generated from enum value: QUALITY_OF_SERVICE_SPECIFICATION = 4;
   */
  QUALITY_OF_SERVICE_SPECIFICATION = 4,

  /**
   * Selects configurable plugin implementation behavior for a given task type.
   *
   * @generated from enum value: PLUGIN_OVERRIDE = 5;
   */
  PLUGIN_OVERRIDE = 5,

  /**
   * Adds defaults for customizable workflow-execution specifications and overrides.
   *
   * @generated from enum value: WORKFLOW_EXECUTION_CONFIG = 6;
   */
  WORKFLOW_EXECUTION_CONFIG = 6,

  /**
   * Controls how to select an available cluster on which this execution should run.
   *
   * @generated from enum value: CLUSTER_ASSIGNMENT = 7;
   */
  CLUSTER_ASSIGNMENT = 7,
}

/**
 * Defines a set of overridable task resource attributes set during task registration.
 *
 * @generated from message flyteidl.admin.TaskResourceSpec
 */
export declare class TaskResourceSpec extends Message<TaskResourceSpec> {
  /**
   * @generated from field: string cpu = 1;
   */
  cpu: string;

  /**
   * @generated from field: string gpu = 2;
   */
  gpu: string;

  /**
   * @generated from field: string memory = 3;
   */
  memory: string;

  /**
   * @generated from field: string storage = 4;
   */
  storage: string;

  /**
   * @generated from field: string ephemeral_storage = 5;
   */
  ephemeralStorage: string;

  constructor(data?: PartialMessage<TaskResourceSpec>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.TaskResourceSpec";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskResourceSpec;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskResourceSpec;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskResourceSpec;

  static equals(a: TaskResourceSpec | PlainMessage<TaskResourceSpec> | undefined, b: TaskResourceSpec | PlainMessage<TaskResourceSpec> | undefined): boolean;
}

/**
 * Defines task resource defaults and limits that will be applied at task registration.
 *
 * @generated from message flyteidl.admin.TaskResourceAttributes
 */
export declare class TaskResourceAttributes extends Message<TaskResourceAttributes> {
  /**
   * @generated from field: flyteidl.admin.TaskResourceSpec defaults = 1;
   */
  defaults?: TaskResourceSpec;

  /**
   * @generated from field: flyteidl.admin.TaskResourceSpec limits = 2;
   */
  limits?: TaskResourceSpec;

  constructor(data?: PartialMessage<TaskResourceAttributes>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.TaskResourceAttributes";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskResourceAttributes;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskResourceAttributes;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskResourceAttributes;

  static equals(a: TaskResourceAttributes | PlainMessage<TaskResourceAttributes> | undefined, b: TaskResourceAttributes | PlainMessage<TaskResourceAttributes> | undefined): boolean;
}

/**
 * @generated from message flyteidl.admin.ClusterResourceAttributes
 */
export declare class ClusterResourceAttributes extends Message<ClusterResourceAttributes> {
  /**
   * Custom resource attributes which will be applied in cluster resource creation (e.g. quotas).
   * Map keys are the *case-sensitive* names of variables in templatized resource files.
   * Map values should be the custom values which get substituted during resource creation.
   *
   * @generated from field: map<string, string> attributes = 1;
   */
  attributes: { [key: string]: string };

  constructor(data?: PartialMessage<ClusterResourceAttributes>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.ClusterResourceAttributes";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterResourceAttributes;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterResourceAttributes;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterResourceAttributes;

  static equals(a: ClusterResourceAttributes | PlainMessage<ClusterResourceAttributes> | undefined, b: ClusterResourceAttributes | PlainMessage<ClusterResourceAttributes> | undefined): boolean;
}

/**
 * @generated from message flyteidl.admin.ExecutionQueueAttributes
 */
export declare class ExecutionQueueAttributes extends Message<ExecutionQueueAttributes> {
  /**
   * Tags used for assigning execution queues for tasks defined within this project.
   *
   * @generated from field: repeated string tags = 1;
   */
  tags: string[];

  constructor(data?: PartialMessage<ExecutionQueueAttributes>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.ExecutionQueueAttributes";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecutionQueueAttributes;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecutionQueueAttributes;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecutionQueueAttributes;

  static equals(a: ExecutionQueueAttributes | PlainMessage<ExecutionQueueAttributes> | undefined, b: ExecutionQueueAttributes | PlainMessage<ExecutionQueueAttributes> | undefined): boolean;
}

/**
 * @generated from message flyteidl.admin.ExecutionClusterLabel
 */
export declare class ExecutionClusterLabel extends Message<ExecutionClusterLabel> {
  /**
   * Label value to determine where the execution will be run
   *
   * @generated from field: string value = 1;
   */
  value: string;

  constructor(data?: PartialMessage<ExecutionClusterLabel>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.ExecutionClusterLabel";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecutionClusterLabel;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecutionClusterLabel;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecutionClusterLabel;

  static equals(a: ExecutionClusterLabel | PlainMessage<ExecutionClusterLabel> | undefined, b: ExecutionClusterLabel | PlainMessage<ExecutionClusterLabel> | undefined): boolean;
}

/**
 * This MatchableAttribute configures selecting alternate plugin implementations for a given task type.
 * In addition to an override implementation a selection of fallbacks can be provided or other modes
 * for handling cases where the desired plugin override is not enabled in a given Flyte deployment.
 *
 * @generated from message flyteidl.admin.PluginOverride
 */
export declare class PluginOverride extends Message<PluginOverride> {
  /**
   * A predefined yet extensible Task type identifier.
   *
   * @generated from field: string task_type = 1;
   */
  taskType: string;

  /**
   * A set of plugin ids which should handle tasks of this type instead of the default registered plugin. The list will be tried in order until a plugin is found with that id.
   *
   * @generated from field: repeated string plugin_id = 2;
   */
  pluginId: string[];

  /**
   * Defines the behavior when no plugin from the plugin_id list is not found.
   *
   * @generated from field: flyteidl.admin.PluginOverride.MissingPluginBehavior missing_plugin_behavior = 4;
   */
  missingPluginBehavior: PluginOverride_MissingPluginBehavior;

  constructor(data?: PartialMessage<PluginOverride>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.PluginOverride";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PluginOverride;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PluginOverride;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PluginOverride;

  static equals(a: PluginOverride | PlainMessage<PluginOverride> | undefined, b: PluginOverride | PlainMessage<PluginOverride> | undefined): boolean;
}

/**
 * @generated from enum flyteidl.admin.PluginOverride.MissingPluginBehavior
 */
export declare enum PluginOverride_MissingPluginBehavior {
  /**
   * By default, if this plugin is not enabled for a Flyte deployment then execution will fail.
   *
   * @generated from enum value: FAIL = 0;
   */
  FAIL = 0,

  /**
   * Uses the system-configured default implementation.
   *
   * @generated from enum value: USE_DEFAULT = 1;
   */
  USE_DEFAULT = 1,
}

/**
 * @generated from message flyteidl.admin.PluginOverrides
 */
export declare class PluginOverrides extends Message<PluginOverrides> {
  /**
   * @generated from field: repeated flyteidl.admin.PluginOverride overrides = 1;
   */
  overrides: PluginOverride[];

  constructor(data?: PartialMessage<PluginOverrides>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.PluginOverrides";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PluginOverrides;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PluginOverrides;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PluginOverrides;

  static equals(a: PluginOverrides | PlainMessage<PluginOverrides> | undefined, b: PluginOverrides | PlainMessage<PluginOverrides> | undefined): boolean;
}

/**
 * Adds defaults for customizable workflow-execution specifications and overrides.
 *
 * @generated from message flyteidl.admin.WorkflowExecutionConfig
 */
export declare class WorkflowExecutionConfig extends Message<WorkflowExecutionConfig> {
  /**
   * Can be used to control the number of parallel nodes to run within the workflow. This is useful to achieve fairness.
   *
   * @generated from field: int32 max_parallelism = 1;
   */
  maxParallelism: number;

  /**
   * Indicates security context permissions for executions triggered with this matchable attribute. 
   *
   * @generated from field: flyteidl.core.SecurityContext security_context = 2;
   */
  securityContext?: SecurityContext;

  /**
   * Encapsulates user settings pertaining to offloaded data (i.e. Blobs, Schema, query data, etc.).
   *
   * @generated from field: flyteidl.admin.RawOutputDataConfig raw_output_data_config = 3;
   */
  rawOutputDataConfig?: RawOutputDataConfig;

  /**
   * Custom labels to be applied to a triggered execution resource.
   *
   * @generated from field: flyteidl.admin.Labels labels = 4;
   */
  labels?: Labels;

  /**
   * Custom annotations to be applied to a triggered execution resource.
   *
   * @generated from field: flyteidl.admin.Annotations annotations = 5;
   */
  annotations?: Annotations;

  /**
   * Allows for the interruptible flag of a workflow to be overwritten for a single execution.
   * Omitting this field uses the workflow's value as a default.
   * As we need to distinguish between the field not being provided and its default value false, we have to use a wrapper
   * around the bool field.
   *
   * @generated from field: google.protobuf.BoolValue interruptible = 6;
   */
  interruptible?: boolean;

  /**
   * Allows for all cached values of a workflow and its tasks to be overwritten for a single execution.
   * If enabled, all calculations are performed even if cached results would be available, overwriting the stored
   * data once execution finishes successfully.
   *
   * @generated from field: bool overwrite_cache = 7;
   */
  overwriteCache: boolean;

  /**
   * Environment variables to be set for the execution.
   *
   * @generated from field: flyteidl.admin.Envs envs = 8;
   */
  envs?: Envs;

  constructor(data?: PartialMessage<WorkflowExecutionConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.WorkflowExecutionConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowExecutionConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowExecutionConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowExecutionConfig;

  static equals(a: WorkflowExecutionConfig | PlainMessage<WorkflowExecutionConfig> | undefined, b: WorkflowExecutionConfig | PlainMessage<WorkflowExecutionConfig> | undefined): boolean;
}

/**
 * Generic container for encapsulating all types of the above attributes messages.
 *
 * @generated from message flyteidl.admin.MatchingAttributes
 */
export declare class MatchingAttributes extends Message<MatchingAttributes> {
  /**
   * @generated from oneof flyteidl.admin.MatchingAttributes.target
   */
  target: {
    /**
     * @generated from field: flyteidl.admin.TaskResourceAttributes task_resource_attributes = 1;
     */
    value: TaskResourceAttributes;
    case: "taskResourceAttributes";
  } | {
    /**
     * @generated from field: flyteidl.admin.ClusterResourceAttributes cluster_resource_attributes = 2;
     */
    value: ClusterResourceAttributes;
    case: "clusterResourceAttributes";
  } | {
    /**
     * @generated from field: flyteidl.admin.ExecutionQueueAttributes execution_queue_attributes = 3;
     */
    value: ExecutionQueueAttributes;
    case: "executionQueueAttributes";
  } | {
    /**
     * @generated from field: flyteidl.admin.ExecutionClusterLabel execution_cluster_label = 4;
     */
    value: ExecutionClusterLabel;
    case: "executionClusterLabel";
  } | {
    /**
     * @generated from field: flyteidl.core.QualityOfService quality_of_service = 5;
     */
    value: QualityOfService;
    case: "qualityOfService";
  } | {
    /**
     * @generated from field: flyteidl.admin.PluginOverrides plugin_overrides = 6;
     */
    value: PluginOverrides;
    case: "pluginOverrides";
  } | {
    /**
     * @generated from field: flyteidl.admin.WorkflowExecutionConfig workflow_execution_config = 7;
     */
    value: WorkflowExecutionConfig;
    case: "workflowExecutionConfig";
  } | {
    /**
     * @generated from field: flyteidl.admin.ClusterAssignment cluster_assignment = 8;
     */
    value: ClusterAssignment;
    case: "clusterAssignment";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<MatchingAttributes>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.MatchingAttributes";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MatchingAttributes;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MatchingAttributes;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MatchingAttributes;

  static equals(a: MatchingAttributes | PlainMessage<MatchingAttributes> | undefined, b: MatchingAttributes | PlainMessage<MatchingAttributes> | undefined): boolean;
}

/**
 * Represents a custom set of attributes applied for either a domain; a domain and project; or
 * domain, project and workflow name.
 * These are used to override system level defaults for kubernetes cluster resource management,
 * default execution values, and more all across different levels of specificity.
 *
 * @generated from message flyteidl.admin.MatchableAttributesConfiguration
 */
export declare class MatchableAttributesConfiguration extends Message<MatchableAttributesConfiguration> {
  /**
   * @generated from field: flyteidl.admin.MatchingAttributes attributes = 1;
   */
  attributes?: MatchingAttributes;

  /**
   * @generated from field: string domain = 2;
   */
  domain: string;

  /**
   * @generated from field: string project = 3;
   */
  project: string;

  /**
   * @generated from field: string workflow = 4;
   */
  workflow: string;

  /**
   * @generated from field: string launch_plan = 5;
   */
  launchPlan: string;

  constructor(data?: PartialMessage<MatchableAttributesConfiguration>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.MatchableAttributesConfiguration";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MatchableAttributesConfiguration;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MatchableAttributesConfiguration;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MatchableAttributesConfiguration;

  static equals(a: MatchableAttributesConfiguration | PlainMessage<MatchableAttributesConfiguration> | undefined, b: MatchableAttributesConfiguration | PlainMessage<MatchableAttributesConfiguration> | undefined): boolean;
}

/**
 * Request all matching resource attributes for a resource type.
 * See :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for more details
 *
 * @generated from message flyteidl.admin.ListMatchableAttributesRequest
 */
export declare class ListMatchableAttributesRequest extends Message<ListMatchableAttributesRequest> {
  /**
   * +required
   *
   * @generated from field: flyteidl.admin.MatchableResource resource_type = 1;
   */
  resourceType: MatchableResource;

  constructor(data?: PartialMessage<ListMatchableAttributesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.ListMatchableAttributesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMatchableAttributesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMatchableAttributesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMatchableAttributesRequest;

  static equals(a: ListMatchableAttributesRequest | PlainMessage<ListMatchableAttributesRequest> | undefined, b: ListMatchableAttributesRequest | PlainMessage<ListMatchableAttributesRequest> | undefined): boolean;
}

/**
 * Response for a request for all matching resource attributes for a resource type.
 * See :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for more details
 *
 * @generated from message flyteidl.admin.ListMatchableAttributesResponse
 */
export declare class ListMatchableAttributesResponse extends Message<ListMatchableAttributesResponse> {
  /**
   * @generated from field: repeated flyteidl.admin.MatchableAttributesConfiguration configurations = 1;
   */
  configurations: MatchableAttributesConfiguration[];

  constructor(data?: PartialMessage<ListMatchableAttributesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.ListMatchableAttributesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMatchableAttributesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMatchableAttributesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMatchableAttributesResponse;

  static equals(a: ListMatchableAttributesResponse | PlainMessage<ListMatchableAttributesResponse> | undefined, b: ListMatchableAttributesResponse | PlainMessage<ListMatchableAttributesResponse> | undefined): boolean;
}

