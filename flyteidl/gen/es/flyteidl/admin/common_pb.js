// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/admin/common.proto (package flyteidl.admin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { Identifier, ResourceType } from "../core/identifier_pb.js";
import { WorkflowExecution_Phase } from "../core/execution_pb.js";
import { KeyValuePair } from "../core/literals_pb.js";

/**
 * The status of the named entity is used to control its visibility in the UI.
 *
 * @generated from enum flyteidl.admin.NamedEntityState
 */
export const NamedEntityState = proto3.makeEnum(
  "flyteidl.admin.NamedEntityState",
  [
    {no: 0, name: "NAMED_ENTITY_ACTIVE"},
    {no: 1, name: "NAMED_ENTITY_ARCHIVED"},
    {no: 2, name: "SYSTEM_GENERATED"},
  ],
);

/**
 * Encapsulation of fields that identifies a Flyte resource.
 * A Flyte resource can be a task, workflow or launch plan.
 * A resource can internally have multiple versions and is uniquely identified
 * by project, domain, and name.
 *
 * @generated from message flyteidl.admin.NamedEntityIdentifier
 */
export const NamedEntityIdentifier = proto3.makeMessageType(
  "flyteidl.admin.NamedEntityIdentifier",
  () => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Additional metadata around a named entity.
 *
 * @generated from message flyteidl.admin.NamedEntityMetadata
 */
export const NamedEntityMetadata = proto3.makeMessageType(
  "flyteidl.admin.NamedEntityMetadata",
  () => [
    { no: 1, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "enum", T: proto3.getEnumType(NamedEntityState) },
  ],
);

/**
 * Encapsulates information common to a NamedEntity, a Flyte resource such as a task,
 * workflow or launch plan. A NamedEntity is exclusively identified by its resource type
 * and identifier.
 *
 * @generated from message flyteidl.admin.NamedEntity
 */
export const NamedEntity = proto3.makeMessageType(
  "flyteidl.admin.NamedEntity",
  () => [
    { no: 1, name: "resource_type", kind: "enum", T: proto3.getEnumType(ResourceType) },
    { no: 2, name: "id", kind: "message", T: NamedEntityIdentifier },
    { no: 3, name: "metadata", kind: "message", T: NamedEntityMetadata },
  ],
);

/**
 * Specifies sort ordering in a list request.
 *
 * @generated from message flyteidl.admin.Sort
 */
export const Sort = proto3.makeMessageType(
  "flyteidl.admin.Sort",
  () => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "direction", kind: "enum", T: proto3.getEnumType(Sort_Direction) },
  ],
);

/**
 * @generated from enum flyteidl.admin.Sort.Direction
 */
export const Sort_Direction = proto3.makeEnum(
  "flyteidl.admin.Sort.Direction",
  [
    {no: 0, name: "DESCENDING"},
    {no: 1, name: "ASCENDING"},
  ],
);

/**
 * Represents a request structure to list NamedEntityIdentifiers.
 *
 * @generated from message flyteidl.admin.NamedEntityIdentifierListRequest
 */
export const NamedEntityIdentifierListRequest = proto3.makeMessageType(
  "flyteidl.admin.NamedEntityIdentifierListRequest",
  () => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "sort_by", kind: "message", T: Sort },
    { no: 6, name: "filters", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Represents a request structure to list NamedEntity objects
 *
 * @generated from message flyteidl.admin.NamedEntityListRequest
 */
export const NamedEntityListRequest = proto3.makeMessageType(
  "flyteidl.admin.NamedEntityListRequest",
  () => [
    { no: 1, name: "resource_type", kind: "enum", T: proto3.getEnumType(ResourceType) },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "sort_by", kind: "message", T: Sort },
    { no: 7, name: "filters", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Represents a list of NamedEntityIdentifiers.
 *
 * @generated from message flyteidl.admin.NamedEntityIdentifierList
 */
export const NamedEntityIdentifierList = proto3.makeMessageType(
  "flyteidl.admin.NamedEntityIdentifierList",
  () => [
    { no: 1, name: "entities", kind: "message", T: NamedEntityIdentifier, repeated: true },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Represents a list of NamedEntityIdentifiers.
 *
 * @generated from message flyteidl.admin.NamedEntityList
 */
export const NamedEntityList = proto3.makeMessageType(
  "flyteidl.admin.NamedEntityList",
  () => [
    { no: 1, name: "entities", kind: "message", T: NamedEntity, repeated: true },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * A request to retrieve the metadata associated with a NamedEntityIdentifier
 *
 * @generated from message flyteidl.admin.NamedEntityGetRequest
 */
export const NamedEntityGetRequest = proto3.makeMessageType(
  "flyteidl.admin.NamedEntityGetRequest",
  () => [
    { no: 1, name: "resource_type", kind: "enum", T: proto3.getEnumType(ResourceType) },
    { no: 2, name: "id", kind: "message", T: NamedEntityIdentifier },
  ],
);

/**
 * Request to set the referenced named entity state to the configured value.
 *
 * @generated from message flyteidl.admin.NamedEntityUpdateRequest
 */
export const NamedEntityUpdateRequest = proto3.makeMessageType(
  "flyteidl.admin.NamedEntityUpdateRequest",
  () => [
    { no: 1, name: "resource_type", kind: "enum", T: proto3.getEnumType(ResourceType) },
    { no: 2, name: "id", kind: "message", T: NamedEntityIdentifier },
    { no: 3, name: "metadata", kind: "message", T: NamedEntityMetadata },
  ],
);

/**
 * Purposefully empty, may be populated in the future.
 *
 * @generated from message flyteidl.admin.NamedEntityUpdateResponse
 */
export const NamedEntityUpdateResponse = proto3.makeMessageType(
  "flyteidl.admin.NamedEntityUpdateResponse",
  [],
);

/**
 * Shared request structure to fetch a single resource.
 * Resources include: Task, Workflow, LaunchPlan
 *
 * @generated from message flyteidl.admin.ObjectGetRequest
 */
export const ObjectGetRequest = proto3.makeMessageType(
  "flyteidl.admin.ObjectGetRequest",
  () => [
    { no: 1, name: "id", kind: "message", T: Identifier },
  ],
);

/**
 * Shared request structure to retrieve a list of resources.
 * Resources include: Task, Workflow, LaunchPlan
 *
 * @generated from message flyteidl.admin.ResourceListRequest
 */
export const ResourceListRequest = proto3.makeMessageType(
  "flyteidl.admin.ResourceListRequest",
  () => [
    { no: 1, name: "id", kind: "message", T: NamedEntityIdentifier },
    { no: 2, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "filters", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "sort_by", kind: "message", T: Sort },
  ],
);

/**
 * Defines an email notification specification.
 *
 * @generated from message flyteidl.admin.EmailNotification
 */
export const EmailNotification = proto3.makeMessageType(
  "flyteidl.admin.EmailNotification",
  () => [
    { no: 1, name: "recipients_email", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * Defines a pager duty notification specification.
 *
 * @generated from message flyteidl.admin.PagerDutyNotification
 */
export const PagerDutyNotification = proto3.makeMessageType(
  "flyteidl.admin.PagerDutyNotification",
  () => [
    { no: 1, name: "recipients_email", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * Defines a slack notification specification.
 *
 * @generated from message flyteidl.admin.SlackNotification
 */
export const SlackNotification = proto3.makeMessageType(
  "flyteidl.admin.SlackNotification",
  () => [
    { no: 1, name: "recipients_email", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * Represents a structure for notifications based on execution status.
 * The notification content is configured within flyte admin but can be templatized.
 * Future iterations could expose configuring notifications with custom content.
 *
 * @generated from message flyteidl.admin.Notification
 */
export const Notification = proto3.makeMessageType(
  "flyteidl.admin.Notification",
  () => [
    { no: 1, name: "phases", kind: "enum", T: proto3.getEnumType(WorkflowExecution_Phase), repeated: true },
    { no: 2, name: "email", kind: "message", T: EmailNotification, oneof: "type" },
    { no: 3, name: "pager_duty", kind: "message", T: PagerDutyNotification, oneof: "type" },
    { no: 4, name: "slack", kind: "message", T: SlackNotification, oneof: "type" },
  ],
);

/**
 * Represents a string url and associated metadata used throughout the platform.
 *
 * @generated from message flyteidl.admin.UrlBlob
 * @deprecated
 */
export const UrlBlob = proto3.makeMessageType(
  "flyteidl.admin.UrlBlob",
  () => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * Label values to be applied to an execution resource.
 * In the future a mode (e.g. OVERRIDE, APPEND, etc) can be defined
 * to specify how to merge labels defined at registration and execution time.
 *
 * @generated from message flyteidl.admin.Labels
 */
export const Labels = proto3.makeMessageType(
  "flyteidl.admin.Labels",
  () => [
    { no: 1, name: "values", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ],
);

/**
 * Annotation values to be applied to an execution resource.
 * In the future a mode (e.g. OVERRIDE, APPEND, etc) can be defined
 * to specify how to merge annotations defined at registration and execution time.
 *
 * @generated from message flyteidl.admin.Annotations
 */
export const Annotations = proto3.makeMessageType(
  "flyteidl.admin.Annotations",
  () => [
    { no: 1, name: "values", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ],
);

/**
 * Environment variable values to be applied to an execution resource.
 * In the future a mode (e.g. OVERRIDE, APPEND, etc) can be defined
 * to specify how to merge environment variables defined at registration and execution time.
 *
 * @generated from message flyteidl.admin.Envs
 */
export const Envs = proto3.makeMessageType(
  "flyteidl.admin.Envs",
  () => [
    { no: 1, name: "values", kind: "message", T: KeyValuePair, repeated: true },
  ],
);

/**
 * Defines permissions associated with executions created by this launch plan spec.
 * Use either of these roles when they have permissions required by your workflow execution.
 * Deprecated.
 *
 * @generated from message flyteidl.admin.AuthRole
 * @deprecated
 */
export const AuthRole = proto3.makeMessageType(
  "flyteidl.admin.AuthRole",
  () => [
    { no: 1, name: "assumable_iam_role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kubernetes_service_account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Encapsulates user settings pertaining to offloaded data (i.e. Blobs, Schema, query data, etc.).
 * See https://github.com/flyteorg/flyte/issues/211 for more background information.
 *
 * @generated from message flyteidl.admin.RawOutputDataConfig
 */
export const RawOutputDataConfig = proto3.makeMessageType(
  "flyteidl.admin.RawOutputDataConfig",
  () => [
    { no: 1, name: "output_location_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * These URLs are returned as part of node and task execution data requests.
 *
 * @generated from message flyteidl.admin.FlyteURLs
 */
export const FlyteURLs = proto3.makeMessageType(
  "flyteidl.admin.FlyteURLs",
  () => [
    { no: 1, name: "inputs", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "outputs", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "deck", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

