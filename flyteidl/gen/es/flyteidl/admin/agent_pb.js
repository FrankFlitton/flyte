// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/admin/agent.proto (package flyteidl.admin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { TaskExecutionIdentifier } from "../core/identifier_pb.js";
import { LiteralMap } from "../core/literals_pb.js";
import { TaskTemplate } from "../core/tasks_pb.js";

/**
 * The state of the execution is used to control its visibility in the UI/CLI.
 *
 * @generated from enum flyteidl.admin.State
 */
export const State = proto3.makeEnum(
  "flyteidl.admin.State",
  [
    {no: 0, name: "RETRYABLE_FAILURE"},
    {no: 1, name: "PERMANENT_FAILURE"},
    {no: 2, name: "PENDING"},
    {no: 3, name: "RUNNING"},
    {no: 4, name: "SUCCEEDED"},
  ],
);

/**
 * Represents a subset of runtime task execution metadata that are relevant to external plugins.
 *
 * @generated from message flyteidl.admin.TaskExecutionMetadata
 */
export const TaskExecutionMetadata = proto3.makeMessageType(
  "flyteidl.admin.TaskExecutionMetadata",
  () => [
    { no: 1, name: "task_execution_id", kind: "message", T: TaskExecutionIdentifier },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 4, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "k8s_service_account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "environment_variables", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ],
);

/**
 * Represents a request structure to create task.
 *
 * @generated from message flyteidl.admin.CreateTaskRequest
 */
export const CreateTaskRequest = proto3.makeMessageType(
  "flyteidl.admin.CreateTaskRequest",
  () => [
    { no: 1, name: "inputs", kind: "message", T: LiteralMap },
    { no: 2, name: "template", kind: "message", T: TaskTemplate },
    { no: 3, name: "output_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "task_execution_metadata", kind: "message", T: TaskExecutionMetadata },
  ],
);

/**
 * Represents a create response structure.
 *
 * @generated from message flyteidl.admin.CreateTaskResponse
 */
export const CreateTaskResponse = proto3.makeMessageType(
  "flyteidl.admin.CreateTaskResponse",
  () => [
    { no: 1, name: "resource_meta", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * A message used to fetch a job resource from flyte agent server.
 *
 * @generated from message flyteidl.admin.GetTaskRequest
 */
export const GetTaskRequest = proto3.makeMessageType(
  "flyteidl.admin.GetTaskRequest",
  () => [
    { no: 1, name: "task_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resource_meta", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * Response to get an individual task resource.
 *
 * @generated from message flyteidl.admin.GetTaskResponse
 */
export const GetTaskResponse = proto3.makeMessageType(
  "flyteidl.admin.GetTaskResponse",
  () => [
    { no: 1, name: "resource", kind: "message", T: Resource },
  ],
);

/**
 * @generated from message flyteidl.admin.Resource
 */
export const Resource = proto3.makeMessageType(
  "flyteidl.admin.Resource",
  () => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(State) },
    { no: 2, name: "outputs", kind: "message", T: LiteralMap },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * A message used to delete a task.
 *
 * @generated from message flyteidl.admin.DeleteTaskRequest
 */
export const DeleteTaskRequest = proto3.makeMessageType(
  "flyteidl.admin.DeleteTaskRequest",
  () => [
    { no: 1, name: "task_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resource_meta", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * Response to delete a task.
 *
 * @generated from message flyteidl.admin.DeleteTaskResponse
 */
export const DeleteTaskResponse = proto3.makeMessageType(
  "flyteidl.admin.DeleteTaskResponse",
  [],
);

