// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/admin/project.proto (package flyteidl.admin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Labels, Sort } from "./common_pb.js";

/**
 * Namespace within a project commonly used to differentiate between different service instances.
 * e.g. "production", "development", etc.
 *
 * @generated from message flyteidl.admin.Domain
 */
export declare class Domain extends Message<Domain> {
  /**
   * Globally unique domain name.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Display name.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  constructor(data?: PartialMessage<Domain>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.Domain";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Domain;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Domain;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Domain;

  static equals(a: Domain | PlainMessage<Domain> | undefined, b: Domain | PlainMessage<Domain> | undefined): boolean;
}

/**
 * Top-level namespace used to classify different entities like workflows and executions.
 *
 * @generated from message flyteidl.admin.Project
 */
export declare class Project extends Message<Project> {
  /**
   * Globally unique project name.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Display name.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: repeated flyteidl.admin.Domain domains = 3;
   */
  domains: Domain[];

  /**
   * @generated from field: string description = 4;
   */
  description: string;

  /**
   * Leverage Labels from flyteidl.admin.common.proto to
   * tag projects with ownership information.
   *
   * @generated from field: flyteidl.admin.Labels labels = 5;
   */
  labels?: Labels;

  /**
   * @generated from field: flyteidl.admin.Project.ProjectState state = 6;
   */
  state: Project_ProjectState;

  constructor(data?: PartialMessage<Project>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.Project";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Project;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Project;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Project;

  static equals(a: Project | PlainMessage<Project> | undefined, b: Project | PlainMessage<Project> | undefined): boolean;
}

/**
 * The state of the project is used to control its visibility in the UI and validity.
 *
 * @generated from enum flyteidl.admin.Project.ProjectState
 */
export declare enum Project_ProjectState {
  /**
   * By default, all projects are considered active.
   *
   * @generated from enum value: ACTIVE = 0;
   */
  ACTIVE = 0,

  /**
   * Archived projects are no longer visible in the UI and no longer valid.
   *
   * @generated from enum value: ARCHIVED = 1;
   */
  ARCHIVED = 1,

  /**
   * System generated projects that aren't explicitly created or managed by a user.
   *
   * @generated from enum value: SYSTEM_GENERATED = 2;
   */
  SYSTEM_GENERATED = 2,
}

/**
 * Represents a list of projects.
 * See :ref:`ref_flyteidl.admin.Project` for more details
 *
 * @generated from message flyteidl.admin.Projects
 */
export declare class Projects extends Message<Projects> {
  /**
   * @generated from field: repeated flyteidl.admin.Project projects = 1;
   */
  projects: Project[];

  /**
   * In the case of multiple pages of results, the server-provided token can be used to fetch the next page
   * in a query. If there are no more results, this value will be empty.
   *
   * @generated from field: string token = 2;
   */
  token: string;

  constructor(data?: PartialMessage<Projects>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.Projects";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Projects;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Projects;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Projects;

  static equals(a: Projects | PlainMessage<Projects> | undefined, b: Projects | PlainMessage<Projects> | undefined): boolean;
}

/**
 * Request to retrieve a list of projects matching specified filters. 
 * See :ref:`ref_flyteidl.admin.Project` for more details
 *
 * @generated from message flyteidl.admin.ProjectListRequest
 */
export declare class ProjectListRequest extends Message<ProjectListRequest> {
  /**
   * Indicates the number of projects to be returned.
   * +required
   *
   * @generated from field: uint32 limit = 1;
   */
  limit: number;

  /**
   * In the case of multiple pages of results, this server-provided token can be used to fetch the next page
   * in a query.
   * +optional
   *
   * @generated from field: string token = 2;
   */
  token: string;

  /**
   * Indicates a list of filters passed as string.
   * More info on constructing filters : <Link>
   * +optional
   *
   * @generated from field: string filters = 3;
   */
  filters: string;

  /**
   * Sort ordering.
   * +optional
   *
   * @generated from field: flyteidl.admin.Sort sort_by = 4;
   */
  sortBy?: Sort;

  constructor(data?: PartialMessage<ProjectListRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.ProjectListRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectListRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectListRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectListRequest;

  static equals(a: ProjectListRequest | PlainMessage<ProjectListRequest> | undefined, b: ProjectListRequest | PlainMessage<ProjectListRequest> | undefined): boolean;
}

/**
 * Adds a new user-project within the Flyte deployment.
 * See :ref:`ref_flyteidl.admin.Project` for more details
 *
 * @generated from message flyteidl.admin.ProjectRegisterRequest
 */
export declare class ProjectRegisterRequest extends Message<ProjectRegisterRequest> {
  /**
   * +required
   *
   * @generated from field: flyteidl.admin.Project project = 1;
   */
  project?: Project;

  constructor(data?: PartialMessage<ProjectRegisterRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.ProjectRegisterRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectRegisterRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectRegisterRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectRegisterRequest;

  static equals(a: ProjectRegisterRequest | PlainMessage<ProjectRegisterRequest> | undefined, b: ProjectRegisterRequest | PlainMessage<ProjectRegisterRequest> | undefined): boolean;
}

/**
 * Purposefully empty, may be updated in the future.
 *
 * @generated from message flyteidl.admin.ProjectRegisterResponse
 */
export declare class ProjectRegisterResponse extends Message<ProjectRegisterResponse> {
  constructor(data?: PartialMessage<ProjectRegisterResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.ProjectRegisterResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectRegisterResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectRegisterResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectRegisterResponse;

  static equals(a: ProjectRegisterResponse | PlainMessage<ProjectRegisterResponse> | undefined, b: ProjectRegisterResponse | PlainMessage<ProjectRegisterResponse> | undefined): boolean;
}

/**
 * Purposefully empty, may be updated in the future.
 *
 * @generated from message flyteidl.admin.ProjectUpdateResponse
 */
export declare class ProjectUpdateResponse extends Message<ProjectUpdateResponse> {
  constructor(data?: PartialMessage<ProjectUpdateResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.ProjectUpdateResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectUpdateResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectUpdateResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectUpdateResponse;

  static equals(a: ProjectUpdateResponse | PlainMessage<ProjectUpdateResponse> | undefined, b: ProjectUpdateResponse | PlainMessage<ProjectUpdateResponse> | undefined): boolean;
}

