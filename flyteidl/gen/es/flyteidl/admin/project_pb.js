// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/admin/project.proto (package flyteidl.admin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { Labels, Sort } from "./common_pb.js";

/**
 * Namespace within a project commonly used to differentiate between different service instances.
 * e.g. "production", "development", etc.
 *
 * @generated from message flyteidl.admin.Domain
 */
export const Domain = proto3.makeMessageType(
  "flyteidl.admin.Domain",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Top-level namespace used to classify different entities like workflows and executions.
 *
 * @generated from message flyteidl.admin.Project
 */
export const Project = proto3.makeMessageType(
  "flyteidl.admin.Project",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "domains", kind: "message", T: Domain, repeated: true },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "labels", kind: "message", T: Labels },
    { no: 6, name: "state", kind: "enum", T: proto3.getEnumType(Project_ProjectState) },
  ],
);

/**
 * The state of the project is used to control its visibility in the UI and validity.
 *
 * @generated from enum flyteidl.admin.Project.ProjectState
 */
export const Project_ProjectState = proto3.makeEnum(
  "flyteidl.admin.Project.ProjectState",
  [
    {no: 0, name: "ACTIVE"},
    {no: 1, name: "ARCHIVED"},
    {no: 2, name: "SYSTEM_GENERATED"},
  ],
);

/**
 * Represents a list of projects.
 * See :ref:`ref_flyteidl.admin.Project` for more details
 *
 * @generated from message flyteidl.admin.Projects
 */
export const Projects = proto3.makeMessageType(
  "flyteidl.admin.Projects",
  () => [
    { no: 1, name: "projects", kind: "message", T: Project, repeated: true },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Request to retrieve a list of projects matching specified filters. 
 * See :ref:`ref_flyteidl.admin.Project` for more details
 *
 * @generated from message flyteidl.admin.ProjectListRequest
 */
export const ProjectListRequest = proto3.makeMessageType(
  "flyteidl.admin.ProjectListRequest",
  () => [
    { no: 1, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "filters", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "sort_by", kind: "message", T: Sort },
  ],
);

/**
 * Adds a new user-project within the Flyte deployment.
 * See :ref:`ref_flyteidl.admin.Project` for more details
 *
 * @generated from message flyteidl.admin.ProjectRegisterRequest
 */
export const ProjectRegisterRequest = proto3.makeMessageType(
  "flyteidl.admin.ProjectRegisterRequest",
  () => [
    { no: 1, name: "project", kind: "message", T: Project },
  ],
);

/**
 * Purposefully empty, may be updated in the future.
 *
 * @generated from message flyteidl.admin.ProjectRegisterResponse
 */
export const ProjectRegisterResponse = proto3.makeMessageType(
  "flyteidl.admin.ProjectRegisterResponse",
  [],
);

/**
 * Purposefully empty, may be updated in the future.
 *
 * @generated from message flyteidl.admin.ProjectUpdateResponse
 */
export const ProjectUpdateResponse = proto3.makeMessageType(
  "flyteidl.admin.ProjectUpdateResponse",
  [],
);

