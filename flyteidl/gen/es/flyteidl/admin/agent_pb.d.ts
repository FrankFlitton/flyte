// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/admin/agent.proto (package flyteidl.admin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { TaskExecutionIdentifier } from "../core/identifier_pb.js";
import type { LiteralMap } from "../core/literals_pb.js";
import type { TaskTemplate } from "../core/tasks_pb.js";

/**
 * The state of the execution is used to control its visibility in the UI/CLI.
 *
 * @generated from enum flyteidl.admin.State
 */
export declare enum State {
  /**
   * @generated from enum value: RETRYABLE_FAILURE = 0;
   */
  RETRYABLE_FAILURE = 0,

  /**
   * @generated from enum value: PERMANENT_FAILURE = 1;
   */
  PERMANENT_FAILURE = 1,

  /**
   * @generated from enum value: PENDING = 2;
   */
  PENDING = 2,

  /**
   * @generated from enum value: RUNNING = 3;
   */
  RUNNING = 3,

  /**
   * @generated from enum value: SUCCEEDED = 4;
   */
  SUCCEEDED = 4,
}

/**
 * Represents a subset of runtime task execution metadata that are relevant to external plugins.
 *
 * @generated from message flyteidl.admin.TaskExecutionMetadata
 */
export declare class TaskExecutionMetadata extends Message<TaskExecutionMetadata> {
  /**
   * ID of the task execution
   *
   * @generated from field: flyteidl.core.TaskExecutionIdentifier task_execution_id = 1;
   */
  taskExecutionId?: TaskExecutionIdentifier;

  /**
   * k8s namespace where the task is executed in
   *
   * @generated from field: string namespace = 2;
   */
  namespace: string;

  /**
   * Labels attached to the task execution
   *
   * @generated from field: map<string, string> labels = 3;
   */
  labels: { [key: string]: string };

  /**
   * Annotations attached to the task execution
   *
   * @generated from field: map<string, string> annotations = 4;
   */
  annotations: { [key: string]: string };

  /**
   * k8s service account associated with the task execution
   *
   * @generated from field: string k8s_service_account = 5;
   */
  k8sServiceAccount: string;

  /**
   * Environment variables attached to the task execution
   *
   * @generated from field: map<string, string> environment_variables = 6;
   */
  environmentVariables: { [key: string]: string };

  constructor(data?: PartialMessage<TaskExecutionMetadata>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.TaskExecutionMetadata";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskExecutionMetadata;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskExecutionMetadata;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskExecutionMetadata;

  static equals(a: TaskExecutionMetadata | PlainMessage<TaskExecutionMetadata> | undefined, b: TaskExecutionMetadata | PlainMessage<TaskExecutionMetadata> | undefined): boolean;
}

/**
 * Represents a request structure to create task.
 *
 * @generated from message flyteidl.admin.CreateTaskRequest
 */
export declare class CreateTaskRequest extends Message<CreateTaskRequest> {
  /**
   * The inputs required to start the execution. All required inputs must be
   * included in this map. If not required and not provided, defaults apply.
   * +optional
   *
   * @generated from field: flyteidl.core.LiteralMap inputs = 1;
   */
  inputs?: LiteralMap;

  /**
   * Template of the task that encapsulates all the metadata of the task.
   *
   * @generated from field: flyteidl.core.TaskTemplate template = 2;
   */
  template?: TaskTemplate;

  /**
   * Prefix for where task output data will be written. (e.g. s3://my-bucket/randomstring)
   *
   * @generated from field: string output_prefix = 3;
   */
  outputPrefix: string;

  /**
   * subset of runtime task execution metadata.
   *
   * @generated from field: flyteidl.admin.TaskExecutionMetadata task_execution_metadata = 4;
   */
  taskExecutionMetadata?: TaskExecutionMetadata;

  constructor(data?: PartialMessage<CreateTaskRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.CreateTaskRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTaskRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTaskRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTaskRequest;

  static equals(a: CreateTaskRequest | PlainMessage<CreateTaskRequest> | undefined, b: CreateTaskRequest | PlainMessage<CreateTaskRequest> | undefined): boolean;
}

/**
 * Represents a create response structure.
 *
 * @generated from message flyteidl.admin.CreateTaskResponse
 */
export declare class CreateTaskResponse extends Message<CreateTaskResponse> {
  /**
   * Metadata is created by the agent. It could be a string (jobId) or a dict (more complex metadata).
   *
   * @generated from field: bytes resource_meta = 1;
   */
  resourceMeta: Uint8Array;

  constructor(data?: PartialMessage<CreateTaskResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.CreateTaskResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTaskResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTaskResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTaskResponse;

  static equals(a: CreateTaskResponse | PlainMessage<CreateTaskResponse> | undefined, b: CreateTaskResponse | PlainMessage<CreateTaskResponse> | undefined): boolean;
}

/**
 * A message used to fetch a job resource from flyte agent server.
 *
 * @generated from message flyteidl.admin.GetTaskRequest
 */
export declare class GetTaskRequest extends Message<GetTaskRequest> {
  /**
   * A predefined yet extensible Task type identifier.
   *
   * @generated from field: string task_type = 1;
   */
  taskType: string;

  /**
   * Metadata about the resource to be pass to the agent.
   *
   * @generated from field: bytes resource_meta = 2;
   */
  resourceMeta: Uint8Array;

  constructor(data?: PartialMessage<GetTaskRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.GetTaskRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTaskRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTaskRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTaskRequest;

  static equals(a: GetTaskRequest | PlainMessage<GetTaskRequest> | undefined, b: GetTaskRequest | PlainMessage<GetTaskRequest> | undefined): boolean;
}

/**
 * Response to get an individual task resource.
 *
 * @generated from message flyteidl.admin.GetTaskResponse
 */
export declare class GetTaskResponse extends Message<GetTaskResponse> {
  /**
   * @generated from field: flyteidl.admin.Resource resource = 1;
   */
  resource?: Resource;

  constructor(data?: PartialMessage<GetTaskResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.GetTaskResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTaskResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTaskResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTaskResponse;

  static equals(a: GetTaskResponse | PlainMessage<GetTaskResponse> | undefined, b: GetTaskResponse | PlainMessage<GetTaskResponse> | undefined): boolean;
}

/**
 * @generated from message flyteidl.admin.Resource
 */
export declare class Resource extends Message<Resource> {
  /**
   * The state of the execution is used to control its visibility in the UI/CLI.
   *
   * @generated from field: flyteidl.admin.State state = 1;
   */
  state: State;

  /**
   * The outputs of the execution. It's typically used by sql task. Agent service will create a
   * Structured dataset pointing to the query result table.
   * +optional
   *
   * @generated from field: flyteidl.core.LiteralMap outputs = 2;
   */
  outputs?: LiteralMap;

  /**
   * A descriptive message for the current state. e.g. waiting for cluster.
   *
   * @generated from field: string message = 3;
   */
  message: string;

  constructor(data?: PartialMessage<Resource>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.Resource";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Resource;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Resource;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Resource;

  static equals(a: Resource | PlainMessage<Resource> | undefined, b: Resource | PlainMessage<Resource> | undefined): boolean;
}

/**
 * A message used to delete a task.
 *
 * @generated from message flyteidl.admin.DeleteTaskRequest
 */
export declare class DeleteTaskRequest extends Message<DeleteTaskRequest> {
  /**
   * A predefined yet extensible Task type identifier.
   *
   * @generated from field: string task_type = 1;
   */
  taskType: string;

  /**
   * Metadata about the resource to be pass to the agent.
   *
   * @generated from field: bytes resource_meta = 2;
   */
  resourceMeta: Uint8Array;

  constructor(data?: PartialMessage<DeleteTaskRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.DeleteTaskRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTaskRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTaskRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTaskRequest;

  static equals(a: DeleteTaskRequest | PlainMessage<DeleteTaskRequest> | undefined, b: DeleteTaskRequest | PlainMessage<DeleteTaskRequest> | undefined): boolean;
}

/**
 * Response to delete a task.
 *
 * @generated from message flyteidl.admin.DeleteTaskResponse
 */
export declare class DeleteTaskResponse extends Message<DeleteTaskResponse> {
  constructor(data?: PartialMessage<DeleteTaskResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.DeleteTaskResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTaskResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTaskResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTaskResponse;

  static equals(a: DeleteTaskResponse | PlainMessage<DeleteTaskResponse> | undefined, b: DeleteTaskResponse | PlainMessage<DeleteTaskResponse> | undefined): boolean;
}

