// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/admin/signal.proto (package flyteidl.admin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { SignalIdentifier, WorkflowExecutionIdentifier } from "../core/identifier_pb.js";
import { LiteralType } from "../core/types_pb.js";
import { Sort } from "./common_pb.js";
import { Literal } from "../core/literals_pb.js";

/**
 * SignalGetOrCreateRequest represents a request structure to retrieve or create a signal.
 * See :ref:`ref_flyteidl.admin.Signal` for more details
 *
 * @generated from message flyteidl.admin.SignalGetOrCreateRequest
 */
export const SignalGetOrCreateRequest = proto3.makeMessageType(
  "flyteidl.admin.SignalGetOrCreateRequest",
  () => [
    { no: 1, name: "id", kind: "message", T: SignalIdentifier },
    { no: 2, name: "type", kind: "message", T: LiteralType },
  ],
);

/**
 * SignalListRequest represents a request structure to retrieve a collection of signals.
 * See :ref:`ref_flyteidl.admin.Signal` for more details
 *
 * @generated from message flyteidl.admin.SignalListRequest
 */
export const SignalListRequest = proto3.makeMessageType(
  "flyteidl.admin.SignalListRequest",
  () => [
    { no: 1, name: "workflow_execution_id", kind: "message", T: WorkflowExecutionIdentifier },
    { no: 2, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "filters", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "sort_by", kind: "message", T: Sort },
  ],
);

/**
 * SignalList represents collection of signals along with the token of the last result.
 * See :ref:`ref_flyteidl.admin.Signal` for more details
 *
 * @generated from message flyteidl.admin.SignalList
 */
export const SignalList = proto3.makeMessageType(
  "flyteidl.admin.SignalList",
  () => [
    { no: 1, name: "signals", kind: "message", T: Signal, repeated: true },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * SignalSetRequest represents a request structure to set the value on a signal. Setting a signal
 * effetively satisfies the signal condition within a Flyte workflow.
 * See :ref:`ref_flyteidl.admin.Signal` for more details
 *
 * @generated from message flyteidl.admin.SignalSetRequest
 */
export const SignalSetRequest = proto3.makeMessageType(
  "flyteidl.admin.SignalSetRequest",
  () => [
    { no: 1, name: "id", kind: "message", T: SignalIdentifier },
    { no: 2, name: "value", kind: "message", T: Literal },
  ],
);

/**
 * SignalSetResponse represents a response structure if signal setting succeeds.
 *
 * Purposefully empty, may be populated in the future.
 *
 * @generated from message flyteidl.admin.SignalSetResponse
 */
export const SignalSetResponse = proto3.makeMessageType(
  "flyteidl.admin.SignalSetResponse",
  [],
);

/**
 * Signal encapsulates a unique identifier, associated metadata, and a value for a single Flyte
 * signal. Signals may exist either without a set value (representing a signal request) or with a
 * populated value (indicating the signal has been given).
 *
 * @generated from message flyteidl.admin.Signal
 */
export const Signal = proto3.makeMessageType(
  "flyteidl.admin.Signal",
  () => [
    { no: 1, name: "id", kind: "message", T: SignalIdentifier },
    { no: 2, name: "type", kind: "message", T: LiteralType },
    { no: 3, name: "value", kind: "message", T: Literal },
  ],
);

