// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/admin/common.proto (package flyteidl.admin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Identifier, ResourceType } from "../core/identifier_pb.js";
import type { WorkflowExecution_Phase } from "../core/execution_pb.js";
import type { KeyValuePair } from "../core/literals_pb.js";

/**
 * The status of the named entity is used to control its visibility in the UI.
 *
 * @generated from enum flyteidl.admin.NamedEntityState
 */
export declare enum NamedEntityState {
  /**
   * By default, all named entities are considered active and under development.
   *
   * @generated from enum value: NAMED_ENTITY_ACTIVE = 0;
   */
  NAMED_ENTITY_ACTIVE = 0,

  /**
   * Archived named entities are no longer visible in the UI.
   *
   * @generated from enum value: NAMED_ENTITY_ARCHIVED = 1;
   */
  NAMED_ENTITY_ARCHIVED = 1,

  /**
   * System generated entities that aren't explicitly created or managed by a user.
   *
   * @generated from enum value: SYSTEM_GENERATED = 2;
   */
  SYSTEM_GENERATED = 2,
}

/**
 * Encapsulation of fields that identifies a Flyte resource.
 * A Flyte resource can be a task, workflow or launch plan.
 * A resource can internally have multiple versions and is uniquely identified
 * by project, domain, and name.
 *
 * @generated from message flyteidl.admin.NamedEntityIdentifier
 */
export declare class NamedEntityIdentifier extends Message<NamedEntityIdentifier> {
  /**
   * Name of the project the resource belongs to.
   *
   * @generated from field: string project = 1;
   */
  project: string;

  /**
   * Name of the domain the resource belongs to.
   * A domain can be considered as a subset within a specific project.
   *
   * @generated from field: string domain = 2;
   */
  domain: string;

  /**
   * User provided value for the resource.
   * The combination of project + domain + name uniquely identifies the resource.
   * +optional - in certain contexts - like 'List API', 'Launch plans'
   *
   * @generated from field: string name = 3;
   */
  name: string;

  constructor(data?: PartialMessage<NamedEntityIdentifier>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.NamedEntityIdentifier";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedEntityIdentifier;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedEntityIdentifier;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedEntityIdentifier;

  static equals(a: NamedEntityIdentifier | PlainMessage<NamedEntityIdentifier> | undefined, b: NamedEntityIdentifier | PlainMessage<NamedEntityIdentifier> | undefined): boolean;
}

/**
 * Additional metadata around a named entity.
 *
 * @generated from message flyteidl.admin.NamedEntityMetadata
 */
export declare class NamedEntityMetadata extends Message<NamedEntityMetadata> {
  /**
   * Common description across all versions of the entity
   * +optional
   *
   * @generated from field: string description = 1;
   */
  description: string;

  /**
   * Shared state across all version of the entity
   * At this point in time, only workflow entities can have their state archived.
   *
   * @generated from field: flyteidl.admin.NamedEntityState state = 2;
   */
  state: NamedEntityState;

  constructor(data?: PartialMessage<NamedEntityMetadata>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.NamedEntityMetadata";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedEntityMetadata;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedEntityMetadata;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedEntityMetadata;

  static equals(a: NamedEntityMetadata | PlainMessage<NamedEntityMetadata> | undefined, b: NamedEntityMetadata | PlainMessage<NamedEntityMetadata> | undefined): boolean;
}

/**
 * Encapsulates information common to a NamedEntity, a Flyte resource such as a task,
 * workflow or launch plan. A NamedEntity is exclusively identified by its resource type
 * and identifier.
 *
 * @generated from message flyteidl.admin.NamedEntity
 */
export declare class NamedEntity extends Message<NamedEntity> {
  /**
   * Resource type of the named entity. One of Task, Workflow or LaunchPlan.
   *
   * @generated from field: flyteidl.core.ResourceType resource_type = 1;
   */
  resourceType: ResourceType;

  /**
   * @generated from field: flyteidl.admin.NamedEntityIdentifier id = 2;
   */
  id?: NamedEntityIdentifier;

  /**
   * Additional metadata around a named entity.
   *
   * @generated from field: flyteidl.admin.NamedEntityMetadata metadata = 3;
   */
  metadata?: NamedEntityMetadata;

  constructor(data?: PartialMessage<NamedEntity>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.NamedEntity";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedEntity;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedEntity;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedEntity;

  static equals(a: NamedEntity | PlainMessage<NamedEntity> | undefined, b: NamedEntity | PlainMessage<NamedEntity> | undefined): boolean;
}

/**
 * Specifies sort ordering in a list request.
 *
 * @generated from message flyteidl.admin.Sort
 */
export declare class Sort extends Message<Sort> {
  /**
   * Indicates an attribute to sort the response values.
   * +required
   *
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * Indicates the direction to apply sort key for response values.
   * +optional
   *
   * @generated from field: flyteidl.admin.Sort.Direction direction = 2;
   */
  direction: Sort_Direction;

  constructor(data?: PartialMessage<Sort>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.Sort";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Sort;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Sort;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Sort;

  static equals(a: Sort | PlainMessage<Sort> | undefined, b: Sort | PlainMessage<Sort> | undefined): boolean;
}

/**
 * @generated from enum flyteidl.admin.Sort.Direction
 */
export declare enum Sort_Direction {
  /**
   * By default, fields are sorted in descending order.
   *
   * @generated from enum value: DESCENDING = 0;
   */
  DESCENDING = 0,

  /**
   * @generated from enum value: ASCENDING = 1;
   */
  ASCENDING = 1,
}

/**
 * Represents a request structure to list NamedEntityIdentifiers.
 *
 * @generated from message flyteidl.admin.NamedEntityIdentifierListRequest
 */
export declare class NamedEntityIdentifierListRequest extends Message<NamedEntityIdentifierListRequest> {
  /**
   * Name of the project that contains the identifiers.
   * +required
   *
   * @generated from field: string project = 1;
   */
  project: string;

  /**
   * Name of the domain the identifiers belongs to within the project.
   * +required
   *
   * @generated from field: string domain = 2;
   */
  domain: string;

  /**
   * Indicates the number of resources to be returned.
   * +required
   *
   * @generated from field: uint32 limit = 3;
   */
  limit: number;

  /**
   * In the case of multiple pages of results, the server-provided token can be used to fetch the next page
   * in a query.
   * +optional
   *
   * @generated from field: string token = 4;
   */
  token: string;

  /**
   * Specifies how listed entities should be sorted in the response.
   * +optional
   *
   * @generated from field: flyteidl.admin.Sort sort_by = 5;
   */
  sortBy?: Sort;

  /**
   * Indicates a list of filters passed as string.
   * +optional
   *
   * @generated from field: string filters = 6;
   */
  filters: string;

  constructor(data?: PartialMessage<NamedEntityIdentifierListRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.NamedEntityIdentifierListRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedEntityIdentifierListRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedEntityIdentifierListRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedEntityIdentifierListRequest;

  static equals(a: NamedEntityIdentifierListRequest | PlainMessage<NamedEntityIdentifierListRequest> | undefined, b: NamedEntityIdentifierListRequest | PlainMessage<NamedEntityIdentifierListRequest> | undefined): boolean;
}

/**
 * Represents a request structure to list NamedEntity objects
 *
 * @generated from message flyteidl.admin.NamedEntityListRequest
 */
export declare class NamedEntityListRequest extends Message<NamedEntityListRequest> {
  /**
   * Resource type of the metadata to query. One of Task, Workflow or LaunchPlan.
   * +required
   *
   * @generated from field: flyteidl.core.ResourceType resource_type = 1;
   */
  resourceType: ResourceType;

  /**
   * Name of the project that contains the identifiers.
   * +required
   *
   * @generated from field: string project = 2;
   */
  project: string;

  /**
   * Name of the domain the identifiers belongs to within the project.
   *
   * @generated from field: string domain = 3;
   */
  domain: string;

  /**
   * Indicates the number of resources to be returned.
   *
   * @generated from field: uint32 limit = 4;
   */
  limit: number;

  /**
   * In the case of multiple pages of results, the server-provided token can be used to fetch the next page
   * in a query.
   * +optional
   *
   * @generated from field: string token = 5;
   */
  token: string;

  /**
   * Specifies how listed entities should be sorted in the response.
   * +optional
   *
   * @generated from field: flyteidl.admin.Sort sort_by = 6;
   */
  sortBy?: Sort;

  /**
   * Indicates a list of filters passed as string.
   * +optional
   *
   * @generated from field: string filters = 7;
   */
  filters: string;

  constructor(data?: PartialMessage<NamedEntityListRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.NamedEntityListRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedEntityListRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedEntityListRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedEntityListRequest;

  static equals(a: NamedEntityListRequest | PlainMessage<NamedEntityListRequest> | undefined, b: NamedEntityListRequest | PlainMessage<NamedEntityListRequest> | undefined): boolean;
}

/**
 * Represents a list of NamedEntityIdentifiers.
 *
 * @generated from message flyteidl.admin.NamedEntityIdentifierList
 */
export declare class NamedEntityIdentifierList extends Message<NamedEntityIdentifierList> {
  /**
   * A list of identifiers.
   *
   * @generated from field: repeated flyteidl.admin.NamedEntityIdentifier entities = 1;
   */
  entities: NamedEntityIdentifier[];

  /**
   * In the case of multiple pages of results, the server-provided token can be used to fetch the next page
   * in a query. If there are no more results, this value will be empty.
   *
   * @generated from field: string token = 2;
   */
  token: string;

  constructor(data?: PartialMessage<NamedEntityIdentifierList>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.NamedEntityIdentifierList";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedEntityIdentifierList;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedEntityIdentifierList;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedEntityIdentifierList;

  static equals(a: NamedEntityIdentifierList | PlainMessage<NamedEntityIdentifierList> | undefined, b: NamedEntityIdentifierList | PlainMessage<NamedEntityIdentifierList> | undefined): boolean;
}

/**
 * Represents a list of NamedEntityIdentifiers.
 *
 * @generated from message flyteidl.admin.NamedEntityList
 */
export declare class NamedEntityList extends Message<NamedEntityList> {
  /**
   * A list of NamedEntity objects
   *
   * @generated from field: repeated flyteidl.admin.NamedEntity entities = 1;
   */
  entities: NamedEntity[];

  /**
   * In the case of multiple pages of results, the server-provided token can be used to fetch the next page
   * in a query. If there are no more results, this value will be empty.
   *
   * @generated from field: string token = 2;
   */
  token: string;

  constructor(data?: PartialMessage<NamedEntityList>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.NamedEntityList";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedEntityList;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedEntityList;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedEntityList;

  static equals(a: NamedEntityList | PlainMessage<NamedEntityList> | undefined, b: NamedEntityList | PlainMessage<NamedEntityList> | undefined): boolean;
}

/**
 * A request to retrieve the metadata associated with a NamedEntityIdentifier
 *
 * @generated from message flyteidl.admin.NamedEntityGetRequest
 */
export declare class NamedEntityGetRequest extends Message<NamedEntityGetRequest> {
  /**
   * Resource type of the metadata to get. One of Task, Workflow or LaunchPlan.
   * +required
   *
   * @generated from field: flyteidl.core.ResourceType resource_type = 1;
   */
  resourceType: ResourceType;

  /**
   * The identifier for the named entity for which to fetch metadata.
   * +required
   *
   * @generated from field: flyteidl.admin.NamedEntityIdentifier id = 2;
   */
  id?: NamedEntityIdentifier;

  constructor(data?: PartialMessage<NamedEntityGetRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.NamedEntityGetRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedEntityGetRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedEntityGetRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedEntityGetRequest;

  static equals(a: NamedEntityGetRequest | PlainMessage<NamedEntityGetRequest> | undefined, b: NamedEntityGetRequest | PlainMessage<NamedEntityGetRequest> | undefined): boolean;
}

/**
 * Request to set the referenced named entity state to the configured value.
 *
 * @generated from message flyteidl.admin.NamedEntityUpdateRequest
 */
export declare class NamedEntityUpdateRequest extends Message<NamedEntityUpdateRequest> {
  /**
   * Resource type of the metadata to update
   * +required
   *
   * @generated from field: flyteidl.core.ResourceType resource_type = 1;
   */
  resourceType: ResourceType;

  /**
   * Identifier of the metadata to update
   * +required
   *
   * @generated from field: flyteidl.admin.NamedEntityIdentifier id = 2;
   */
  id?: NamedEntityIdentifier;

  /**
   * Metadata object to set as the new value
   * +required
   *
   * @generated from field: flyteidl.admin.NamedEntityMetadata metadata = 3;
   */
  metadata?: NamedEntityMetadata;

  constructor(data?: PartialMessage<NamedEntityUpdateRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.NamedEntityUpdateRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedEntityUpdateRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedEntityUpdateRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedEntityUpdateRequest;

  static equals(a: NamedEntityUpdateRequest | PlainMessage<NamedEntityUpdateRequest> | undefined, b: NamedEntityUpdateRequest | PlainMessage<NamedEntityUpdateRequest> | undefined): boolean;
}

/**
 * Purposefully empty, may be populated in the future.
 *
 * @generated from message flyteidl.admin.NamedEntityUpdateResponse
 */
export declare class NamedEntityUpdateResponse extends Message<NamedEntityUpdateResponse> {
  constructor(data?: PartialMessage<NamedEntityUpdateResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.NamedEntityUpdateResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedEntityUpdateResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedEntityUpdateResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedEntityUpdateResponse;

  static equals(a: NamedEntityUpdateResponse | PlainMessage<NamedEntityUpdateResponse> | undefined, b: NamedEntityUpdateResponse | PlainMessage<NamedEntityUpdateResponse> | undefined): boolean;
}

/**
 * Shared request structure to fetch a single resource.
 * Resources include: Task, Workflow, LaunchPlan
 *
 * @generated from message flyteidl.admin.ObjectGetRequest
 */
export declare class ObjectGetRequest extends Message<ObjectGetRequest> {
  /**
   * Indicates a unique version of resource.
   * +required
   *
   * @generated from field: flyteidl.core.Identifier id = 1;
   */
  id?: Identifier;

  constructor(data?: PartialMessage<ObjectGetRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.ObjectGetRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectGetRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectGetRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectGetRequest;

  static equals(a: ObjectGetRequest | PlainMessage<ObjectGetRequest> | undefined, b: ObjectGetRequest | PlainMessage<ObjectGetRequest> | undefined): boolean;
}

/**
 * Shared request structure to retrieve a list of resources.
 * Resources include: Task, Workflow, LaunchPlan
 *
 * @generated from message flyteidl.admin.ResourceListRequest
 */
export declare class ResourceListRequest extends Message<ResourceListRequest> {
  /**
   * id represents the unique identifier of the resource.
   * +required
   *
   * @generated from field: flyteidl.admin.NamedEntityIdentifier id = 1;
   */
  id?: NamedEntityIdentifier;

  /**
   * Indicates the number of resources to be returned.
   * +required
   *
   * @generated from field: uint32 limit = 2;
   */
  limit: number;

  /**
   * In the case of multiple pages of results, this server-provided token can be used to fetch the next page
   * in a query.
   * +optional
   *
   * @generated from field: string token = 3;
   */
  token: string;

  /**
   * Indicates a list of filters passed as string.
   * More info on constructing filters : <Link>
   * +optional
   *
   * @generated from field: string filters = 4;
   */
  filters: string;

  /**
   * Sort ordering.
   * +optional
   *
   * @generated from field: flyteidl.admin.Sort sort_by = 5;
   */
  sortBy?: Sort;

  constructor(data?: PartialMessage<ResourceListRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.ResourceListRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceListRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceListRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceListRequest;

  static equals(a: ResourceListRequest | PlainMessage<ResourceListRequest> | undefined, b: ResourceListRequest | PlainMessage<ResourceListRequest> | undefined): boolean;
}

/**
 * Defines an email notification specification.
 *
 * @generated from message flyteidl.admin.EmailNotification
 */
export declare class EmailNotification extends Message<EmailNotification> {
  /**
   * The list of email addresses recipients for this notification.
   * +required
   *
   * @generated from field: repeated string recipients_email = 1;
   */
  recipientsEmail: string[];

  constructor(data?: PartialMessage<EmailNotification>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.EmailNotification";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmailNotification;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmailNotification;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmailNotification;

  static equals(a: EmailNotification | PlainMessage<EmailNotification> | undefined, b: EmailNotification | PlainMessage<EmailNotification> | undefined): boolean;
}

/**
 * Defines a pager duty notification specification.
 *
 * @generated from message flyteidl.admin.PagerDutyNotification
 */
export declare class PagerDutyNotification extends Message<PagerDutyNotification> {
  /**
   * Currently, PagerDuty notifications leverage email to trigger a notification.
   * +required
   *
   * @generated from field: repeated string recipients_email = 1;
   */
  recipientsEmail: string[];

  constructor(data?: PartialMessage<PagerDutyNotification>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.PagerDutyNotification";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PagerDutyNotification;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PagerDutyNotification;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PagerDutyNotification;

  static equals(a: PagerDutyNotification | PlainMessage<PagerDutyNotification> | undefined, b: PagerDutyNotification | PlainMessage<PagerDutyNotification> | undefined): boolean;
}

/**
 * Defines a slack notification specification.
 *
 * @generated from message flyteidl.admin.SlackNotification
 */
export declare class SlackNotification extends Message<SlackNotification> {
  /**
   * Currently, Slack notifications leverage email to trigger a notification.
   * +required
   *
   * @generated from field: repeated string recipients_email = 1;
   */
  recipientsEmail: string[];

  constructor(data?: PartialMessage<SlackNotification>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.SlackNotification";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SlackNotification;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SlackNotification;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SlackNotification;

  static equals(a: SlackNotification | PlainMessage<SlackNotification> | undefined, b: SlackNotification | PlainMessage<SlackNotification> | undefined): boolean;
}

/**
 * Represents a structure for notifications based on execution status.
 * The notification content is configured within flyte admin but can be templatized.
 * Future iterations could expose configuring notifications with custom content.
 *
 * @generated from message flyteidl.admin.Notification
 */
export declare class Notification extends Message<Notification> {
  /**
   * A list of phases to which users can associate the notifications to.
   * +required
   *
   * @generated from field: repeated flyteidl.core.WorkflowExecution.Phase phases = 1;
   */
  phases: WorkflowExecution_Phase[];

  /**
   * The type of notification to trigger.
   * +required
   *
   * @generated from oneof flyteidl.admin.Notification.type
   */
  type: {
    /**
     * @generated from field: flyteidl.admin.EmailNotification email = 2;
     */
    value: EmailNotification;
    case: "email";
  } | {
    /**
     * @generated from field: flyteidl.admin.PagerDutyNotification pager_duty = 3;
     */
    value: PagerDutyNotification;
    case: "pagerDuty";
  } | {
    /**
     * @generated from field: flyteidl.admin.SlackNotification slack = 4;
     */
    value: SlackNotification;
    case: "slack";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<Notification>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.Notification";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Notification;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Notification;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Notification;

  static equals(a: Notification | PlainMessage<Notification> | undefined, b: Notification | PlainMessage<Notification> | undefined): boolean;
}

/**
 * Represents a string url and associated metadata used throughout the platform.
 *
 * @generated from message flyteidl.admin.UrlBlob
 * @deprecated
 */
export declare class UrlBlob extends Message<UrlBlob> {
  /**
   * Actual url value.
   *
   * @generated from field: string url = 1;
   */
  url: string;

  /**
   * Represents the size of the file accessible at the above url.
   *
   * @generated from field: int64 bytes = 2;
   */
  bytes: bigint;

  constructor(data?: PartialMessage<UrlBlob>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.UrlBlob";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UrlBlob;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UrlBlob;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UrlBlob;

  static equals(a: UrlBlob | PlainMessage<UrlBlob> | undefined, b: UrlBlob | PlainMessage<UrlBlob> | undefined): boolean;
}

/**
 * Label values to be applied to an execution resource.
 * In the future a mode (e.g. OVERRIDE, APPEND, etc) can be defined
 * to specify how to merge labels defined at registration and execution time.
 *
 * @generated from message flyteidl.admin.Labels
 */
export declare class Labels extends Message<Labels> {
  /**
   * Map of custom labels to be applied to the execution resource.
   *
   * @generated from field: map<string, string> values = 1;
   */
  values: { [key: string]: string };

  constructor(data?: PartialMessage<Labels>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.Labels";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Labels;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Labels;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Labels;

  static equals(a: Labels | PlainMessage<Labels> | undefined, b: Labels | PlainMessage<Labels> | undefined): boolean;
}

/**
 * Annotation values to be applied to an execution resource.
 * In the future a mode (e.g. OVERRIDE, APPEND, etc) can be defined
 * to specify how to merge annotations defined at registration and execution time.
 *
 * @generated from message flyteidl.admin.Annotations
 */
export declare class Annotations extends Message<Annotations> {
  /**
   * Map of custom annotations to be applied to the execution resource.
   *
   * @generated from field: map<string, string> values = 1;
   */
  values: { [key: string]: string };

  constructor(data?: PartialMessage<Annotations>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.Annotations";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Annotations;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Annotations;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Annotations;

  static equals(a: Annotations | PlainMessage<Annotations> | undefined, b: Annotations | PlainMessage<Annotations> | undefined): boolean;
}

/**
 * Environment variable values to be applied to an execution resource.
 * In the future a mode (e.g. OVERRIDE, APPEND, etc) can be defined
 * to specify how to merge environment variables defined at registration and execution time.
 *
 * @generated from message flyteidl.admin.Envs
 */
export declare class Envs extends Message<Envs> {
  /**
   * Map of custom environment variables to be applied to the execution resource.
   *
   * @generated from field: repeated flyteidl.core.KeyValuePair values = 1;
   */
  values: KeyValuePair[];

  constructor(data?: PartialMessage<Envs>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.Envs";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Envs;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Envs;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Envs;

  static equals(a: Envs | PlainMessage<Envs> | undefined, b: Envs | PlainMessage<Envs> | undefined): boolean;
}

/**
 * Defines permissions associated with executions created by this launch plan spec.
 * Use either of these roles when they have permissions required by your workflow execution.
 * Deprecated.
 *
 * @generated from message flyteidl.admin.AuthRole
 * @deprecated
 */
export declare class AuthRole extends Message<AuthRole> {
  /**
   * Defines an optional iam role which will be used for tasks run in executions created with this launch plan.
   *
   * @generated from field: string assumable_iam_role = 1;
   */
  assumableIamRole: string;

  /**
   * Defines an optional kubernetes service account which will be used for tasks run in executions created with this launch plan.
   *
   * @generated from field: string kubernetes_service_account = 2;
   */
  kubernetesServiceAccount: string;

  constructor(data?: PartialMessage<AuthRole>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.AuthRole";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthRole;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthRole;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthRole;

  static equals(a: AuthRole | PlainMessage<AuthRole> | undefined, b: AuthRole | PlainMessage<AuthRole> | undefined): boolean;
}

/**
 * Encapsulates user settings pertaining to offloaded data (i.e. Blobs, Schema, query data, etc.).
 * See https://github.com/flyteorg/flyte/issues/211 for more background information.
 *
 * @generated from message flyteidl.admin.RawOutputDataConfig
 */
export declare class RawOutputDataConfig extends Message<RawOutputDataConfig> {
  /**
   * Prefix for where offloaded data from user workflows will be written
   * e.g. s3://bucket/key or s3://bucket/
   *
   * @generated from field: string output_location_prefix = 1;
   */
  outputLocationPrefix: string;

  constructor(data?: PartialMessage<RawOutputDataConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.RawOutputDataConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RawOutputDataConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RawOutputDataConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RawOutputDataConfig;

  static equals(a: RawOutputDataConfig | PlainMessage<RawOutputDataConfig> | undefined, b: RawOutputDataConfig | PlainMessage<RawOutputDataConfig> | undefined): boolean;
}

/**
 * These URLs are returned as part of node and task execution data requests.
 *
 * @generated from message flyteidl.admin.FlyteURLs
 */
export declare class FlyteURLs extends Message<FlyteURLs> {
  /**
   * @generated from field: string inputs = 1;
   */
  inputs: string;

  /**
   * @generated from field: string outputs = 2;
   */
  outputs: string;

  /**
   * @generated from field: string deck = 3;
   */
  deck: string;

  constructor(data?: PartialMessage<FlyteURLs>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.FlyteURLs";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlyteURLs;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlyteURLs;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlyteURLs;

  static equals(a: FlyteURLs | PlainMessage<FlyteURLs> | undefined, b: FlyteURLs | PlainMessage<FlyteURLs> | undefined): boolean;
}

