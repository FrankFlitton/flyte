// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/admin/description_entity.proto (package flyteidl.admin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Identifier, ResourceType } from "../core/identifier_pb.js";
import type { NamedEntityIdentifier, Sort } from "./common_pb.js";

/**
 * The format of the long description
 *
 * @generated from enum flyteidl.admin.DescriptionFormat
 */
export declare enum DescriptionFormat {
  /**
   * @generated from enum value: DESCRIPTION_FORMAT_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: DESCRIPTION_FORMAT_MARKDOWN = 1;
   */
  MARKDOWN = 1,

  /**
   * @generated from enum value: DESCRIPTION_FORMAT_HTML = 2;
   */
  HTML = 2,

  /**
   * python default documentation - comments is rst
   *
   * @generated from enum value: DESCRIPTION_FORMAT_RST = 3;
   */
  RST = 3,
}

/**
 * DescriptionEntity contains detailed description for the task/workflow.
 * Documentation could provide insight into the algorithms, business use case, etc.
 *
 * @generated from message flyteidl.admin.DescriptionEntity
 */
export declare class DescriptionEntity extends Message<DescriptionEntity> {
  /**
   * id represents the unique identifier of the description entity.
   *
   * @generated from field: flyteidl.core.Identifier id = 1;
   */
  id?: Identifier;

  /**
   * One-liner overview of the entity.
   *
   * @generated from field: string short_description = 2;
   */
  shortDescription: string;

  /**
   * Full user description with formatting preserved.
   *
   * @generated from field: flyteidl.admin.Description long_description = 3;
   */
  longDescription?: Description;

  /**
   * Optional link to source code used to define this entity.
   *
   * @generated from field: flyteidl.admin.SourceCode source_code = 4;
   */
  sourceCode?: SourceCode;

  /**
   * User-specified tags. These are arbitrary and can be used for searching
   * filtering and discovering tasks.
   *
   * @generated from field: repeated string tags = 5;
   */
  tags: string[];

  constructor(data?: PartialMessage<DescriptionEntity>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.DescriptionEntity";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DescriptionEntity;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DescriptionEntity;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DescriptionEntity;

  static equals(a: DescriptionEntity | PlainMessage<DescriptionEntity> | undefined, b: DescriptionEntity | PlainMessage<DescriptionEntity> | undefined): boolean;
}

/**
 * Full user description with formatting preserved. This can be rendered
 * by clients, such as the console or command line tools with in-tact
 * formatting.
 *
 * @generated from message flyteidl.admin.Description
 */
export declare class Description extends Message<Description> {
  /**
   * @generated from oneof flyteidl.admin.Description.content
   */
  content: {
    /**
     * long description - no more than 4KB
     *
     * @generated from field: string value = 1;
     */
    value: string;
    case: "value";
  } | {
    /**
     * if the description sizes exceed some threshold we can offload the entire
     * description proto altogether to an external data store, like S3 rather than store inline in the db
     *
     * @generated from field: string uri = 2;
     */
    value: string;
    case: "uri";
  } | { case: undefined; value?: undefined };

  /**
   * Format of the long description
   *
   * @generated from field: flyteidl.admin.DescriptionFormat format = 3;
   */
  format: DescriptionFormat;

  /**
   * Optional link to an icon for the entity
   *
   * @generated from field: string icon_link = 4;
   */
  iconLink: string;

  constructor(data?: PartialMessage<Description>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.Description";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Description;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Description;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Description;

  static equals(a: Description | PlainMessage<Description> | undefined, b: Description | PlainMessage<Description> | undefined): boolean;
}

/**
 * Link to source code used to define this entity
 *
 * @generated from message flyteidl.admin.SourceCode
 */
export declare class SourceCode extends Message<SourceCode> {
  /**
   * @generated from field: string link = 1;
   */
  link: string;

  constructor(data?: PartialMessage<SourceCode>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.SourceCode";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SourceCode;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SourceCode;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SourceCode;

  static equals(a: SourceCode | PlainMessage<SourceCode> | undefined, b: SourceCode | PlainMessage<SourceCode> | undefined): boolean;
}

/**
 * Represents a list of DescriptionEntities returned from the admin.
 * See :ref:`ref_flyteidl.admin.DescriptionEntity` for more details
 *
 * @generated from message flyteidl.admin.DescriptionEntityList
 */
export declare class DescriptionEntityList extends Message<DescriptionEntityList> {
  /**
   * A list of DescriptionEntities returned based on the request.
   *
   * @generated from field: repeated flyteidl.admin.DescriptionEntity descriptionEntities = 1;
   */
  descriptionEntities: DescriptionEntity[];

  /**
   * In the case of multiple pages of results, the server-provided token can be used to fetch the next page
   * in a query. If there are no more results, this value will be empty.
   *
   * @generated from field: string token = 2;
   */
  token: string;

  constructor(data?: PartialMessage<DescriptionEntityList>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.DescriptionEntityList";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DescriptionEntityList;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DescriptionEntityList;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DescriptionEntityList;

  static equals(a: DescriptionEntityList | PlainMessage<DescriptionEntityList> | undefined, b: DescriptionEntityList | PlainMessage<DescriptionEntityList> | undefined): boolean;
}

/**
 * Represents a request structure to retrieve a list of DescriptionEntities.
 * See :ref:`ref_flyteidl.admin.DescriptionEntity` for more details
 *
 * @generated from message flyteidl.admin.DescriptionEntityListRequest
 */
export declare class DescriptionEntityListRequest extends Message<DescriptionEntityListRequest> {
  /**
   * Identifies the specific type of resource that this identifier corresponds to.
   *
   * @generated from field: flyteidl.core.ResourceType resource_type = 1;
   */
  resourceType: ResourceType;

  /**
   * The identifier for the description entity.
   * +required
   *
   * @generated from field: flyteidl.admin.NamedEntityIdentifier id = 2;
   */
  id?: NamedEntityIdentifier;

  /**
   * Indicates the number of resources to be returned.
   * +required
   *
   * @generated from field: uint32 limit = 3;
   */
  limit: number;

  /**
   * In the case of multiple pages of results, the server-provided token can be used to fetch the next page
   * in a query.
   * +optional
   *
   * @generated from field: string token = 4;
   */
  token: string;

  /**
   * Indicates a list of filters passed as string.
   * More info on constructing filters : <Link>
   * +optional
   *
   * @generated from field: string filters = 5;
   */
  filters: string;

  /**
   * Sort ordering for returned list.
   * +optional
   *
   * @generated from field: flyteidl.admin.Sort sort_by = 6;
   */
  sortBy?: Sort;

  constructor(data?: PartialMessage<DescriptionEntityListRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.DescriptionEntityListRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DescriptionEntityListRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DescriptionEntityListRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DescriptionEntityListRequest;

  static equals(a: DescriptionEntityListRequest | PlainMessage<DescriptionEntityListRequest> | undefined, b: DescriptionEntityListRequest | PlainMessage<DescriptionEntityListRequest> | undefined): boolean;
}

