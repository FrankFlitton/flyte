// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/admin/node_execution.proto (package flyteidl.admin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Identifier, NodeExecutionIdentifier, TaskExecutionIdentifier, WorkflowExecutionIdentifier } from "../core/identifier_pb.js";
import type { FlyteURLs, Sort, UrlBlob } from "./common_pb.js";
import type { ExecutionError, NodeExecution_Phase } from "../core/execution_pb.js";
import type { LiteralMap } from "../core/literals_pb.js";
import type { CatalogCacheStatus, CatalogMetadata } from "../core/catalog_pb.js";
import type { CompiledWorkflowClosure } from "../core/compiler_pb.js";

/**
 * A message used to fetch a single node execution entity.
 * See :ref:`ref_flyteidl.admin.NodeExecution` for more details
 *
 * @generated from message flyteidl.admin.NodeExecutionGetRequest
 */
export declare class NodeExecutionGetRequest extends Message<NodeExecutionGetRequest> {
  /**
   * Uniquely identifies an individual node execution.
   * +required
   *
   * @generated from field: flyteidl.core.NodeExecutionIdentifier id = 1;
   */
  id?: NodeExecutionIdentifier;

  constructor(data?: PartialMessage<NodeExecutionGetRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.NodeExecutionGetRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeExecutionGetRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeExecutionGetRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeExecutionGetRequest;

  static equals(a: NodeExecutionGetRequest | PlainMessage<NodeExecutionGetRequest> | undefined, b: NodeExecutionGetRequest | PlainMessage<NodeExecutionGetRequest> | undefined): boolean;
}

/**
 * Represents a request structure to retrieve a list of node execution entities.
 * See :ref:`ref_flyteidl.admin.NodeExecution` for more details
 *
 * @generated from message flyteidl.admin.NodeExecutionListRequest
 */
export declare class NodeExecutionListRequest extends Message<NodeExecutionListRequest> {
  /**
   * Indicates the workflow execution to filter by.
   * +required
   *
   * @generated from field: flyteidl.core.WorkflowExecutionIdentifier workflow_execution_id = 1;
   */
  workflowExecutionId?: WorkflowExecutionIdentifier;

  /**
   * Indicates the number of resources to be returned.
   * +required
   *
   * @generated from field: uint32 limit = 2;
   */
  limit: number;

  /**
   * @generated from field: string token = 3;
   */
  token: string;

  /**
   * Indicates a list of filters passed as string.
   * More info on constructing filters : <Link>
   * +optional
   *
   * @generated from field: string filters = 4;
   */
  filters: string;

  /**
   * Sort ordering.
   * +optional
   *
   * @generated from field: flyteidl.admin.Sort sort_by = 5;
   */
  sortBy?: Sort;

  /**
   * Unique identifier of the parent node in the execution
   * +optional
   *
   * @generated from field: string unique_parent_id = 6;
   */
  uniqueParentId: string;

  constructor(data?: PartialMessage<NodeExecutionListRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.NodeExecutionListRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeExecutionListRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeExecutionListRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeExecutionListRequest;

  static equals(a: NodeExecutionListRequest | PlainMessage<NodeExecutionListRequest> | undefined, b: NodeExecutionListRequest | PlainMessage<NodeExecutionListRequest> | undefined): boolean;
}

/**
 * Represents a request structure to retrieve a list of node execution entities launched by a specific task.
 * This can arise when a task yields a subworkflow.
 *
 * @generated from message flyteidl.admin.NodeExecutionForTaskListRequest
 */
export declare class NodeExecutionForTaskListRequest extends Message<NodeExecutionForTaskListRequest> {
  /**
   * Indicates the node execution to filter by.
   * +required
   *
   * @generated from field: flyteidl.core.TaskExecutionIdentifier task_execution_id = 1;
   */
  taskExecutionId?: TaskExecutionIdentifier;

  /**
   * Indicates the number of resources to be returned.
   * +required
   *
   * @generated from field: uint32 limit = 2;
   */
  limit: number;

  /**
   * In the case of multiple pages of results, the, server-provided token can be used to fetch the next page
   * in a query.
   * +optional
   *
   * @generated from field: string token = 3;
   */
  token: string;

  /**
   * Indicates a list of filters passed as string.
   * More info on constructing filters : <Link>
   * +optional
   *
   * @generated from field: string filters = 4;
   */
  filters: string;

  /**
   * Sort ordering.
   * +optional
   *
   * @generated from field: flyteidl.admin.Sort sort_by = 5;
   */
  sortBy?: Sort;

  constructor(data?: PartialMessage<NodeExecutionForTaskListRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.NodeExecutionForTaskListRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeExecutionForTaskListRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeExecutionForTaskListRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeExecutionForTaskListRequest;

  static equals(a: NodeExecutionForTaskListRequest | PlainMessage<NodeExecutionForTaskListRequest> | undefined, b: NodeExecutionForTaskListRequest | PlainMessage<NodeExecutionForTaskListRequest> | undefined): boolean;
}

/**
 * Encapsulates all details for a single node execution entity.
 * A node represents a component in the overall workflow graph. A node launch a task, multiple tasks, an entire nested
 * sub-workflow, or even a separate child-workflow execution.
 * The same task can be called repeatedly in a single workflow but each node is unique.
 *
 * @generated from message flyteidl.admin.NodeExecution
 */
export declare class NodeExecution extends Message<NodeExecution> {
  /**
   * Uniquely identifies an individual node execution.
   *
   * @generated from field: flyteidl.core.NodeExecutionIdentifier id = 1;
   */
  id?: NodeExecutionIdentifier;

  /**
   * Path to remote data store where input blob is stored.
   *
   * @generated from field: string input_uri = 2;
   */
  inputUri: string;

  /**
   * Computed results associated with this node execution.
   *
   * @generated from field: flyteidl.admin.NodeExecutionClosure closure = 3;
   */
  closure?: NodeExecutionClosure;

  /**
   * Metadata for Node Execution
   *
   * @generated from field: flyteidl.admin.NodeExecutionMetaData metadata = 4;
   */
  metadata?: NodeExecutionMetaData;

  constructor(data?: PartialMessage<NodeExecution>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.NodeExecution";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeExecution;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeExecution;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeExecution;

  static equals(a: NodeExecution | PlainMessage<NodeExecution> | undefined, b: NodeExecution | PlainMessage<NodeExecution> | undefined): boolean;
}

/**
 * Represents additional attributes related to a Node Execution
 *
 * @generated from message flyteidl.admin.NodeExecutionMetaData
 */
export declare class NodeExecutionMetaData extends Message<NodeExecutionMetaData> {
  /**
   * Node executions are grouped depending on retries of the parent
   * Retry group is unique within the context of a parent node.
   *
   * @generated from field: string retry_group = 1;
   */
  retryGroup: string;

  /**
   * Boolean flag indicating if the node has child nodes under it
   * This can be true when a node contains a dynamic workflow which then produces
   * child nodes.
   *
   * @generated from field: bool is_parent_node = 2;
   */
  isParentNode: boolean;

  /**
   * Node id of the node in the original workflow
   * This maps to value of WorkflowTemplate.nodes[X].id
   *
   * @generated from field: string spec_node_id = 3;
   */
  specNodeId: string;

  /**
   * Boolean flag indicating if the node has contains a dynamic workflow which then produces child nodes.
   * This is to distinguish between subworkflows and dynamic workflows which can both have is_parent_node as true.
   *
   * @generated from field: bool is_dynamic = 4;
   */
  isDynamic: boolean;

  /**
   * Boolean flag indicating if the node is an array node. This is intended to uniquely identify
   * array nodes from other nodes which can have is_parent_node as true.
   *
   * @generated from field: bool is_array = 5;
   */
  isArray: boolean;

  constructor(data?: PartialMessage<NodeExecutionMetaData>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.NodeExecutionMetaData";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeExecutionMetaData;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeExecutionMetaData;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeExecutionMetaData;

  static equals(a: NodeExecutionMetaData | PlainMessage<NodeExecutionMetaData> | undefined, b: NodeExecutionMetaData | PlainMessage<NodeExecutionMetaData> | undefined): boolean;
}

/**
 * Request structure to retrieve a list of node execution entities.
 * See :ref:`ref_flyteidl.admin.NodeExecution` for more details
 *
 * @generated from message flyteidl.admin.NodeExecutionList
 */
export declare class NodeExecutionList extends Message<NodeExecutionList> {
  /**
   * @generated from field: repeated flyteidl.admin.NodeExecution node_executions = 1;
   */
  nodeExecutions: NodeExecution[];

  /**
   * In the case of multiple pages of results, the server-provided token can be used to fetch the next page
   * in a query. If there are no more results, this value will be empty.
   *
   * @generated from field: string token = 2;
   */
  token: string;

  constructor(data?: PartialMessage<NodeExecutionList>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.NodeExecutionList";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeExecutionList;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeExecutionList;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeExecutionList;

  static equals(a: NodeExecutionList | PlainMessage<NodeExecutionList> | undefined, b: NodeExecutionList | PlainMessage<NodeExecutionList> | undefined): boolean;
}

/**
 * Container for node execution details and results.
 *
 * @generated from message flyteidl.admin.NodeExecutionClosure
 */
export declare class NodeExecutionClosure extends Message<NodeExecutionClosure> {
  /**
   * Only a node in a terminal state will have a non-empty output_result.
   *
   * @generated from oneof flyteidl.admin.NodeExecutionClosure.output_result
   */
  outputResult: {
    /**
     * Links to a remotely stored, serialized core.LiteralMap of node execution outputs.
     * DEPRECATED. Use GetNodeExecutionData to fetch output data instead.
     *
     * @generated from field: string output_uri = 1 [deprecated = true];
     * @deprecated
     */
    value: string;
    case: "outputUri";
  } | {
    /**
     * Error information for the Node
     *
     * @generated from field: flyteidl.core.ExecutionError error = 2;
     */
    value: ExecutionError;
    case: "error";
  } | {
    /**
     * Raw output data produced by this node execution.
     * DEPRECATED. Use GetNodeExecutionData to fetch output data instead.
     *
     * @generated from field: flyteidl.core.LiteralMap output_data = 10 [deprecated = true];
     * @deprecated
     */
    value: LiteralMap;
    case: "outputData";
  } | { case: undefined; value?: undefined };

  /**
   * The last recorded phase for this node execution.
   *
   * @generated from field: flyteidl.core.NodeExecution.Phase phase = 3;
   */
  phase: NodeExecution_Phase;

  /**
   * Time at which the node execution began running.
   *
   * @generated from field: google.protobuf.Timestamp started_at = 4;
   */
  startedAt?: Timestamp;

  /**
   * The amount of time the node execution spent running.
   *
   * @generated from field: google.protobuf.Duration duration = 5;
   */
  duration?: Duration;

  /**
   * Time at which the node execution was created.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp;

  /**
   * Time at which the node execution was last updated.
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 7;
   */
  updatedAt?: Timestamp;

  /**
   * Store metadata for what the node launched.
   * for ex: if this is a workflow node, we store information for the launched workflow.
   *
   * @generated from oneof flyteidl.admin.NodeExecutionClosure.target_metadata
   */
  targetMetadata: {
    /**
     * @generated from field: flyteidl.admin.WorkflowNodeMetadata workflow_node_metadata = 8;
     */
    value: WorkflowNodeMetadata;
    case: "workflowNodeMetadata";
  } | {
    /**
     * @generated from field: flyteidl.admin.TaskNodeMetadata task_node_metadata = 9;
     */
    value: TaskNodeMetadata;
    case: "taskNodeMetadata";
  } | { case: undefined; value?: undefined };

  /**
   * String location uniquely identifying where the deck HTML file is.
   * NativeUrl specifies the url in the format of the configured storage provider (e.g. s3://my-bucket/randomstring/suffix.tar)
   *
   * @generated from field: string deck_uri = 11;
   */
  deckUri: string;

  /**
   * dynamic_job_spec_uri is the location of the DynamicJobSpec proto message for a DynamicWorkflow. This is required
   * to correctly recover partially completed executions where the subworkflow has already been compiled.
   *
   * @generated from field: string dynamic_job_spec_uri = 12;
   */
  dynamicJobSpecUri: string;

  constructor(data?: PartialMessage<NodeExecutionClosure>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.NodeExecutionClosure";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeExecutionClosure;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeExecutionClosure;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeExecutionClosure;

  static equals(a: NodeExecutionClosure | PlainMessage<NodeExecutionClosure> | undefined, b: NodeExecutionClosure | PlainMessage<NodeExecutionClosure> | undefined): boolean;
}

/**
 * Metadata for a WorkflowNode
 *
 * @generated from message flyteidl.admin.WorkflowNodeMetadata
 */
export declare class WorkflowNodeMetadata extends Message<WorkflowNodeMetadata> {
  /**
   * The identifier for a workflow execution launched by a node.
   *
   * @generated from field: flyteidl.core.WorkflowExecutionIdentifier executionId = 1;
   */
  executionId?: WorkflowExecutionIdentifier;

  constructor(data?: PartialMessage<WorkflowNodeMetadata>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.WorkflowNodeMetadata";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowNodeMetadata;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowNodeMetadata;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowNodeMetadata;

  static equals(a: WorkflowNodeMetadata | PlainMessage<WorkflowNodeMetadata> | undefined, b: WorkflowNodeMetadata | PlainMessage<WorkflowNodeMetadata> | undefined): boolean;
}

/**
 * Metadata for the case in which the node is a TaskNode
 *
 * @generated from message flyteidl.admin.TaskNodeMetadata
 */
export declare class TaskNodeMetadata extends Message<TaskNodeMetadata> {
  /**
   * Captures the status of caching for this execution.
   *
   * @generated from field: flyteidl.core.CatalogCacheStatus cache_status = 1;
   */
  cacheStatus: CatalogCacheStatus;

  /**
   * This structure carries the catalog artifact information
   *
   * @generated from field: flyteidl.core.CatalogMetadata catalog_key = 2;
   */
  catalogKey?: CatalogMetadata;

  /**
   * The latest checkpoint location
   *
   * @generated from field: string checkpoint_uri = 4;
   */
  checkpointUri: string;

  constructor(data?: PartialMessage<TaskNodeMetadata>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.TaskNodeMetadata";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskNodeMetadata;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskNodeMetadata;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskNodeMetadata;

  static equals(a: TaskNodeMetadata | PlainMessage<TaskNodeMetadata> | undefined, b: TaskNodeMetadata | PlainMessage<TaskNodeMetadata> | undefined): boolean;
}

/**
 * For dynamic workflow nodes we capture information about the dynamic workflow definition that gets generated.
 *
 * @generated from message flyteidl.admin.DynamicWorkflowNodeMetadata
 */
export declare class DynamicWorkflowNodeMetadata extends Message<DynamicWorkflowNodeMetadata> {
  /**
   * id represents the unique identifier of the workflow.
   *
   * @generated from field: flyteidl.core.Identifier id = 1;
   */
  id?: Identifier;

  /**
   * Represents the compiled representation of the embedded dynamic workflow.
   *
   * @generated from field: flyteidl.core.CompiledWorkflowClosure compiled_workflow = 2;
   */
  compiledWorkflow?: CompiledWorkflowClosure;

  /**
   * dynamic_job_spec_uri is the location of the DynamicJobSpec proto message for this DynamicWorkflow. This is
   * required to correctly recover partially completed executions where the subworkflow has already been compiled.
   *
   * @generated from field: string dynamic_job_spec_uri = 3;
   */
  dynamicJobSpecUri: string;

  constructor(data?: PartialMessage<DynamicWorkflowNodeMetadata>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.DynamicWorkflowNodeMetadata";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DynamicWorkflowNodeMetadata;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DynamicWorkflowNodeMetadata;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DynamicWorkflowNodeMetadata;

  static equals(a: DynamicWorkflowNodeMetadata | PlainMessage<DynamicWorkflowNodeMetadata> | undefined, b: DynamicWorkflowNodeMetadata | PlainMessage<DynamicWorkflowNodeMetadata> | undefined): boolean;
}

/**
 * Request structure to fetch inputs and output for a node execution.
 * By default, these are not returned in :ref:`ref_flyteidl.admin.NodeExecutionGetRequest`
 *
 * @generated from message flyteidl.admin.NodeExecutionGetDataRequest
 */
export declare class NodeExecutionGetDataRequest extends Message<NodeExecutionGetDataRequest> {
  /**
   * The identifier of the node execution for which to fetch inputs and outputs.
   *
   * @generated from field: flyteidl.core.NodeExecutionIdentifier id = 1;
   */
  id?: NodeExecutionIdentifier;

  constructor(data?: PartialMessage<NodeExecutionGetDataRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.NodeExecutionGetDataRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeExecutionGetDataRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeExecutionGetDataRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeExecutionGetDataRequest;

  static equals(a: NodeExecutionGetDataRequest | PlainMessage<NodeExecutionGetDataRequest> | undefined, b: NodeExecutionGetDataRequest | PlainMessage<NodeExecutionGetDataRequest> | undefined): boolean;
}

/**
 * Response structure for NodeExecutionGetDataRequest which contains inputs and outputs for a node execution.
 *
 * @generated from message flyteidl.admin.NodeExecutionGetDataResponse
 */
export declare class NodeExecutionGetDataResponse extends Message<NodeExecutionGetDataResponse> {
  /**
   * Signed url to fetch a core.LiteralMap of node execution inputs.
   * Deprecated: Please use full_inputs instead.
   *
   * @generated from field: flyteidl.admin.UrlBlob inputs = 1 [deprecated = true];
   * @deprecated
   */
  inputs?: UrlBlob;

  /**
   * Signed url to fetch a core.LiteralMap of node execution outputs.
   * Deprecated: Please use full_outputs instead.
   *
   * @generated from field: flyteidl.admin.UrlBlob outputs = 2 [deprecated = true];
   * @deprecated
   */
  outputs?: UrlBlob;

  /**
   * Full_inputs will only be populated if they are under a configured size threshold.
   *
   * @generated from field: flyteidl.core.LiteralMap full_inputs = 3;
   */
  fullInputs?: LiteralMap;

  /**
   * Full_outputs will only be populated if they are under a configured size threshold. 
   *
   * @generated from field: flyteidl.core.LiteralMap full_outputs = 4;
   */
  fullOutputs?: LiteralMap;

  /**
   * Optional Workflow closure for a dynamically generated workflow, in the case this node yields a dynamic workflow we return its structure here.
   *
   * @generated from field: flyteidl.admin.DynamicWorkflowNodeMetadata dynamic_workflow = 16;
   */
  dynamicWorkflow?: DynamicWorkflowNodeMetadata;

  /**
   * @generated from field: flyteidl.admin.FlyteURLs flyte_urls = 17;
   */
  flyteUrls?: FlyteURLs;

  constructor(data?: PartialMessage<NodeExecutionGetDataResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.NodeExecutionGetDataResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeExecutionGetDataResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeExecutionGetDataResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeExecutionGetDataResponse;

  static equals(a: NodeExecutionGetDataResponse | PlainMessage<NodeExecutionGetDataResponse> | undefined, b: NodeExecutionGetDataResponse | PlainMessage<NodeExecutionGetDataResponse> | undefined): boolean;
}

