// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/admin/task_execution.proto (package flyteidl.admin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Struct, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { NodeExecutionIdentifier, TaskExecutionIdentifier } from "../core/identifier_pb.js";
import type { FlyteURLs, Sort, UrlBlob } from "./common_pb.js";
import type { ExecutionError, TaskExecution_Phase, TaskLog } from "../core/execution_pb.js";
import type { LiteralMap } from "../core/literals_pb.js";
import type { TaskExecutionMetadata } from "../event/event_pb.js";

/**
 * A message used to fetch a single task execution entity.
 * See :ref:`ref_flyteidl.admin.TaskExecution` for more details
 *
 * @generated from message flyteidl.admin.TaskExecutionGetRequest
 */
export declare class TaskExecutionGetRequest extends Message<TaskExecutionGetRequest> {
  /**
   * Unique identifier for the task execution.
   * +required
   *
   * @generated from field: flyteidl.core.TaskExecutionIdentifier id = 1;
   */
  id?: TaskExecutionIdentifier;

  constructor(data?: PartialMessage<TaskExecutionGetRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.TaskExecutionGetRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskExecutionGetRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskExecutionGetRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskExecutionGetRequest;

  static equals(a: TaskExecutionGetRequest | PlainMessage<TaskExecutionGetRequest> | undefined, b: TaskExecutionGetRequest | PlainMessage<TaskExecutionGetRequest> | undefined): boolean;
}

/**
 * Represents a request structure to retrieve a list of task execution entities yielded by a specific node execution.
 * See :ref:`ref_flyteidl.admin.TaskExecution` for more details
 *
 * @generated from message flyteidl.admin.TaskExecutionListRequest
 */
export declare class TaskExecutionListRequest extends Message<TaskExecutionListRequest> {
  /**
   * Indicates the node execution to filter by.
   * +required
   *
   * @generated from field: flyteidl.core.NodeExecutionIdentifier node_execution_id = 1;
   */
  nodeExecutionId?: NodeExecutionIdentifier;

  /**
   * Indicates the number of resources to be returned.
   * +required
   *
   * @generated from field: uint32 limit = 2;
   */
  limit: number;

  /**
   * In the case of multiple pages of results, the server-provided token can be used to fetch the next page
   * in a query.
   * +optional
   *
   * @generated from field: string token = 3;
   */
  token: string;

  /**
   * Indicates a list of filters passed as string.
   * More info on constructing filters : <Link>
   * +optional
   *
   * @generated from field: string filters = 4;
   */
  filters: string;

  /**
   * Sort ordering for returned list.
   * +optional
   *
   * @generated from field: flyteidl.admin.Sort sort_by = 5;
   */
  sortBy?: Sort;

  constructor(data?: PartialMessage<TaskExecutionListRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.TaskExecutionListRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskExecutionListRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskExecutionListRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskExecutionListRequest;

  static equals(a: TaskExecutionListRequest | PlainMessage<TaskExecutionListRequest> | undefined, b: TaskExecutionListRequest | PlainMessage<TaskExecutionListRequest> | undefined): boolean;
}

/**
 * Encapsulates all details for a single task execution entity.
 * A task execution represents an instantiated task, including all inputs and additional
 * metadata as well as computed results included state, outputs, and duration-based attributes.
 *
 * @generated from message flyteidl.admin.TaskExecution
 */
export declare class TaskExecution extends Message<TaskExecution> {
  /**
   * Unique identifier for the task execution.
   *
   * @generated from field: flyteidl.core.TaskExecutionIdentifier id = 1;
   */
  id?: TaskExecutionIdentifier;

  /**
   * Path to remote data store where input blob is stored.
   *
   * @generated from field: string input_uri = 2;
   */
  inputUri: string;

  /**
   * Task execution details and results.
   *
   * @generated from field: flyteidl.admin.TaskExecutionClosure closure = 3;
   */
  closure?: TaskExecutionClosure;

  /**
   * Whether this task spawned nodes.
   *
   * @generated from field: bool is_parent = 4;
   */
  isParent: boolean;

  constructor(data?: PartialMessage<TaskExecution>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.TaskExecution";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskExecution;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskExecution;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskExecution;

  static equals(a: TaskExecution | PlainMessage<TaskExecution> | undefined, b: TaskExecution | PlainMessage<TaskExecution> | undefined): boolean;
}

/**
 * Response structure for a query to list of task execution entities.
 * See :ref:`ref_flyteidl.admin.TaskExecution` for more details
 *
 * @generated from message flyteidl.admin.TaskExecutionList
 */
export declare class TaskExecutionList extends Message<TaskExecutionList> {
  /**
   * @generated from field: repeated flyteidl.admin.TaskExecution task_executions = 1;
   */
  taskExecutions: TaskExecution[];

  /**
   * In the case of multiple pages of results, the server-provided token can be used to fetch the next page
   * in a query. If there are no more results, this value will be empty.
   *
   * @generated from field: string token = 2;
   */
  token: string;

  constructor(data?: PartialMessage<TaskExecutionList>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.TaskExecutionList";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskExecutionList;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskExecutionList;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskExecutionList;

  static equals(a: TaskExecutionList | PlainMessage<TaskExecutionList> | undefined, b: TaskExecutionList | PlainMessage<TaskExecutionList> | undefined): boolean;
}

/**
 * Container for task execution details and results.
 *
 * @generated from message flyteidl.admin.TaskExecutionClosure
 */
export declare class TaskExecutionClosure extends Message<TaskExecutionClosure> {
  /**
   * @generated from oneof flyteidl.admin.TaskExecutionClosure.output_result
   */
  outputResult: {
    /**
     * Path to remote data store where output blob is stored if the execution succeeded (and produced outputs).
     * DEPRECATED. Use GetTaskExecutionData to fetch output data instead.
     *
     * @generated from field: string output_uri = 1 [deprecated = true];
     * @deprecated
     */
    value: string;
    case: "outputUri";
  } | {
    /**
     * Error information for the task execution. Populated if the execution failed.
     *
     * @generated from field: flyteidl.core.ExecutionError error = 2;
     */
    value: ExecutionError;
    case: "error";
  } | {
    /**
     * Raw output data produced by this task execution.
     * DEPRECATED. Use GetTaskExecutionData to fetch output data instead.
     *
     * @generated from field: flyteidl.core.LiteralMap output_data = 12 [deprecated = true];
     * @deprecated
     */
    value: LiteralMap;
    case: "outputData";
  } | { case: undefined; value?: undefined };

  /**
   * The last recorded phase for this task execution.
   *
   * @generated from field: flyteidl.core.TaskExecution.Phase phase = 3;
   */
  phase: TaskExecution_Phase;

  /**
   * Detailed log information output by the task execution.
   *
   * @generated from field: repeated flyteidl.core.TaskLog logs = 4;
   */
  logs: TaskLog[];

  /**
   * Time at which the task execution began running.
   *
   * @generated from field: google.protobuf.Timestamp started_at = 5;
   */
  startedAt?: Timestamp;

  /**
   * The amount of time the task execution spent running.
   *
   * @generated from field: google.protobuf.Duration duration = 6;
   */
  duration?: Duration;

  /**
   * Time at which the task execution was created.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 7;
   */
  createdAt?: Timestamp;

  /**
   * Time at which the task execution was last updated.
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 8;
   */
  updatedAt?: Timestamp;

  /**
   * Custom data specific to the task plugin.
   *
   * @generated from field: google.protobuf.Struct custom_info = 9;
   */
  customInfo?: Struct;

  /**
   * If there is an explanation for the most recent phase transition, the reason will capture it.
   *
   * @generated from field: string reason = 10;
   */
  reason: string;

  /**
   * A predefined yet extensible Task type identifier.
   *
   * @generated from field: string task_type = 11;
   */
  taskType: string;

  /**
   * Metadata around how a task was executed.
   *
   * @generated from field: flyteidl.event.TaskExecutionMetadata metadata = 16;
   */
  metadata?: TaskExecutionMetadata;

  /**
   * The event version is used to indicate versioned changes in how data is maintained using this
   * proto message. For example, event_verison > 0 means that maps tasks logs use the
   * TaskExecutionMetadata ExternalResourceInfo fields for each subtask rather than the TaskLog
   * in this message.
   *
   * @generated from field: int32 event_version = 17;
   */
  eventVersion: number;

  /**
   * A time-series of the phase transition or update explanations. This, when compared to storing a singular reason
   * as previously done, is much more valuable in visualizing and understanding historical evaluations.
   *
   * @generated from field: repeated flyteidl.admin.Reason reasons = 18;
   */
  reasons: Reason[];

  constructor(data?: PartialMessage<TaskExecutionClosure>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.TaskExecutionClosure";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskExecutionClosure;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskExecutionClosure;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskExecutionClosure;

  static equals(a: TaskExecutionClosure | PlainMessage<TaskExecutionClosure> | undefined, b: TaskExecutionClosure | PlainMessage<TaskExecutionClosure> | undefined): boolean;
}

/**
 * Reason is a single message annotated with a timestamp to indicate the instant the reason occurred.
 *
 * @generated from message flyteidl.admin.Reason
 */
export declare class Reason extends Message<Reason> {
  /**
   * occurred_at is the timestamp indicating the instant that this reason happened.
   *
   * @generated from field: google.protobuf.Timestamp occurred_at = 1;
   */
  occurredAt?: Timestamp;

  /**
   * message is the explanation for the most recent phase transition or status update.
   *
   * @generated from field: string message = 2;
   */
  message: string;

  constructor(data?: PartialMessage<Reason>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.Reason";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Reason;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Reason;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Reason;

  static equals(a: Reason | PlainMessage<Reason> | undefined, b: Reason | PlainMessage<Reason> | undefined): boolean;
}

/**
 * Request structure to fetch inputs and output for a task execution.
 * By default this data is not returned inline in :ref:`ref_flyteidl.admin.TaskExecutionGetRequest`
 *
 * @generated from message flyteidl.admin.TaskExecutionGetDataRequest
 */
export declare class TaskExecutionGetDataRequest extends Message<TaskExecutionGetDataRequest> {
  /**
   * The identifier of the task execution for which to fetch inputs and outputs.
   * +required
   *
   * @generated from field: flyteidl.core.TaskExecutionIdentifier id = 1;
   */
  id?: TaskExecutionIdentifier;

  constructor(data?: PartialMessage<TaskExecutionGetDataRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.TaskExecutionGetDataRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskExecutionGetDataRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskExecutionGetDataRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskExecutionGetDataRequest;

  static equals(a: TaskExecutionGetDataRequest | PlainMessage<TaskExecutionGetDataRequest> | undefined, b: TaskExecutionGetDataRequest | PlainMessage<TaskExecutionGetDataRequest> | undefined): boolean;
}

/**
 * Response structure for TaskExecutionGetDataRequest which contains inputs and outputs for a task execution.
 *
 * @generated from message flyteidl.admin.TaskExecutionGetDataResponse
 */
export declare class TaskExecutionGetDataResponse extends Message<TaskExecutionGetDataResponse> {
  /**
   * Signed url to fetch a core.LiteralMap of task execution inputs.
   * Deprecated: Please use full_inputs instead.
   *
   * @generated from field: flyteidl.admin.UrlBlob inputs = 1 [deprecated = true];
   * @deprecated
   */
  inputs?: UrlBlob;

  /**
   * Signed url to fetch a core.LiteralMap of task execution outputs.
   * Deprecated: Please use full_outputs instead.
   *
   * @generated from field: flyteidl.admin.UrlBlob outputs = 2 [deprecated = true];
   * @deprecated
   */
  outputs?: UrlBlob;

  /**
   * Full_inputs will only be populated if they are under a configured size threshold.
   *
   * @generated from field: flyteidl.core.LiteralMap full_inputs = 3;
   */
  fullInputs?: LiteralMap;

  /**
   * Full_outputs will only be populated if they are under a configured size threshold.
   *
   * @generated from field: flyteidl.core.LiteralMap full_outputs = 4;
   */
  fullOutputs?: LiteralMap;

  /**
   * flyte tiny url to fetch a core.LiteralMap of task execution's IO
   * Deck will be empty for task
   *
   * @generated from field: flyteidl.admin.FlyteURLs flyte_urls = 5;
   */
  flyteUrls?: FlyteURLs;

  constructor(data?: PartialMessage<TaskExecutionGetDataResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.TaskExecutionGetDataResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskExecutionGetDataResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskExecutionGetDataResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskExecutionGetDataResponse;

  static equals(a: TaskExecutionGetDataResponse | PlainMessage<TaskExecutionGetDataResponse> | undefined, b: TaskExecutionGetDataResponse | PlainMessage<TaskExecutionGetDataResponse> | undefined): boolean;
}

