// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/admin/event.proto (package flyteidl.admin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { NodeExecutionEvent, TaskExecutionEvent, WorkflowExecutionEvent } from "../event/event_pb.js";

/**
 * Indicates that a sent event was not used to update execution state due to
 * the referenced execution already being terminated (and therefore ineligible
 * for further state transitions).
 *
 * @generated from message flyteidl.admin.EventErrorAlreadyInTerminalState
 */
export const EventErrorAlreadyInTerminalState = proto3.makeMessageType(
  "flyteidl.admin.EventErrorAlreadyInTerminalState",
  () => [
    { no: 1, name: "current_phase", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Indicates an event was rejected because it came from a different cluster than 
 * is on record as running the execution.
 *
 * @generated from message flyteidl.admin.EventErrorIncompatibleCluster
 */
export const EventErrorIncompatibleCluster = proto3.makeMessageType(
  "flyteidl.admin.EventErrorIncompatibleCluster",
  () => [
    { no: 1, name: "cluster", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Indicates why a sent event was not used to update execution.
 *
 * @generated from message flyteidl.admin.EventFailureReason
 */
export const EventFailureReason = proto3.makeMessageType(
  "flyteidl.admin.EventFailureReason",
  () => [
    { no: 1, name: "already_in_terminal_state", kind: "message", T: EventErrorAlreadyInTerminalState, oneof: "reason" },
    { no: 2, name: "incompatible_cluster", kind: "message", T: EventErrorIncompatibleCluster, oneof: "reason" },
  ],
);

/**
 * Request to send a notification that a workflow execution event has occurred.
 *
 * @generated from message flyteidl.admin.WorkflowExecutionEventRequest
 */
export const WorkflowExecutionEventRequest = proto3.makeMessageType(
  "flyteidl.admin.WorkflowExecutionEventRequest",
  () => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "event", kind: "message", T: WorkflowExecutionEvent },
  ],
);

/**
 * Purposefully empty, may be populated in the future.
 *
 * @generated from message flyteidl.admin.WorkflowExecutionEventResponse
 */
export const WorkflowExecutionEventResponse = proto3.makeMessageType(
  "flyteidl.admin.WorkflowExecutionEventResponse",
  [],
);

/**
 * Request to send a notification that a node execution event has occurred.
 *
 * @generated from message flyteidl.admin.NodeExecutionEventRequest
 */
export const NodeExecutionEventRequest = proto3.makeMessageType(
  "flyteidl.admin.NodeExecutionEventRequest",
  () => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "event", kind: "message", T: NodeExecutionEvent },
  ],
);

/**
 * Purposefully empty, may be populated in the future.
 *
 * @generated from message flyteidl.admin.NodeExecutionEventResponse
 */
export const NodeExecutionEventResponse = proto3.makeMessageType(
  "flyteidl.admin.NodeExecutionEventResponse",
  [],
);

/**
 * Request to send a notification that a task execution event has occurred.
 *
 * @generated from message flyteidl.admin.TaskExecutionEventRequest
 */
export const TaskExecutionEventRequest = proto3.makeMessageType(
  "flyteidl.admin.TaskExecutionEventRequest",
  () => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "event", kind: "message", T: TaskExecutionEvent },
  ],
);

/**
 * Purposefully empty, may be populated in the future.
 *
 * @generated from message flyteidl.admin.TaskExecutionEventResponse
 */
export const TaskExecutionEventResponse = proto3.makeMessageType(
  "flyteidl.admin.TaskExecutionEventResponse",
  [],
);

