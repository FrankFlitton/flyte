// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/admin/launch_plan.proto (package flyteidl.admin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { BoolValue, proto3, Timestamp } from "@bufbuild/protobuf";
import { Identifier } from "../core/identifier_pb.js";
import { ParameterMap, VariableMap } from "../core/interface_pb.js";
import { LiteralMap } from "../core/literals_pb.js";
import { Annotations, AuthRole, Envs, Labels, NamedEntityIdentifier, Notification, RawOutputDataConfig, Sort } from "./common_pb.js";
import { SecurityContext } from "../core/security_pb.js";
import { QualityOfService } from "../core/execution_pb.js";
import { Schedule } from "./schedule_pb.js";

/**
 * By default any launch plan regardless of state can be used to launch a workflow execution.
 * However, at most one version of a launch plan
 * (e.g. a NamedEntityIdentifier set of shared project, domain and name values) can be
 * active at a time in regards to *schedules*. That is, at most one schedule in a NamedEntityIdentifier
 * group will be observed and trigger executions at a defined cadence.
 *
 * @generated from enum flyteidl.admin.LaunchPlanState
 */
export const LaunchPlanState = proto3.makeEnum(
  "flyteidl.admin.LaunchPlanState",
  [
    {no: 0, name: "INACTIVE"},
    {no: 1, name: "ACTIVE"},
  ],
);

/**
 * Request to register a launch plan. The included LaunchPlanSpec may have a complete or incomplete set of inputs required
 * to launch a workflow execution. By default all launch plans are registered in state INACTIVE. If you wish to
 * set the state to ACTIVE, you must submit a LaunchPlanUpdateRequest, after you have successfully created a launch plan.
 *
 * @generated from message flyteidl.admin.LaunchPlanCreateRequest
 */
export const LaunchPlanCreateRequest = proto3.makeMessageType(
  "flyteidl.admin.LaunchPlanCreateRequest",
  () => [
    { no: 1, name: "id", kind: "message", T: Identifier },
    { no: 2, name: "spec", kind: "message", T: LaunchPlanSpec },
  ],
);

/**
 * Purposefully empty, may be populated in the future.
 *
 * @generated from message flyteidl.admin.LaunchPlanCreateResponse
 */
export const LaunchPlanCreateResponse = proto3.makeMessageType(
  "flyteidl.admin.LaunchPlanCreateResponse",
  [],
);

/**
 * A LaunchPlan provides the capability to templatize workflow executions.
 * Launch plans simplify associating one or more schedules, inputs and notifications with your workflows.
 * Launch plans can be shared and used to trigger executions with predefined inputs even when a workflow
 * definition doesn't necessarily have a default value for said input.
 *
 * @generated from message flyteidl.admin.LaunchPlan
 */
export const LaunchPlan = proto3.makeMessageType(
  "flyteidl.admin.LaunchPlan",
  () => [
    { no: 1, name: "id", kind: "message", T: Identifier },
    { no: 2, name: "spec", kind: "message", T: LaunchPlanSpec },
    { no: 3, name: "closure", kind: "message", T: LaunchPlanClosure },
  ],
);

/**
 * Response object for list launch plan requests.
 * See :ref:`ref_flyteidl.admin.LaunchPlan` for more details
 *
 * @generated from message flyteidl.admin.LaunchPlanList
 */
export const LaunchPlanList = proto3.makeMessageType(
  "flyteidl.admin.LaunchPlanList",
  () => [
    { no: 1, name: "launch_plans", kind: "message", T: LaunchPlan, repeated: true },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Defines permissions associated with executions created by this launch plan spec.
 * Use either of these roles when they have permissions required by your workflow execution.
 * Deprecated.
 *
 * @generated from message flyteidl.admin.Auth
 * @deprecated
 */
export const Auth = proto3.makeMessageType(
  "flyteidl.admin.Auth",
  () => [
    { no: 1, name: "assumable_iam_role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kubernetes_service_account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * User-provided launch plan definition and configuration values.
 *
 * @generated from message flyteidl.admin.LaunchPlanSpec
 */
export const LaunchPlanSpec = proto3.makeMessageType(
  "flyteidl.admin.LaunchPlanSpec",
  () => [
    { no: 1, name: "workflow_id", kind: "message", T: Identifier },
    { no: 2, name: "entity_metadata", kind: "message", T: LaunchPlanMetadata },
    { no: 3, name: "default_inputs", kind: "message", T: ParameterMap },
    { no: 4, name: "fixed_inputs", kind: "message", T: LiteralMap },
    { no: 5, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "labels", kind: "message", T: Labels },
    { no: 7, name: "annotations", kind: "message", T: Annotations },
    { no: 8, name: "auth", kind: "message", T: Auth },
    { no: 9, name: "auth_role", kind: "message", T: AuthRole },
    { no: 10, name: "security_context", kind: "message", T: SecurityContext },
    { no: 16, name: "quality_of_service", kind: "message", T: QualityOfService },
    { no: 17, name: "raw_output_data_config", kind: "message", T: RawOutputDataConfig },
    { no: 18, name: "max_parallelism", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 19, name: "interruptible", kind: "message", T: BoolValue },
    { no: 20, name: "overwrite_cache", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 21, name: "envs", kind: "message", T: Envs },
  ],
);

/**
 * Values computed by the flyte platform after launch plan registration.
 * These include expected_inputs required to be present in a CreateExecutionRequest
 * to launch the reference workflow as well timestamp values associated with the launch plan.
 *
 * @generated from message flyteidl.admin.LaunchPlanClosure
 */
export const LaunchPlanClosure = proto3.makeMessageType(
  "flyteidl.admin.LaunchPlanClosure",
  () => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(LaunchPlanState) },
    { no: 2, name: "expected_inputs", kind: "message", T: ParameterMap },
    { no: 3, name: "expected_outputs", kind: "message", T: VariableMap },
    { no: 4, name: "created_at", kind: "message", T: Timestamp },
    { no: 5, name: "updated_at", kind: "message", T: Timestamp },
  ],
);

/**
 * Additional launch plan attributes included in the LaunchPlanSpec not strictly required to launch
 * the reference workflow.
 *
 * @generated from message flyteidl.admin.LaunchPlanMetadata
 */
export const LaunchPlanMetadata = proto3.makeMessageType(
  "flyteidl.admin.LaunchPlanMetadata",
  () => [
    { no: 1, name: "schedule", kind: "message", T: Schedule },
    { no: 2, name: "notifications", kind: "message", T: Notification, repeated: true },
  ],
);

/**
 * Request to set the referenced launch plan state to the configured value.
 * See :ref:`ref_flyteidl.admin.LaunchPlan` for more details
 *
 * @generated from message flyteidl.admin.LaunchPlanUpdateRequest
 */
export const LaunchPlanUpdateRequest = proto3.makeMessageType(
  "flyteidl.admin.LaunchPlanUpdateRequest",
  () => [
    { no: 1, name: "id", kind: "message", T: Identifier },
    { no: 2, name: "state", kind: "enum", T: proto3.getEnumType(LaunchPlanState) },
  ],
);

/**
 * Purposefully empty, may be populated in the future.
 *
 * @generated from message flyteidl.admin.LaunchPlanUpdateResponse
 */
export const LaunchPlanUpdateResponse = proto3.makeMessageType(
  "flyteidl.admin.LaunchPlanUpdateResponse",
  [],
);

/**
 * Represents a request struct for finding an active launch plan for a given NamedEntityIdentifier
 * See :ref:`ref_flyteidl.admin.LaunchPlan` for more details
 *
 * @generated from message flyteidl.admin.ActiveLaunchPlanRequest
 */
export const ActiveLaunchPlanRequest = proto3.makeMessageType(
  "flyteidl.admin.ActiveLaunchPlanRequest",
  () => [
    { no: 1, name: "id", kind: "message", T: NamedEntityIdentifier },
  ],
);

/**
 * Represents a request structure to list active launch plans within a project/domain.
 * See :ref:`ref_flyteidl.admin.LaunchPlan` for more details
 *
 * @generated from message flyteidl.admin.ActiveLaunchPlanListRequest
 */
export const ActiveLaunchPlanListRequest = proto3.makeMessageType(
  "flyteidl.admin.ActiveLaunchPlanListRequest",
  () => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "sort_by", kind: "message", T: Sort },
  ],
);

