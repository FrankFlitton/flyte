// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/admin/event.proto (package flyteidl.admin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { NodeExecutionEvent, TaskExecutionEvent, WorkflowExecutionEvent } from "../event/event_pb.js";

/**
 * Indicates that a sent event was not used to update execution state due to
 * the referenced execution already being terminated (and therefore ineligible
 * for further state transitions).
 *
 * @generated from message flyteidl.admin.EventErrorAlreadyInTerminalState
 */
export declare class EventErrorAlreadyInTerminalState extends Message<EventErrorAlreadyInTerminalState> {
  /**
   * +required
   *
   * @generated from field: string current_phase = 1;
   */
  currentPhase: string;

  constructor(data?: PartialMessage<EventErrorAlreadyInTerminalState>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.EventErrorAlreadyInTerminalState";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventErrorAlreadyInTerminalState;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventErrorAlreadyInTerminalState;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventErrorAlreadyInTerminalState;

  static equals(a: EventErrorAlreadyInTerminalState | PlainMessage<EventErrorAlreadyInTerminalState> | undefined, b: EventErrorAlreadyInTerminalState | PlainMessage<EventErrorAlreadyInTerminalState> | undefined): boolean;
}

/**
 * Indicates an event was rejected because it came from a different cluster than 
 * is on record as running the execution.
 *
 * @generated from message flyteidl.admin.EventErrorIncompatibleCluster
 */
export declare class EventErrorIncompatibleCluster extends Message<EventErrorIncompatibleCluster> {
  /**
   * The cluster which has been recorded as processing the execution.
   * +required
   *
   * @generated from field: string cluster = 1;
   */
  cluster: string;

  constructor(data?: PartialMessage<EventErrorIncompatibleCluster>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.EventErrorIncompatibleCluster";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventErrorIncompatibleCluster;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventErrorIncompatibleCluster;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventErrorIncompatibleCluster;

  static equals(a: EventErrorIncompatibleCluster | PlainMessage<EventErrorIncompatibleCluster> | undefined, b: EventErrorIncompatibleCluster | PlainMessage<EventErrorIncompatibleCluster> | undefined): boolean;
}

/**
 * Indicates why a sent event was not used to update execution.
 *
 * @generated from message flyteidl.admin.EventFailureReason
 */
export declare class EventFailureReason extends Message<EventFailureReason> {
  /**
   * +required
   *
   * @generated from oneof flyteidl.admin.EventFailureReason.reason
   */
  reason: {
    /**
     * @generated from field: flyteidl.admin.EventErrorAlreadyInTerminalState already_in_terminal_state = 1;
     */
    value: EventErrorAlreadyInTerminalState;
    case: "alreadyInTerminalState";
  } | {
    /**
     * @generated from field: flyteidl.admin.EventErrorIncompatibleCluster incompatible_cluster = 2;
     */
    value: EventErrorIncompatibleCluster;
    case: "incompatibleCluster";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<EventFailureReason>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.EventFailureReason";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventFailureReason;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventFailureReason;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventFailureReason;

  static equals(a: EventFailureReason | PlainMessage<EventFailureReason> | undefined, b: EventFailureReason | PlainMessage<EventFailureReason> | undefined): boolean;
}

/**
 * Request to send a notification that a workflow execution event has occurred.
 *
 * @generated from message flyteidl.admin.WorkflowExecutionEventRequest
 */
export declare class WorkflowExecutionEventRequest extends Message<WorkflowExecutionEventRequest> {
  /**
   * Unique ID for this request that can be traced between services
   *
   * @generated from field: string request_id = 1;
   */
  requestId: string;

  /**
   * Details about the event that occurred.
   *
   * @generated from field: flyteidl.event.WorkflowExecutionEvent event = 2;
   */
  event?: WorkflowExecutionEvent;

  constructor(data?: PartialMessage<WorkflowExecutionEventRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.WorkflowExecutionEventRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowExecutionEventRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowExecutionEventRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowExecutionEventRequest;

  static equals(a: WorkflowExecutionEventRequest | PlainMessage<WorkflowExecutionEventRequest> | undefined, b: WorkflowExecutionEventRequest | PlainMessage<WorkflowExecutionEventRequest> | undefined): boolean;
}

/**
 * Purposefully empty, may be populated in the future.
 *
 * @generated from message flyteidl.admin.WorkflowExecutionEventResponse
 */
export declare class WorkflowExecutionEventResponse extends Message<WorkflowExecutionEventResponse> {
  constructor(data?: PartialMessage<WorkflowExecutionEventResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.WorkflowExecutionEventResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowExecutionEventResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowExecutionEventResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowExecutionEventResponse;

  static equals(a: WorkflowExecutionEventResponse | PlainMessage<WorkflowExecutionEventResponse> | undefined, b: WorkflowExecutionEventResponse | PlainMessage<WorkflowExecutionEventResponse> | undefined): boolean;
}

/**
 * Request to send a notification that a node execution event has occurred.
 *
 * @generated from message flyteidl.admin.NodeExecutionEventRequest
 */
export declare class NodeExecutionEventRequest extends Message<NodeExecutionEventRequest> {
  /**
   * Unique ID for this request that can be traced between services
   *
   * @generated from field: string request_id = 1;
   */
  requestId: string;

  /**
   * Details about the event that occurred.
   *
   * @generated from field: flyteidl.event.NodeExecutionEvent event = 2;
   */
  event?: NodeExecutionEvent;

  constructor(data?: PartialMessage<NodeExecutionEventRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.NodeExecutionEventRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeExecutionEventRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeExecutionEventRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeExecutionEventRequest;

  static equals(a: NodeExecutionEventRequest | PlainMessage<NodeExecutionEventRequest> | undefined, b: NodeExecutionEventRequest | PlainMessage<NodeExecutionEventRequest> | undefined): boolean;
}

/**
 * Purposefully empty, may be populated in the future.
 *
 * @generated from message flyteidl.admin.NodeExecutionEventResponse
 */
export declare class NodeExecutionEventResponse extends Message<NodeExecutionEventResponse> {
  constructor(data?: PartialMessage<NodeExecutionEventResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.NodeExecutionEventResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeExecutionEventResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeExecutionEventResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeExecutionEventResponse;

  static equals(a: NodeExecutionEventResponse | PlainMessage<NodeExecutionEventResponse> | undefined, b: NodeExecutionEventResponse | PlainMessage<NodeExecutionEventResponse> | undefined): boolean;
}

/**
 * Request to send a notification that a task execution event has occurred.
 *
 * @generated from message flyteidl.admin.TaskExecutionEventRequest
 */
export declare class TaskExecutionEventRequest extends Message<TaskExecutionEventRequest> {
  /**
   * Unique ID for this request that can be traced between services
   *
   * @generated from field: string request_id = 1;
   */
  requestId: string;

  /**
   * Details about the event that occurred.
   *
   * @generated from field: flyteidl.event.TaskExecutionEvent event = 2;
   */
  event?: TaskExecutionEvent;

  constructor(data?: PartialMessage<TaskExecutionEventRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.TaskExecutionEventRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskExecutionEventRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskExecutionEventRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskExecutionEventRequest;

  static equals(a: TaskExecutionEventRequest | PlainMessage<TaskExecutionEventRequest> | undefined, b: TaskExecutionEventRequest | PlainMessage<TaskExecutionEventRequest> | undefined): boolean;
}

/**
 * Purposefully empty, may be populated in the future.
 *
 * @generated from message flyteidl.admin.TaskExecutionEventResponse
 */
export declare class TaskExecutionEventResponse extends Message<TaskExecutionEventResponse> {
  constructor(data?: PartialMessage<TaskExecutionEventResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.admin.TaskExecutionEventResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskExecutionEventResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskExecutionEventResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskExecutionEventResponse;

  static equals(a: TaskExecutionEventResponse | PlainMessage<TaskExecutionEventResponse> | undefined, b: TaskExecutionEventResponse | PlainMessage<TaskExecutionEventResponse> | undefined): boolean;
}

