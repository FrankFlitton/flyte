// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/admin/task_execution.proto (package flyteidl.admin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Duration, proto3, Struct, Timestamp } from "@bufbuild/protobuf";
import { NodeExecutionIdentifier, TaskExecutionIdentifier } from "../core/identifier_pb.js";
import { FlyteURLs, Sort, UrlBlob } from "./common_pb.js";
import { ExecutionError, TaskExecution_Phase, TaskLog } from "../core/execution_pb.js";
import { LiteralMap } from "../core/literals_pb.js";
import { TaskExecutionMetadata } from "../event/event_pb.js";

/**
 * A message used to fetch a single task execution entity.
 * See :ref:`ref_flyteidl.admin.TaskExecution` for more details
 *
 * @generated from message flyteidl.admin.TaskExecutionGetRequest
 */
export const TaskExecutionGetRequest = proto3.makeMessageType(
  "flyteidl.admin.TaskExecutionGetRequest",
  () => [
    { no: 1, name: "id", kind: "message", T: TaskExecutionIdentifier },
  ],
);

/**
 * Represents a request structure to retrieve a list of task execution entities yielded by a specific node execution.
 * See :ref:`ref_flyteidl.admin.TaskExecution` for more details
 *
 * @generated from message flyteidl.admin.TaskExecutionListRequest
 */
export const TaskExecutionListRequest = proto3.makeMessageType(
  "flyteidl.admin.TaskExecutionListRequest",
  () => [
    { no: 1, name: "node_execution_id", kind: "message", T: NodeExecutionIdentifier },
    { no: 2, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "filters", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "sort_by", kind: "message", T: Sort },
  ],
);

/**
 * Encapsulates all details for a single task execution entity.
 * A task execution represents an instantiated task, including all inputs and additional
 * metadata as well as computed results included state, outputs, and duration-based attributes.
 *
 * @generated from message flyteidl.admin.TaskExecution
 */
export const TaskExecution = proto3.makeMessageType(
  "flyteidl.admin.TaskExecution",
  () => [
    { no: 1, name: "id", kind: "message", T: TaskExecutionIdentifier },
    { no: 2, name: "input_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "closure", kind: "message", T: TaskExecutionClosure },
    { no: 4, name: "is_parent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * Response structure for a query to list of task execution entities.
 * See :ref:`ref_flyteidl.admin.TaskExecution` for more details
 *
 * @generated from message flyteidl.admin.TaskExecutionList
 */
export const TaskExecutionList = proto3.makeMessageType(
  "flyteidl.admin.TaskExecutionList",
  () => [
    { no: 1, name: "task_executions", kind: "message", T: TaskExecution, repeated: true },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Container for task execution details and results.
 *
 * @generated from message flyteidl.admin.TaskExecutionClosure
 */
export const TaskExecutionClosure = proto3.makeMessageType(
  "flyteidl.admin.TaskExecutionClosure",
  () => [
    { no: 1, name: "output_uri", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "output_result" },
    { no: 2, name: "error", kind: "message", T: ExecutionError, oneof: "output_result" },
    { no: 12, name: "output_data", kind: "message", T: LiteralMap, oneof: "output_result" },
    { no: 3, name: "phase", kind: "enum", T: proto3.getEnumType(TaskExecution_Phase) },
    { no: 4, name: "logs", kind: "message", T: TaskLog, repeated: true },
    { no: 5, name: "started_at", kind: "message", T: Timestamp },
    { no: 6, name: "duration", kind: "message", T: Duration },
    { no: 7, name: "created_at", kind: "message", T: Timestamp },
    { no: 8, name: "updated_at", kind: "message", T: Timestamp },
    { no: 9, name: "custom_info", kind: "message", T: Struct },
    { no: 10, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "task_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "metadata", kind: "message", T: TaskExecutionMetadata },
    { no: 17, name: "event_version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 18, name: "reasons", kind: "message", T: Reason, repeated: true },
  ],
);

/**
 * Reason is a single message annotated with a timestamp to indicate the instant the reason occurred.
 *
 * @generated from message flyteidl.admin.Reason
 */
export const Reason = proto3.makeMessageType(
  "flyteidl.admin.Reason",
  () => [
    { no: 1, name: "occurred_at", kind: "message", T: Timestamp },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Request structure to fetch inputs and output for a task execution.
 * By default this data is not returned inline in :ref:`ref_flyteidl.admin.TaskExecutionGetRequest`
 *
 * @generated from message flyteidl.admin.TaskExecutionGetDataRequest
 */
export const TaskExecutionGetDataRequest = proto3.makeMessageType(
  "flyteidl.admin.TaskExecutionGetDataRequest",
  () => [
    { no: 1, name: "id", kind: "message", T: TaskExecutionIdentifier },
  ],
);

/**
 * Response structure for TaskExecutionGetDataRequest which contains inputs and outputs for a task execution.
 *
 * @generated from message flyteidl.admin.TaskExecutionGetDataResponse
 */
export const TaskExecutionGetDataResponse = proto3.makeMessageType(
  "flyteidl.admin.TaskExecutionGetDataResponse",
  () => [
    { no: 1, name: "inputs", kind: "message", T: UrlBlob },
    { no: 2, name: "outputs", kind: "message", T: UrlBlob },
    { no: 3, name: "full_inputs", kind: "message", T: LiteralMap },
    { no: 4, name: "full_outputs", kind: "message", T: LiteralMap },
    { no: 5, name: "flyte_urls", kind: "message", T: FlyteURLs },
  ],
);

