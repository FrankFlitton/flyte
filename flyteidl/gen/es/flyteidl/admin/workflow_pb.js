// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/admin/workflow.proto (package flyteidl.admin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3, Timestamp } from "@bufbuild/protobuf";
import { Identifier } from "../core/identifier_pb.js";
import { WorkflowTemplate } from "../core/workflow_pb.js";
import { DescriptionEntity } from "./description_entity_pb.js";
import { CompiledWorkflowClosure } from "../core/compiler_pb.js";

/**
 * Represents a request structure to create a revision of a workflow.
 * See :ref:`ref_flyteidl.admin.Workflow` for more details
 *
 * @generated from message flyteidl.admin.WorkflowCreateRequest
 */
export const WorkflowCreateRequest = proto3.makeMessageType(
  "flyteidl.admin.WorkflowCreateRequest",
  () => [
    { no: 1, name: "id", kind: "message", T: Identifier },
    { no: 2, name: "spec", kind: "message", T: WorkflowSpec },
  ],
);

/**
 * Purposefully empty, may be populated in the future. 
 *
 * @generated from message flyteidl.admin.WorkflowCreateResponse
 */
export const WorkflowCreateResponse = proto3.makeMessageType(
  "flyteidl.admin.WorkflowCreateResponse",
  [],
);

/**
 * Represents the workflow structure stored in the Admin
 * A workflow is created by ordering tasks and associating outputs to inputs
 * in order to produce a directed-acyclic execution graph.
 *
 * @generated from message flyteidl.admin.Workflow
 */
export const Workflow = proto3.makeMessageType(
  "flyteidl.admin.Workflow",
  () => [
    { no: 1, name: "id", kind: "message", T: Identifier },
    { no: 2, name: "closure", kind: "message", T: WorkflowClosure },
    { no: 3, name: "short_description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Represents a list of workflows returned from the admin.
 * See :ref:`ref_flyteidl.admin.Workflow` for more details
 *
 * @generated from message flyteidl.admin.WorkflowList
 */
export const WorkflowList = proto3.makeMessageType(
  "flyteidl.admin.WorkflowList",
  () => [
    { no: 1, name: "workflows", kind: "message", T: Workflow, repeated: true },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Represents a structure that encapsulates the specification of the workflow.
 *
 * @generated from message flyteidl.admin.WorkflowSpec
 */
export const WorkflowSpec = proto3.makeMessageType(
  "flyteidl.admin.WorkflowSpec",
  () => [
    { no: 1, name: "template", kind: "message", T: WorkflowTemplate },
    { no: 2, name: "sub_workflows", kind: "message", T: WorkflowTemplate, repeated: true },
    { no: 3, name: "description", kind: "message", T: DescriptionEntity },
  ],
);

/**
 * A container holding the compiled workflow produced from the WorkflowSpec and additional metadata.
 *
 * @generated from message flyteidl.admin.WorkflowClosure
 */
export const WorkflowClosure = proto3.makeMessageType(
  "flyteidl.admin.WorkflowClosure",
  () => [
    { no: 1, name: "compiled_workflow", kind: "message", T: CompiledWorkflowClosure },
    { no: 2, name: "created_at", kind: "message", T: Timestamp },
  ],
);

/**
 * The workflow id is already used and the structure is different
 *
 * @generated from message flyteidl.admin.WorkflowErrorExistsDifferentStructure
 */
export const WorkflowErrorExistsDifferentStructure = proto3.makeMessageType(
  "flyteidl.admin.WorkflowErrorExistsDifferentStructure",
  () => [
    { no: 1, name: "id", kind: "message", T: Identifier },
  ],
);

/**
 * The workflow id is already used with an identical sctructure
 *
 * @generated from message flyteidl.admin.WorkflowErrorExistsIdenticalStructure
 */
export const WorkflowErrorExistsIdenticalStructure = proto3.makeMessageType(
  "flyteidl.admin.WorkflowErrorExistsIdenticalStructure",
  () => [
    { no: 1, name: "id", kind: "message", T: Identifier },
  ],
);

/**
 * When a CreateWorkflowRequest fails due to matching id
 *
 * @generated from message flyteidl.admin.CreateWorkflowFailureReason
 */
export const CreateWorkflowFailureReason = proto3.makeMessageType(
  "flyteidl.admin.CreateWorkflowFailureReason",
  () => [
    { no: 1, name: "exists_different_structure", kind: "message", T: WorkflowErrorExistsDifferentStructure, oneof: "reason" },
    { no: 2, name: "exists_identical_structure", kind: "message", T: WorkflowErrorExistsIdenticalStructure, oneof: "reason" },
  ],
);

