// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/event/event.proto (package flyteidl.event, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3, Struct, Timestamp } from "@bufbuild/protobuf";
import { Identifier, NodeExecutionIdentifier, TaskExecutionIdentifier, WorkflowExecutionIdentifier } from "../core/identifier_pb.js";
import { ExecutionError, NodeExecution_Phase, TaskExecution_Phase, TaskLog, WorkflowExecution_Phase } from "../core/execution_pb.js";
import { LiteralMap } from "../core/literals_pb.js";
import { CatalogCacheStatus, CatalogMetadata, CatalogReservation_Status } from "../core/catalog_pb.js";
import { CompiledWorkflowClosure } from "../core/compiler_pb.js";

/**
 * @generated from message flyteidl.event.WorkflowExecutionEvent
 */
export const WorkflowExecutionEvent = proto3.makeMessageType(
  "flyteidl.event.WorkflowExecutionEvent",
  () => [
    { no: 1, name: "execution_id", kind: "message", T: WorkflowExecutionIdentifier },
    { no: 2, name: "producer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "phase", kind: "enum", T: proto3.getEnumType(WorkflowExecution_Phase) },
    { no: 4, name: "occurred_at", kind: "message", T: Timestamp },
    { no: 5, name: "output_uri", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "output_result" },
    { no: 6, name: "error", kind: "message", T: ExecutionError, oneof: "output_result" },
    { no: 7, name: "output_data", kind: "message", T: LiteralMap, oneof: "output_result" },
  ],
);

/**
 * @generated from message flyteidl.event.NodeExecutionEvent
 */
export const NodeExecutionEvent = proto3.makeMessageType(
  "flyteidl.event.NodeExecutionEvent",
  () => [
    { no: 1, name: "id", kind: "message", T: NodeExecutionIdentifier },
    { no: 2, name: "producer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "phase", kind: "enum", T: proto3.getEnumType(NodeExecution_Phase) },
    { no: 4, name: "occurred_at", kind: "message", T: Timestamp },
    { no: 5, name: "input_uri", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "input_value" },
    { no: 20, name: "input_data", kind: "message", T: LiteralMap, oneof: "input_value" },
    { no: 6, name: "output_uri", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "output_result" },
    { no: 7, name: "error", kind: "message", T: ExecutionError, oneof: "output_result" },
    { no: 15, name: "output_data", kind: "message", T: LiteralMap, oneof: "output_result" },
    { no: 8, name: "workflow_node_metadata", kind: "message", T: WorkflowNodeMetadata, oneof: "target_metadata" },
    { no: 14, name: "task_node_metadata", kind: "message", T: TaskNodeMetadata, oneof: "target_metadata" },
    { no: 9, name: "parent_task_metadata", kind: "message", T: ParentTaskExecutionMetadata },
    { no: 10, name: "parent_node_metadata", kind: "message", T: ParentNodeExecutionMetadata },
    { no: 11, name: "retry_group", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "spec_node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "node_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "event_version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 17, name: "is_parent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 18, name: "is_dynamic", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 19, name: "deck_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "reported_at", kind: "message", T: Timestamp },
    { no: 22, name: "is_array", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * For Workflow Nodes we need to send information about the workflow that's launched
 *
 * @generated from message flyteidl.event.WorkflowNodeMetadata
 */
export const WorkflowNodeMetadata = proto3.makeMessageType(
  "flyteidl.event.WorkflowNodeMetadata",
  () => [
    { no: 1, name: "execution_id", kind: "message", T: WorkflowExecutionIdentifier },
  ],
);

/**
 * @generated from message flyteidl.event.TaskNodeMetadata
 */
export const TaskNodeMetadata = proto3.makeMessageType(
  "flyteidl.event.TaskNodeMetadata",
  () => [
    { no: 1, name: "cache_status", kind: "enum", T: proto3.getEnumType(CatalogCacheStatus) },
    { no: 2, name: "catalog_key", kind: "message", T: CatalogMetadata },
    { no: 3, name: "reservation_status", kind: "enum", T: proto3.getEnumType(CatalogReservation_Status) },
    { no: 4, name: "checkpoint_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "dynamic_workflow", kind: "message", T: DynamicWorkflowNodeMetadata },
  ],
);

/**
 * For dynamic workflow nodes we send information about the dynamic workflow definition that gets generated.
 *
 * @generated from message flyteidl.event.DynamicWorkflowNodeMetadata
 */
export const DynamicWorkflowNodeMetadata = proto3.makeMessageType(
  "flyteidl.event.DynamicWorkflowNodeMetadata",
  () => [
    { no: 1, name: "id", kind: "message", T: Identifier },
    { no: 2, name: "compiled_workflow", kind: "message", T: CompiledWorkflowClosure },
    { no: 3, name: "dynamic_job_spec_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message flyteidl.event.ParentTaskExecutionMetadata
 */
export const ParentTaskExecutionMetadata = proto3.makeMessageType(
  "flyteidl.event.ParentTaskExecutionMetadata",
  () => [
    { no: 1, name: "id", kind: "message", T: TaskExecutionIdentifier },
  ],
);

/**
 * @generated from message flyteidl.event.ParentNodeExecutionMetadata
 */
export const ParentNodeExecutionMetadata = proto3.makeMessageType(
  "flyteidl.event.ParentNodeExecutionMetadata",
  () => [
    { no: 1, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message flyteidl.event.EventReason
 */
export const EventReason = proto3.makeMessageType(
  "flyteidl.event.EventReason",
  () => [
    { no: 1, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "occurred_at", kind: "message", T: Timestamp },
  ],
);

/**
 * Plugin specific execution event information. For tasks like Python, Hive, Spark, DynamicJob.
 *
 * @generated from message flyteidl.event.TaskExecutionEvent
 */
export const TaskExecutionEvent = proto3.makeMessageType(
  "flyteidl.event.TaskExecutionEvent",
  () => [
    { no: 1, name: "task_id", kind: "message", T: Identifier },
    { no: 2, name: "parent_node_execution_id", kind: "message", T: NodeExecutionIdentifier },
    { no: 3, name: "retry_attempt", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "phase", kind: "enum", T: proto3.getEnumType(TaskExecution_Phase) },
    { no: 5, name: "producer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "logs", kind: "message", T: TaskLog, repeated: true },
    { no: 7, name: "occurred_at", kind: "message", T: Timestamp },
    { no: 8, name: "input_uri", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "input_value" },
    { no: 19, name: "input_data", kind: "message", T: LiteralMap, oneof: "input_value" },
    { no: 9, name: "output_uri", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "output_result" },
    { no: 10, name: "error", kind: "message", T: ExecutionError, oneof: "output_result" },
    { no: 17, name: "output_data", kind: "message", T: LiteralMap, oneof: "output_result" },
    { no: 11, name: "custom_info", kind: "message", T: Struct },
    { no: 12, name: "phase_version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 13, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "reasons", kind: "message", T: EventReason, repeated: true },
    { no: 14, name: "task_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "metadata", kind: "message", T: TaskExecutionMetadata },
    { no: 18, name: "event_version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 20, name: "reported_at", kind: "message", T: Timestamp },
  ],
);

/**
 * This message contains metadata about external resources produced or used by a specific task execution.
 *
 * @generated from message flyteidl.event.ExternalResourceInfo
 */
export const ExternalResourceInfo = proto3.makeMessageType(
  "flyteidl.event.ExternalResourceInfo",
  () => [
    { no: 1, name: "external_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "retry_attempt", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "phase", kind: "enum", T: proto3.getEnumType(TaskExecution_Phase) },
    { no: 5, name: "cache_status", kind: "enum", T: proto3.getEnumType(CatalogCacheStatus) },
    { no: 6, name: "logs", kind: "message", T: TaskLog, repeated: true },
  ],
);

/**
 * This message holds task execution metadata specific to resource allocation used to manage concurrent
 * executions for a project namespace.
 *
 * @generated from message flyteidl.event.ResourcePoolInfo
 */
export const ResourcePoolInfo = proto3.makeMessageType(
  "flyteidl.event.ResourcePoolInfo",
  () => [
    { no: 1, name: "allocation_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Holds metadata around how a task was executed.
 * As a task transitions across event phases during execution some attributes, such its generated name, generated external resources,
 * and more may grow in size but not change necessarily based on the phase transition that sparked the event update.
 * Metadata is a container for these attributes across the task execution lifecycle.
 *
 * @generated from message flyteidl.event.TaskExecutionMetadata
 */
export const TaskExecutionMetadata = proto3.makeMessageType(
  "flyteidl.event.TaskExecutionMetadata",
  () => [
    { no: 1, name: "generated_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "external_resources", kind: "message", T: ExternalResourceInfo, repeated: true },
    { no: 3, name: "resource_pool_info", kind: "message", T: ResourcePoolInfo, repeated: true },
    { no: 4, name: "plugin_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "instance_class", kind: "enum", T: proto3.getEnumType(TaskExecutionMetadata_InstanceClass) },
  ],
);

/**
 * Includes the broad category of machine used for this specific task execution.
 *
 * @generated from enum flyteidl.event.TaskExecutionMetadata.InstanceClass
 */
export const TaskExecutionMetadata_InstanceClass = proto3.makeEnum(
  "flyteidl.event.TaskExecutionMetadata.InstanceClass",
  [
    {no: 0, name: "DEFAULT"},
    {no: 1, name: "INTERRUPTIBLE"},
  ],
);

