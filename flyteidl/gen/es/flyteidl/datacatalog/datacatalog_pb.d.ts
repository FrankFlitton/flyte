// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/datacatalog/datacatalog.proto (package datacatalog, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Literal } from "../core/literals_pb.js";

/**
 *
 * Request message for creating a Dataset.
 *
 * @generated from message datacatalog.CreateDatasetRequest
 */
export declare class CreateDatasetRequest extends Message<CreateDatasetRequest> {
  /**
   * @generated from field: datacatalog.Dataset dataset = 1;
   */
  dataset?: Dataset;

  constructor(data?: PartialMessage<CreateDatasetRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.CreateDatasetRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDatasetRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDatasetRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDatasetRequest;

  static equals(a: CreateDatasetRequest | PlainMessage<CreateDatasetRequest> | undefined, b: CreateDatasetRequest | PlainMessage<CreateDatasetRequest> | undefined): boolean;
}

/**
 *
 * Response message for creating a Dataset
 *
 * @generated from message datacatalog.CreateDatasetResponse
 */
export declare class CreateDatasetResponse extends Message<CreateDatasetResponse> {
  constructor(data?: PartialMessage<CreateDatasetResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.CreateDatasetResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDatasetResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDatasetResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDatasetResponse;

  static equals(a: CreateDatasetResponse | PlainMessage<CreateDatasetResponse> | undefined, b: CreateDatasetResponse | PlainMessage<CreateDatasetResponse> | undefined): boolean;
}

/**
 *
 * Request message for retrieving a Dataset. The Dataset is retrieved by it's unique identifier
 * which is a combination of several fields.
 *
 * @generated from message datacatalog.GetDatasetRequest
 */
export declare class GetDatasetRequest extends Message<GetDatasetRequest> {
  /**
   * @generated from field: datacatalog.DatasetID dataset = 1;
   */
  dataset?: DatasetID;

  constructor(data?: PartialMessage<GetDatasetRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.GetDatasetRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDatasetRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDatasetRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDatasetRequest;

  static equals(a: GetDatasetRequest | PlainMessage<GetDatasetRequest> | undefined, b: GetDatasetRequest | PlainMessage<GetDatasetRequest> | undefined): boolean;
}

/**
 *
 * Response message for retrieving a Dataset. The response will include the metadata for the
 * Dataset.
 *
 * @generated from message datacatalog.GetDatasetResponse
 */
export declare class GetDatasetResponse extends Message<GetDatasetResponse> {
  /**
   * @generated from field: datacatalog.Dataset dataset = 1;
   */
  dataset?: Dataset;

  constructor(data?: PartialMessage<GetDatasetResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.GetDatasetResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDatasetResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDatasetResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDatasetResponse;

  static equals(a: GetDatasetResponse | PlainMessage<GetDatasetResponse> | undefined, b: GetDatasetResponse | PlainMessage<GetDatasetResponse> | undefined): boolean;
}

/**
 *
 * Request message for retrieving an Artifact. Retrieve an artifact based on a query handle that
 * can be one of artifact_id or tag. The result returned will include the artifact data and metadata
 * associated with the artifact.
 *
 * @generated from message datacatalog.GetArtifactRequest
 */
export declare class GetArtifactRequest extends Message<GetArtifactRequest> {
  /**
   * @generated from field: datacatalog.DatasetID dataset = 1;
   */
  dataset?: DatasetID;

  /**
   * @generated from oneof datacatalog.GetArtifactRequest.query_handle
   */
  queryHandle: {
    /**
     * @generated from field: string artifact_id = 2;
     */
    value: string;
    case: "artifactId";
  } | {
    /**
     * @generated from field: string tag_name = 3;
     */
    value: string;
    case: "tagName";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<GetArtifactRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.GetArtifactRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetArtifactRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetArtifactRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetArtifactRequest;

  static equals(a: GetArtifactRequest | PlainMessage<GetArtifactRequest> | undefined, b: GetArtifactRequest | PlainMessage<GetArtifactRequest> | undefined): boolean;
}

/**
 *
 * Response message for retrieving an Artifact. The result returned will include the artifact data
 * and metadata associated with the artifact.
 *
 * @generated from message datacatalog.GetArtifactResponse
 */
export declare class GetArtifactResponse extends Message<GetArtifactResponse> {
  /**
   * @generated from field: datacatalog.Artifact artifact = 1;
   */
  artifact?: Artifact;

  constructor(data?: PartialMessage<GetArtifactResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.GetArtifactResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetArtifactResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetArtifactResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetArtifactResponse;

  static equals(a: GetArtifactResponse | PlainMessage<GetArtifactResponse> | undefined, b: GetArtifactResponse | PlainMessage<GetArtifactResponse> | undefined): boolean;
}

/**
 *
 * Request message for creating an Artifact and its associated artifact Data.
 *
 * @generated from message datacatalog.CreateArtifactRequest
 */
export declare class CreateArtifactRequest extends Message<CreateArtifactRequest> {
  /**
   * @generated from field: datacatalog.Artifact artifact = 1;
   */
  artifact?: Artifact;

  constructor(data?: PartialMessage<CreateArtifactRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.CreateArtifactRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateArtifactRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateArtifactRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateArtifactRequest;

  static equals(a: CreateArtifactRequest | PlainMessage<CreateArtifactRequest> | undefined, b: CreateArtifactRequest | PlainMessage<CreateArtifactRequest> | undefined): boolean;
}

/**
 *
 * Response message for creating an Artifact.
 *
 * @generated from message datacatalog.CreateArtifactResponse
 */
export declare class CreateArtifactResponse extends Message<CreateArtifactResponse> {
  constructor(data?: PartialMessage<CreateArtifactResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.CreateArtifactResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateArtifactResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateArtifactResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateArtifactResponse;

  static equals(a: CreateArtifactResponse | PlainMessage<CreateArtifactResponse> | undefined, b: CreateArtifactResponse | PlainMessage<CreateArtifactResponse> | undefined): boolean;
}

/**
 *
 * Request message for tagging an Artifact.
 *
 * @generated from message datacatalog.AddTagRequest
 */
export declare class AddTagRequest extends Message<AddTagRequest> {
  /**
   * @generated from field: datacatalog.Tag tag = 1;
   */
  tag?: Tag;

  constructor(data?: PartialMessage<AddTagRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.AddTagRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddTagRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddTagRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddTagRequest;

  static equals(a: AddTagRequest | PlainMessage<AddTagRequest> | undefined, b: AddTagRequest | PlainMessage<AddTagRequest> | undefined): boolean;
}

/**
 *
 * Response message for tagging an Artifact.
 *
 * @generated from message datacatalog.AddTagResponse
 */
export declare class AddTagResponse extends Message<AddTagResponse> {
  constructor(data?: PartialMessage<AddTagResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.AddTagResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddTagResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddTagResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddTagResponse;

  static equals(a: AddTagResponse | PlainMessage<AddTagResponse> | undefined, b: AddTagResponse | PlainMessage<AddTagResponse> | undefined): boolean;
}

/**
 * List the artifacts that belong to the Dataset, optionally filtered using filtered expression.
 *
 * @generated from message datacatalog.ListArtifactsRequest
 */
export declare class ListArtifactsRequest extends Message<ListArtifactsRequest> {
  /**
   * Use a datasetID for which you want to retrieve the artifacts
   *
   * @generated from field: datacatalog.DatasetID dataset = 1;
   */
  dataset?: DatasetID;

  /**
   * Apply the filter expression to this query
   *
   * @generated from field: datacatalog.FilterExpression filter = 2;
   */
  filter?: FilterExpression;

  /**
   * Pagination options to get a page of artifacts
   *
   * @generated from field: datacatalog.PaginationOptions pagination = 3;
   */
  pagination?: PaginationOptions;

  constructor(data?: PartialMessage<ListArtifactsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.ListArtifactsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListArtifactsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListArtifactsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListArtifactsRequest;

  static equals(a: ListArtifactsRequest | PlainMessage<ListArtifactsRequest> | undefined, b: ListArtifactsRequest | PlainMessage<ListArtifactsRequest> | undefined): boolean;
}

/**
 * Response to list artifacts
 *
 * @generated from message datacatalog.ListArtifactsResponse
 */
export declare class ListArtifactsResponse extends Message<ListArtifactsResponse> {
  /**
   * The list of artifacts
   *
   * @generated from field: repeated datacatalog.Artifact artifacts = 1;
   */
  artifacts: Artifact[];

  /**
   * Token to use to request the next page, pass this into the next requests PaginationOptions
   *
   * @generated from field: string next_token = 2;
   */
  nextToken: string;

  constructor(data?: PartialMessage<ListArtifactsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.ListArtifactsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListArtifactsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListArtifactsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListArtifactsResponse;

  static equals(a: ListArtifactsResponse | PlainMessage<ListArtifactsResponse> | undefined, b: ListArtifactsResponse | PlainMessage<ListArtifactsResponse> | undefined): boolean;
}

/**
 * List the datasets for the given query
 *
 * @generated from message datacatalog.ListDatasetsRequest
 */
export declare class ListDatasetsRequest extends Message<ListDatasetsRequest> {
  /**
   * Apply the filter expression to this query
   *
   * @generated from field: datacatalog.FilterExpression filter = 1;
   */
  filter?: FilterExpression;

  /**
   * Pagination options to get a page of datasets
   *
   * @generated from field: datacatalog.PaginationOptions pagination = 2;
   */
  pagination?: PaginationOptions;

  constructor(data?: PartialMessage<ListDatasetsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.ListDatasetsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDatasetsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDatasetsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDatasetsRequest;

  static equals(a: ListDatasetsRequest | PlainMessage<ListDatasetsRequest> | undefined, b: ListDatasetsRequest | PlainMessage<ListDatasetsRequest> | undefined): boolean;
}

/**
 * List the datasets response with token for next pagination
 *
 * @generated from message datacatalog.ListDatasetsResponse
 */
export declare class ListDatasetsResponse extends Message<ListDatasetsResponse> {
  /**
   * The list of datasets
   *
   * @generated from field: repeated datacatalog.Dataset datasets = 1;
   */
  datasets: Dataset[];

  /**
   * Token to use to request the next page, pass this into the next requests PaginationOptions
   *
   * @generated from field: string next_token = 2;
   */
  nextToken: string;

  constructor(data?: PartialMessage<ListDatasetsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.ListDatasetsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDatasetsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDatasetsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDatasetsResponse;

  static equals(a: ListDatasetsResponse | PlainMessage<ListDatasetsResponse> | undefined, b: ListDatasetsResponse | PlainMessage<ListDatasetsResponse> | undefined): boolean;
}

/**
 *
 * Request message for updating an Artifact and overwriting its associated ArtifactData.
 *
 * @generated from message datacatalog.UpdateArtifactRequest
 */
export declare class UpdateArtifactRequest extends Message<UpdateArtifactRequest> {
  /**
   * ID of dataset the artifact is associated with
   *
   * @generated from field: datacatalog.DatasetID dataset = 1;
   */
  dataset?: DatasetID;

  /**
   * Either ID of artifact or name of tag to retrieve existing artifact from
   *
   * @generated from oneof datacatalog.UpdateArtifactRequest.query_handle
   */
  queryHandle: {
    /**
     * @generated from field: string artifact_id = 2;
     */
    value: string;
    case: "artifactId";
  } | {
    /**
     * @generated from field: string tag_name = 3;
     */
    value: string;
    case: "tagName";
  } | { case: undefined; value?: undefined };

  /**
   * List of data to overwrite stored artifact data with. Must contain ALL data for updated Artifact as any missing
   * ArtifactData entries will be removed from the underlying blob storage and database.
   *
   * @generated from field: repeated datacatalog.ArtifactData data = 4;
   */
  data: ArtifactData[];

  constructor(data?: PartialMessage<UpdateArtifactRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.UpdateArtifactRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateArtifactRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateArtifactRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateArtifactRequest;

  static equals(a: UpdateArtifactRequest | PlainMessage<UpdateArtifactRequest> | undefined, b: UpdateArtifactRequest | PlainMessage<UpdateArtifactRequest> | undefined): boolean;
}

/**
 *
 * Response message for updating an Artifact.
 *
 * @generated from message datacatalog.UpdateArtifactResponse
 */
export declare class UpdateArtifactResponse extends Message<UpdateArtifactResponse> {
  /**
   * The unique ID of the artifact updated
   *
   * @generated from field: string artifact_id = 1;
   */
  artifactId: string;

  constructor(data?: PartialMessage<UpdateArtifactResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.UpdateArtifactResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateArtifactResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateArtifactResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateArtifactResponse;

  static equals(a: UpdateArtifactResponse | PlainMessage<UpdateArtifactResponse> | undefined, b: UpdateArtifactResponse | PlainMessage<UpdateArtifactResponse> | undefined): boolean;
}

/**
 *
 * ReservationID message that is composed of several string fields.
 *
 * @generated from message datacatalog.ReservationID
 */
export declare class ReservationID extends Message<ReservationID> {
  /**
   * The unique ID for the reserved dataset
   *
   * @generated from field: datacatalog.DatasetID dataset_id = 1;
   */
  datasetId?: DatasetID;

  /**
   * The specific artifact tag for the reservation
   *
   * @generated from field: string tag_name = 2;
   */
  tagName: string;

  constructor(data?: PartialMessage<ReservationID>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.ReservationID";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReservationID;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReservationID;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReservationID;

  static equals(a: ReservationID | PlainMessage<ReservationID> | undefined, b: ReservationID | PlainMessage<ReservationID> | undefined): boolean;
}

/**
 * Try to acquire or extend an artifact reservation. If an active reservation exists, retrieve that instance.
 *
 * @generated from message datacatalog.GetOrExtendReservationRequest
 */
export declare class GetOrExtendReservationRequest extends Message<GetOrExtendReservationRequest> {
  /**
   * The unique ID for the reservation
   *
   * @generated from field: datacatalog.ReservationID reservation_id = 1;
   */
  reservationId?: ReservationID;

  /**
   * The unique ID of the owner for the reservation
   *
   * @generated from field: string owner_id = 2;
   */
  ownerId: string;

  /**
   * Requested reservation extension heartbeat interval
   *
   * @generated from field: google.protobuf.Duration heartbeat_interval = 3;
   */
  heartbeatInterval?: Duration;

  constructor(data?: PartialMessage<GetOrExtendReservationRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.GetOrExtendReservationRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrExtendReservationRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrExtendReservationRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrExtendReservationRequest;

  static equals(a: GetOrExtendReservationRequest | PlainMessage<GetOrExtendReservationRequest> | undefined, b: GetOrExtendReservationRequest | PlainMessage<GetOrExtendReservationRequest> | undefined): boolean;
}

/**
 * A reservation including owner, heartbeat interval, expiration timestamp, and various metadata.
 *
 * @generated from message datacatalog.Reservation
 */
export declare class Reservation extends Message<Reservation> {
  /**
   * The unique ID for the reservation
   *
   * @generated from field: datacatalog.ReservationID reservation_id = 1;
   */
  reservationId?: ReservationID;

  /**
   * The unique ID of the owner for the reservation
   *
   * @generated from field: string owner_id = 2;
   */
  ownerId: string;

  /**
   * Recommended heartbeat interval to extend reservation
   *
   * @generated from field: google.protobuf.Duration heartbeat_interval = 3;
   */
  heartbeatInterval?: Duration;

  /**
   * Expiration timestamp of this reservation
   *
   * @generated from field: google.protobuf.Timestamp expires_at = 4;
   */
  expiresAt?: Timestamp;

  /**
   * Free-form metadata associated with the artifact
   *
   * @generated from field: datacatalog.Metadata metadata = 6;
   */
  metadata?: Metadata;

  constructor(data?: PartialMessage<Reservation>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.Reservation";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Reservation;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Reservation;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Reservation;

  static equals(a: Reservation | PlainMessage<Reservation> | undefined, b: Reservation | PlainMessage<Reservation> | undefined): boolean;
}

/**
 * Response including either a newly minted reservation or the existing reservation
 *
 * @generated from message datacatalog.GetOrExtendReservationResponse
 */
export declare class GetOrExtendReservationResponse extends Message<GetOrExtendReservationResponse> {
  /**
   * The reservation to be acquired or extended
   *
   * @generated from field: datacatalog.Reservation reservation = 1;
   */
  reservation?: Reservation;

  constructor(data?: PartialMessage<GetOrExtendReservationResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.GetOrExtendReservationResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrExtendReservationResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrExtendReservationResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrExtendReservationResponse;

  static equals(a: GetOrExtendReservationResponse | PlainMessage<GetOrExtendReservationResponse> | undefined, b: GetOrExtendReservationResponse | PlainMessage<GetOrExtendReservationResponse> | undefined): boolean;
}

/**
 * Request to release reservation
 *
 * @generated from message datacatalog.ReleaseReservationRequest
 */
export declare class ReleaseReservationRequest extends Message<ReleaseReservationRequest> {
  /**
   * The unique ID for the reservation
   *
   * @generated from field: datacatalog.ReservationID reservation_id = 1;
   */
  reservationId?: ReservationID;

  /**
   * The unique ID of the owner for the reservation
   *
   * @generated from field: string owner_id = 2;
   */
  ownerId: string;

  constructor(data?: PartialMessage<ReleaseReservationRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.ReleaseReservationRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReleaseReservationRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReleaseReservationRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReleaseReservationRequest;

  static equals(a: ReleaseReservationRequest | PlainMessage<ReleaseReservationRequest> | undefined, b: ReleaseReservationRequest | PlainMessage<ReleaseReservationRequest> | undefined): boolean;
}

/**
 * Response to release reservation
 *
 * @generated from message datacatalog.ReleaseReservationResponse
 */
export declare class ReleaseReservationResponse extends Message<ReleaseReservationResponse> {
  constructor(data?: PartialMessage<ReleaseReservationResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.ReleaseReservationResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReleaseReservationResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReleaseReservationResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReleaseReservationResponse;

  static equals(a: ReleaseReservationResponse | PlainMessage<ReleaseReservationResponse> | undefined, b: ReleaseReservationResponse | PlainMessage<ReleaseReservationResponse> | undefined): boolean;
}

/**
 *
 * Dataset message. It is uniquely identified by DatasetID.
 *
 * @generated from message datacatalog.Dataset
 */
export declare class Dataset extends Message<Dataset> {
  /**
   * @generated from field: datacatalog.DatasetID id = 1;
   */
  id?: DatasetID;

  /**
   * @generated from field: datacatalog.Metadata metadata = 2;
   */
  metadata?: Metadata;

  /**
   * @generated from field: repeated string partitionKeys = 3;
   */
  partitionKeys: string[];

  constructor(data?: PartialMessage<Dataset>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.Dataset";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Dataset;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Dataset;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Dataset;

  static equals(a: Dataset | PlainMessage<Dataset> | undefined, b: Dataset | PlainMessage<Dataset> | undefined): boolean;
}

/**
 *
 * An artifact could have multiple partitions and each partition can have an arbitrary string key/value pair
 *
 * @generated from message datacatalog.Partition
 */
export declare class Partition extends Message<Partition> {
  /**
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * @generated from field: string value = 2;
   */
  value: string;

  constructor(data?: PartialMessage<Partition>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.Partition";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Partition;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Partition;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Partition;

  static equals(a: Partition | PlainMessage<Partition> | undefined, b: Partition | PlainMessage<Partition> | undefined): boolean;
}

/**
 *
 * DatasetID message that is composed of several string fields.
 *
 * @generated from message datacatalog.DatasetID
 */
export declare class DatasetID extends Message<DatasetID> {
  /**
   * The name of the project
   *
   * @generated from field: string project = 1;
   */
  project: string;

  /**
   * The name of the dataset
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * The domain (eg. environment)
   *
   * @generated from field: string domain = 3;
   */
  domain: string;

  /**
   * Version of the data schema
   *
   * @generated from field: string version = 4;
   */
  version: string;

  /**
   * UUID for the dataset (if set the above fields are optional)
   *
   * @generated from field: string UUID = 5;
   */
  UUID: string;

  constructor(data?: PartialMessage<DatasetID>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.DatasetID";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatasetID;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatasetID;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatasetID;

  static equals(a: DatasetID | PlainMessage<DatasetID> | undefined, b: DatasetID | PlainMessage<DatasetID> | undefined): boolean;
}

/**
 *
 * Artifact message. It is composed of several string fields.
 *
 * @generated from message datacatalog.Artifact
 */
export declare class Artifact extends Message<Artifact> {
  /**
   * The unique ID of the artifact
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The Dataset that the artifact belongs to
   *
   * @generated from field: datacatalog.DatasetID dataset = 2;
   */
  dataset?: DatasetID;

  /**
   * A list of data that is associated with the artifact
   *
   * @generated from field: repeated datacatalog.ArtifactData data = 3;
   */
  data: ArtifactData[];

  /**
   * Free-form metadata associated with the artifact
   *
   * @generated from field: datacatalog.Metadata metadata = 4;
   */
  metadata?: Metadata;

  /**
   * @generated from field: repeated datacatalog.Partition partitions = 5;
   */
  partitions: Partition[];

  /**
   * @generated from field: repeated datacatalog.Tag tags = 6;
   */
  tags: Tag[];

  /**
   * creation timestamp of artifact, autogenerated by service
   *
   * @generated from field: google.protobuf.Timestamp created_at = 7;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<Artifact>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.Artifact";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Artifact;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Artifact;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Artifact;

  static equals(a: Artifact | PlainMessage<Artifact> | undefined, b: Artifact | PlainMessage<Artifact> | undefined): boolean;
}

/**
 *
 * ArtifactData that belongs to an artifact
 *
 * @generated from message datacatalog.ArtifactData
 */
export declare class ArtifactData extends Message<ArtifactData> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: flyteidl.core.Literal value = 2;
   */
  value?: Literal;

  constructor(data?: PartialMessage<ArtifactData>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.ArtifactData";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArtifactData;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArtifactData;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArtifactData;

  static equals(a: ArtifactData | PlainMessage<ArtifactData> | undefined, b: ArtifactData | PlainMessage<ArtifactData> | undefined): boolean;
}

/**
 *
 * Tag message that is unique to a Dataset. It is associated to a single artifact and
 * can be retrieved by name later.
 *
 * @generated from message datacatalog.Tag
 */
export declare class Tag extends Message<Tag> {
  /**
   * Name of tag
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The tagged artifact
   *
   * @generated from field: string artifact_id = 2;
   */
  artifactId: string;

  /**
   * The Dataset that this tag belongs to
   *
   * @generated from field: datacatalog.DatasetID dataset = 3;
   */
  dataset?: DatasetID;

  constructor(data?: PartialMessage<Tag>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.Tag";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tag;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tag;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tag;

  static equals(a: Tag | PlainMessage<Tag> | undefined, b: Tag | PlainMessage<Tag> | undefined): boolean;
}

/**
 *
 * Metadata representation for artifacts and datasets
 *
 * @generated from message datacatalog.Metadata
 */
export declare class Metadata extends Message<Metadata> {
  /**
   * key map is a dictionary of key/val strings that represent metadata
   *
   * @generated from field: map<string, string> key_map = 1;
   */
  keyMap: { [key: string]: string };

  constructor(data?: PartialMessage<Metadata>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.Metadata";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadata;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadata;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadata;

  static equals(a: Metadata | PlainMessage<Metadata> | undefined, b: Metadata | PlainMessage<Metadata> | undefined): boolean;
}

/**
 * Filter expression that is composed of a combination of single filters
 *
 * @generated from message datacatalog.FilterExpression
 */
export declare class FilterExpression extends Message<FilterExpression> {
  /**
   * @generated from field: repeated datacatalog.SinglePropertyFilter filters = 1;
   */
  filters: SinglePropertyFilter[];

  constructor(data?: PartialMessage<FilterExpression>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.FilterExpression";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FilterExpression;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FilterExpression;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FilterExpression;

  static equals(a: FilterExpression | PlainMessage<FilterExpression> | undefined, b: FilterExpression | PlainMessage<FilterExpression> | undefined): boolean;
}

/**
 * A single property to filter on.
 *
 * @generated from message datacatalog.SinglePropertyFilter
 */
export declare class SinglePropertyFilter extends Message<SinglePropertyFilter> {
  /**
   * @generated from oneof datacatalog.SinglePropertyFilter.property_filter
   */
  propertyFilter: {
    /**
     * @generated from field: datacatalog.TagPropertyFilter tag_filter = 1;
     */
    value: TagPropertyFilter;
    case: "tagFilter";
  } | {
    /**
     * @generated from field: datacatalog.PartitionPropertyFilter partition_filter = 2;
     */
    value: PartitionPropertyFilter;
    case: "partitionFilter";
  } | {
    /**
     * @generated from field: datacatalog.ArtifactPropertyFilter artifact_filter = 3;
     */
    value: ArtifactPropertyFilter;
    case: "artifactFilter";
  } | {
    /**
     * @generated from field: datacatalog.DatasetPropertyFilter dataset_filter = 4;
     */
    value: DatasetPropertyFilter;
    case: "datasetFilter";
  } | { case: undefined; value?: undefined };

  /**
   * field 10 in case we add more entities to query
   *
   * @generated from field: datacatalog.SinglePropertyFilter.ComparisonOperator operator = 10;
   */
  operator: SinglePropertyFilter_ComparisonOperator;

  constructor(data?: PartialMessage<SinglePropertyFilter>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.SinglePropertyFilter";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SinglePropertyFilter;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SinglePropertyFilter;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SinglePropertyFilter;

  static equals(a: SinglePropertyFilter | PlainMessage<SinglePropertyFilter> | undefined, b: SinglePropertyFilter | PlainMessage<SinglePropertyFilter> | undefined): boolean;
}

/**
 * as use-cases come up we can add more operators, ex: gte, like, not eq etc.
 *
 * @generated from enum datacatalog.SinglePropertyFilter.ComparisonOperator
 */
export declare enum SinglePropertyFilter_ComparisonOperator {
  /**
   * @generated from enum value: EQUALS = 0;
   */
  EQUALS = 0,
}

/**
 * Artifact properties we can filter by
 *
 * @generated from message datacatalog.ArtifactPropertyFilter
 */
export declare class ArtifactPropertyFilter extends Message<ArtifactPropertyFilter> {
  /**
   * oneof because we can add more properties in the future
   *
   * @generated from oneof datacatalog.ArtifactPropertyFilter.property
   */
  property: {
    /**
     * @generated from field: string artifact_id = 1;
     */
    value: string;
    case: "artifactId";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<ArtifactPropertyFilter>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.ArtifactPropertyFilter";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArtifactPropertyFilter;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArtifactPropertyFilter;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArtifactPropertyFilter;

  static equals(a: ArtifactPropertyFilter | PlainMessage<ArtifactPropertyFilter> | undefined, b: ArtifactPropertyFilter | PlainMessage<ArtifactPropertyFilter> | undefined): boolean;
}

/**
 * Tag properties we can filter by
 *
 * @generated from message datacatalog.TagPropertyFilter
 */
export declare class TagPropertyFilter extends Message<TagPropertyFilter> {
  /**
   * @generated from oneof datacatalog.TagPropertyFilter.property
   */
  property: {
    /**
     * @generated from field: string tag_name = 1;
     */
    value: string;
    case: "tagName";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<TagPropertyFilter>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.TagPropertyFilter";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TagPropertyFilter;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TagPropertyFilter;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TagPropertyFilter;

  static equals(a: TagPropertyFilter | PlainMessage<TagPropertyFilter> | undefined, b: TagPropertyFilter | PlainMessage<TagPropertyFilter> | undefined): boolean;
}

/**
 * Partition properties we can filter by
 *
 * @generated from message datacatalog.PartitionPropertyFilter
 */
export declare class PartitionPropertyFilter extends Message<PartitionPropertyFilter> {
  /**
   * @generated from oneof datacatalog.PartitionPropertyFilter.property
   */
  property: {
    /**
     * @generated from field: datacatalog.KeyValuePair key_val = 1;
     */
    value: KeyValuePair;
    case: "keyVal";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<PartitionPropertyFilter>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.PartitionPropertyFilter";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PartitionPropertyFilter;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PartitionPropertyFilter;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PartitionPropertyFilter;

  static equals(a: PartitionPropertyFilter | PlainMessage<PartitionPropertyFilter> | undefined, b: PartitionPropertyFilter | PlainMessage<PartitionPropertyFilter> | undefined): boolean;
}

/**
 * @generated from message datacatalog.KeyValuePair
 */
export declare class KeyValuePair extends Message<KeyValuePair> {
  /**
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * @generated from field: string value = 2;
   */
  value: string;

  constructor(data?: PartialMessage<KeyValuePair>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.KeyValuePair";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeyValuePair;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeyValuePair;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeyValuePair;

  static equals(a: KeyValuePair | PlainMessage<KeyValuePair> | undefined, b: KeyValuePair | PlainMessage<KeyValuePair> | undefined): boolean;
}

/**
 * Dataset properties we can filter by
 *
 * @generated from message datacatalog.DatasetPropertyFilter
 */
export declare class DatasetPropertyFilter extends Message<DatasetPropertyFilter> {
  /**
   * @generated from oneof datacatalog.DatasetPropertyFilter.property
   */
  property: {
    /**
     * @generated from field: string project = 1;
     */
    value: string;
    case: "project";
  } | {
    /**
     * @generated from field: string name = 2;
     */
    value: string;
    case: "name";
  } | {
    /**
     * @generated from field: string domain = 3;
     */
    value: string;
    case: "domain";
  } | {
    /**
     * @generated from field: string version = 4;
     */
    value: string;
    case: "version";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<DatasetPropertyFilter>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.DatasetPropertyFilter";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatasetPropertyFilter;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatasetPropertyFilter;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatasetPropertyFilter;

  static equals(a: DatasetPropertyFilter | PlainMessage<DatasetPropertyFilter> | undefined, b: DatasetPropertyFilter | PlainMessage<DatasetPropertyFilter> | undefined): boolean;
}

/**
 * Pagination options for making list requests
 *
 * @generated from message datacatalog.PaginationOptions
 */
export declare class PaginationOptions extends Message<PaginationOptions> {
  /**
   * the max number of results to return
   *
   * @generated from field: uint32 limit = 1;
   */
  limit: number;

  /**
   * the token to pass to fetch the next page
   *
   * @generated from field: string token = 2;
   */
  token: string;

  /**
   * the property that we want to sort the results by
   *
   * @generated from field: datacatalog.PaginationOptions.SortKey sortKey = 3;
   */
  sortKey: PaginationOptions_SortKey;

  /**
   * the sort order of the results
   *
   * @generated from field: datacatalog.PaginationOptions.SortOrder sortOrder = 4;
   */
  sortOrder: PaginationOptions_SortOrder;

  constructor(data?: PartialMessage<PaginationOptions>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datacatalog.PaginationOptions";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaginationOptions;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaginationOptions;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaginationOptions;

  static equals(a: PaginationOptions | PlainMessage<PaginationOptions> | undefined, b: PaginationOptions | PlainMessage<PaginationOptions> | undefined): boolean;
}

/**
 * @generated from enum datacatalog.PaginationOptions.SortOrder
 */
export declare enum PaginationOptions_SortOrder {
  /**
   * @generated from enum value: DESCENDING = 0;
   */
  DESCENDING = 0,

  /**
   * @generated from enum value: ASCENDING = 1;
   */
  ASCENDING = 1,
}

/**
 * @generated from enum datacatalog.PaginationOptions.SortKey
 */
export declare enum PaginationOptions_SortKey {
  /**
   * @generated from enum value: CREATION_TIME = 0;
   */
  CREATION_TIME = 0,
}

