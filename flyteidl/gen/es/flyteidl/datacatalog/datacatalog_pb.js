// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/datacatalog/datacatalog.proto (package datacatalog, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Duration, proto3, Timestamp } from "@bufbuild/protobuf";
import { Literal } from "../core/literals_pb.js";

/**
 *
 * Request message for creating a Dataset.
 *
 * @generated from message datacatalog.CreateDatasetRequest
 */
export const CreateDatasetRequest = proto3.makeMessageType(
  "datacatalog.CreateDatasetRequest",
  () => [
    { no: 1, name: "dataset", kind: "message", T: Dataset },
  ],
);

/**
 *
 * Response message for creating a Dataset
 *
 * @generated from message datacatalog.CreateDatasetResponse
 */
export const CreateDatasetResponse = proto3.makeMessageType(
  "datacatalog.CreateDatasetResponse",
  [],
);

/**
 *
 * Request message for retrieving a Dataset. The Dataset is retrieved by it's unique identifier
 * which is a combination of several fields.
 *
 * @generated from message datacatalog.GetDatasetRequest
 */
export const GetDatasetRequest = proto3.makeMessageType(
  "datacatalog.GetDatasetRequest",
  () => [
    { no: 1, name: "dataset", kind: "message", T: DatasetID },
  ],
);

/**
 *
 * Response message for retrieving a Dataset. The response will include the metadata for the
 * Dataset.
 *
 * @generated from message datacatalog.GetDatasetResponse
 */
export const GetDatasetResponse = proto3.makeMessageType(
  "datacatalog.GetDatasetResponse",
  () => [
    { no: 1, name: "dataset", kind: "message", T: Dataset },
  ],
);

/**
 *
 * Request message for retrieving an Artifact. Retrieve an artifact based on a query handle that
 * can be one of artifact_id or tag. The result returned will include the artifact data and metadata
 * associated with the artifact.
 *
 * @generated from message datacatalog.GetArtifactRequest
 */
export const GetArtifactRequest = proto3.makeMessageType(
  "datacatalog.GetArtifactRequest",
  () => [
    { no: 1, name: "dataset", kind: "message", T: DatasetID },
    { no: 2, name: "artifact_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "query_handle" },
    { no: 3, name: "tag_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "query_handle" },
  ],
);

/**
 *
 * Response message for retrieving an Artifact. The result returned will include the artifact data
 * and metadata associated with the artifact.
 *
 * @generated from message datacatalog.GetArtifactResponse
 */
export const GetArtifactResponse = proto3.makeMessageType(
  "datacatalog.GetArtifactResponse",
  () => [
    { no: 1, name: "artifact", kind: "message", T: Artifact },
  ],
);

/**
 *
 * Request message for creating an Artifact and its associated artifact Data.
 *
 * @generated from message datacatalog.CreateArtifactRequest
 */
export const CreateArtifactRequest = proto3.makeMessageType(
  "datacatalog.CreateArtifactRequest",
  () => [
    { no: 1, name: "artifact", kind: "message", T: Artifact },
  ],
);

/**
 *
 * Response message for creating an Artifact.
 *
 * @generated from message datacatalog.CreateArtifactResponse
 */
export const CreateArtifactResponse = proto3.makeMessageType(
  "datacatalog.CreateArtifactResponse",
  [],
);

/**
 *
 * Request message for tagging an Artifact.
 *
 * @generated from message datacatalog.AddTagRequest
 */
export const AddTagRequest = proto3.makeMessageType(
  "datacatalog.AddTagRequest",
  () => [
    { no: 1, name: "tag", kind: "message", T: Tag },
  ],
);

/**
 *
 * Response message for tagging an Artifact.
 *
 * @generated from message datacatalog.AddTagResponse
 */
export const AddTagResponse = proto3.makeMessageType(
  "datacatalog.AddTagResponse",
  [],
);

/**
 * List the artifacts that belong to the Dataset, optionally filtered using filtered expression.
 *
 * @generated from message datacatalog.ListArtifactsRequest
 */
export const ListArtifactsRequest = proto3.makeMessageType(
  "datacatalog.ListArtifactsRequest",
  () => [
    { no: 1, name: "dataset", kind: "message", T: DatasetID },
    { no: 2, name: "filter", kind: "message", T: FilterExpression },
    { no: 3, name: "pagination", kind: "message", T: PaginationOptions },
  ],
);

/**
 * Response to list artifacts
 *
 * @generated from message datacatalog.ListArtifactsResponse
 */
export const ListArtifactsResponse = proto3.makeMessageType(
  "datacatalog.ListArtifactsResponse",
  () => [
    { no: 1, name: "artifacts", kind: "message", T: Artifact, repeated: true },
    { no: 2, name: "next_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * List the datasets for the given query
 *
 * @generated from message datacatalog.ListDatasetsRequest
 */
export const ListDatasetsRequest = proto3.makeMessageType(
  "datacatalog.ListDatasetsRequest",
  () => [
    { no: 1, name: "filter", kind: "message", T: FilterExpression },
    { no: 2, name: "pagination", kind: "message", T: PaginationOptions },
  ],
);

/**
 * List the datasets response with token for next pagination
 *
 * @generated from message datacatalog.ListDatasetsResponse
 */
export const ListDatasetsResponse = proto3.makeMessageType(
  "datacatalog.ListDatasetsResponse",
  () => [
    { no: 1, name: "datasets", kind: "message", T: Dataset, repeated: true },
    { no: 2, name: "next_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 *
 * Request message for updating an Artifact and overwriting its associated ArtifactData.
 *
 * @generated from message datacatalog.UpdateArtifactRequest
 */
export const UpdateArtifactRequest = proto3.makeMessageType(
  "datacatalog.UpdateArtifactRequest",
  () => [
    { no: 1, name: "dataset", kind: "message", T: DatasetID },
    { no: 2, name: "artifact_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "query_handle" },
    { no: 3, name: "tag_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "query_handle" },
    { no: 4, name: "data", kind: "message", T: ArtifactData, repeated: true },
  ],
);

/**
 *
 * Response message for updating an Artifact.
 *
 * @generated from message datacatalog.UpdateArtifactResponse
 */
export const UpdateArtifactResponse = proto3.makeMessageType(
  "datacatalog.UpdateArtifactResponse",
  () => [
    { no: 1, name: "artifact_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 *
 * ReservationID message that is composed of several string fields.
 *
 * @generated from message datacatalog.ReservationID
 */
export const ReservationID = proto3.makeMessageType(
  "datacatalog.ReservationID",
  () => [
    { no: 1, name: "dataset_id", kind: "message", T: DatasetID },
    { no: 2, name: "tag_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Try to acquire or extend an artifact reservation. If an active reservation exists, retrieve that instance.
 *
 * @generated from message datacatalog.GetOrExtendReservationRequest
 */
export const GetOrExtendReservationRequest = proto3.makeMessageType(
  "datacatalog.GetOrExtendReservationRequest",
  () => [
    { no: 1, name: "reservation_id", kind: "message", T: ReservationID },
    { no: 2, name: "owner_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "heartbeat_interval", kind: "message", T: Duration },
  ],
);

/**
 * A reservation including owner, heartbeat interval, expiration timestamp, and various metadata.
 *
 * @generated from message datacatalog.Reservation
 */
export const Reservation = proto3.makeMessageType(
  "datacatalog.Reservation",
  () => [
    { no: 1, name: "reservation_id", kind: "message", T: ReservationID },
    { no: 2, name: "owner_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "heartbeat_interval", kind: "message", T: Duration },
    { no: 4, name: "expires_at", kind: "message", T: Timestamp },
    { no: 6, name: "metadata", kind: "message", T: Metadata },
  ],
);

/**
 * Response including either a newly minted reservation or the existing reservation
 *
 * @generated from message datacatalog.GetOrExtendReservationResponse
 */
export const GetOrExtendReservationResponse = proto3.makeMessageType(
  "datacatalog.GetOrExtendReservationResponse",
  () => [
    { no: 1, name: "reservation", kind: "message", T: Reservation },
  ],
);

/**
 * Request to release reservation
 *
 * @generated from message datacatalog.ReleaseReservationRequest
 */
export const ReleaseReservationRequest = proto3.makeMessageType(
  "datacatalog.ReleaseReservationRequest",
  () => [
    { no: 1, name: "reservation_id", kind: "message", T: ReservationID },
    { no: 2, name: "owner_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Response to release reservation
 *
 * @generated from message datacatalog.ReleaseReservationResponse
 */
export const ReleaseReservationResponse = proto3.makeMessageType(
  "datacatalog.ReleaseReservationResponse",
  [],
);

/**
 *
 * Dataset message. It is uniquely identified by DatasetID.
 *
 * @generated from message datacatalog.Dataset
 */
export const Dataset = proto3.makeMessageType(
  "datacatalog.Dataset",
  () => [
    { no: 1, name: "id", kind: "message", T: DatasetID },
    { no: 2, name: "metadata", kind: "message", T: Metadata },
    { no: 3, name: "partitionKeys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 *
 * An artifact could have multiple partitions and each partition can have an arbitrary string key/value pair
 *
 * @generated from message datacatalog.Partition
 */
export const Partition = proto3.makeMessageType(
  "datacatalog.Partition",
  () => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 *
 * DatasetID message that is composed of several string fields.
 *
 * @generated from message datacatalog.DatasetID
 */
export const DatasetID = proto3.makeMessageType(
  "datacatalog.DatasetID",
  () => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "UUID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 *
 * Artifact message. It is composed of several string fields.
 *
 * @generated from message datacatalog.Artifact
 */
export const Artifact = proto3.makeMessageType(
  "datacatalog.Artifact",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dataset", kind: "message", T: DatasetID },
    { no: 3, name: "data", kind: "message", T: ArtifactData, repeated: true },
    { no: 4, name: "metadata", kind: "message", T: Metadata },
    { no: 5, name: "partitions", kind: "message", T: Partition, repeated: true },
    { no: 6, name: "tags", kind: "message", T: Tag, repeated: true },
    { no: 7, name: "created_at", kind: "message", T: Timestamp },
  ],
);

/**
 *
 * ArtifactData that belongs to an artifact
 *
 * @generated from message datacatalog.ArtifactData
 */
export const ArtifactData = proto3.makeMessageType(
  "datacatalog.ArtifactData",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "message", T: Literal },
  ],
);

/**
 *
 * Tag message that is unique to a Dataset. It is associated to a single artifact and
 * can be retrieved by name later.
 *
 * @generated from message datacatalog.Tag
 */
export const Tag = proto3.makeMessageType(
  "datacatalog.Tag",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "artifact_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dataset", kind: "message", T: DatasetID },
  ],
);

/**
 *
 * Metadata representation for artifacts and datasets
 *
 * @generated from message datacatalog.Metadata
 */
export const Metadata = proto3.makeMessageType(
  "datacatalog.Metadata",
  () => [
    { no: 1, name: "key_map", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ],
);

/**
 * Filter expression that is composed of a combination of single filters
 *
 * @generated from message datacatalog.FilterExpression
 */
export const FilterExpression = proto3.makeMessageType(
  "datacatalog.FilterExpression",
  () => [
    { no: 1, name: "filters", kind: "message", T: SinglePropertyFilter, repeated: true },
  ],
);

/**
 * A single property to filter on.
 *
 * @generated from message datacatalog.SinglePropertyFilter
 */
export const SinglePropertyFilter = proto3.makeMessageType(
  "datacatalog.SinglePropertyFilter",
  () => [
    { no: 1, name: "tag_filter", kind: "message", T: TagPropertyFilter, oneof: "property_filter" },
    { no: 2, name: "partition_filter", kind: "message", T: PartitionPropertyFilter, oneof: "property_filter" },
    { no: 3, name: "artifact_filter", kind: "message", T: ArtifactPropertyFilter, oneof: "property_filter" },
    { no: 4, name: "dataset_filter", kind: "message", T: DatasetPropertyFilter, oneof: "property_filter" },
    { no: 10, name: "operator", kind: "enum", T: proto3.getEnumType(SinglePropertyFilter_ComparisonOperator) },
  ],
);

/**
 * as use-cases come up we can add more operators, ex: gte, like, not eq etc.
 *
 * @generated from enum datacatalog.SinglePropertyFilter.ComparisonOperator
 */
export const SinglePropertyFilter_ComparisonOperator = proto3.makeEnum(
  "datacatalog.SinglePropertyFilter.ComparisonOperator",
  [
    {no: 0, name: "EQUALS"},
  ],
);

/**
 * Artifact properties we can filter by
 *
 * @generated from message datacatalog.ArtifactPropertyFilter
 */
export const ArtifactPropertyFilter = proto3.makeMessageType(
  "datacatalog.ArtifactPropertyFilter",
  () => [
    { no: 1, name: "artifact_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "property" },
  ],
);

/**
 * Tag properties we can filter by
 *
 * @generated from message datacatalog.TagPropertyFilter
 */
export const TagPropertyFilter = proto3.makeMessageType(
  "datacatalog.TagPropertyFilter",
  () => [
    { no: 1, name: "tag_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "property" },
  ],
);

/**
 * Partition properties we can filter by
 *
 * @generated from message datacatalog.PartitionPropertyFilter
 */
export const PartitionPropertyFilter = proto3.makeMessageType(
  "datacatalog.PartitionPropertyFilter",
  () => [
    { no: 1, name: "key_val", kind: "message", T: KeyValuePair, oneof: "property" },
  ],
);

/**
 * @generated from message datacatalog.KeyValuePair
 */
export const KeyValuePair = proto3.makeMessageType(
  "datacatalog.KeyValuePair",
  () => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Dataset properties we can filter by
 *
 * @generated from message datacatalog.DatasetPropertyFilter
 */
export const DatasetPropertyFilter = proto3.makeMessageType(
  "datacatalog.DatasetPropertyFilter",
  () => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "property" },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "property" },
    { no: 3, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "property" },
    { no: 4, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "property" },
  ],
);

/**
 * Pagination options for making list requests
 *
 * @generated from message datacatalog.PaginationOptions
 */
export const PaginationOptions = proto3.makeMessageType(
  "datacatalog.PaginationOptions",
  () => [
    { no: 1, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sortKey", kind: "enum", T: proto3.getEnumType(PaginationOptions_SortKey) },
    { no: 4, name: "sortOrder", kind: "enum", T: proto3.getEnumType(PaginationOptions_SortOrder) },
  ],
);

/**
 * @generated from enum datacatalog.PaginationOptions.SortOrder
 */
export const PaginationOptions_SortOrder = proto3.makeEnum(
  "datacatalog.PaginationOptions.SortOrder",
  [
    {no: 0, name: "DESCENDING"},
    {no: 1, name: "ASCENDING"},
  ],
);

/**
 * @generated from enum datacatalog.PaginationOptions.SortKey
 */
export const PaginationOptions_SortKey = proto3.makeEnum(
  "datacatalog.PaginationOptions.SortKey",
  [
    {no: 0, name: "CREATION_TIME"},
  ],
);

