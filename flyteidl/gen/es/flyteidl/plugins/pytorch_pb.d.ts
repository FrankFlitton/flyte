// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/plugins/pytorch.proto (package flyteidl.plugins, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Custom proto for torch elastic config for distributed training using 
 * https://github.com/kubeflow/training-operator/blob/master/pkg/apis/kubeflow.org/v1/pytorch_types.go
 *
 * @generated from message flyteidl.plugins.ElasticConfig
 */
export declare class ElasticConfig extends Message<ElasticConfig> {
  /**
   * @generated from field: string rdzv_backend = 1;
   */
  rdzvBackend: string;

  /**
   * @generated from field: int32 min_replicas = 2;
   */
  minReplicas: number;

  /**
   * @generated from field: int32 max_replicas = 3;
   */
  maxReplicas: number;

  /**
   * @generated from field: int32 nproc_per_node = 4;
   */
  nprocPerNode: number;

  /**
   * @generated from field: int32 max_restarts = 5;
   */
  maxRestarts: number;

  constructor(data?: PartialMessage<ElasticConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.plugins.ElasticConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElasticConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElasticConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElasticConfig;

  static equals(a: ElasticConfig | PlainMessage<ElasticConfig> | undefined, b: ElasticConfig | PlainMessage<ElasticConfig> | undefined): boolean;
}

/**
 * Custom proto for plugin that enables distributed training using https://github.com/kubeflow/pytorch-operator
 *
 * @generated from message flyteidl.plugins.DistributedPyTorchTrainingTask
 */
export declare class DistributedPyTorchTrainingTask extends Message<DistributedPyTorchTrainingTask> {
  /**
   * number of worker replicas spawned in the cluster for this job
   *
   * @generated from field: int32 workers = 1;
   */
  workers: number;

  /**
   * config for an elastic pytorch job
   *
   *
   * @generated from field: flyteidl.plugins.ElasticConfig elastic_config = 2;
   */
  elasticConfig?: ElasticConfig;

  constructor(data?: PartialMessage<DistributedPyTorchTrainingTask>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.plugins.DistributedPyTorchTrainingTask";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DistributedPyTorchTrainingTask;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DistributedPyTorchTrainingTask;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DistributedPyTorchTrainingTask;

  static equals(a: DistributedPyTorchTrainingTask | PlainMessage<DistributedPyTorchTrainingTask> | undefined, b: DistributedPyTorchTrainingTask | PlainMessage<DistributedPyTorchTrainingTask> | undefined): boolean;
}

