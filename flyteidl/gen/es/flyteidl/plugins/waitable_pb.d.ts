// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/plugins/waitable.proto (package flyteidl.plugins, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { WorkflowExecutionIdentifier } from "../core/identifier_pb.js";
import type { WorkflowExecution_Phase } from "../core/execution_pb.js";

/**
 * Represents an Execution that was launched and could be waited on.
 *
 * @generated from message flyteidl.plugins.Waitable
 */
export declare class Waitable extends Message<Waitable> {
  /**
   * @generated from field: flyteidl.core.WorkflowExecutionIdentifier wf_exec_id = 1;
   */
  wfExecId?: WorkflowExecutionIdentifier;

  /**
   * @generated from field: flyteidl.core.WorkflowExecution.Phase phase = 2;
   */
  phase: WorkflowExecution_Phase;

  /**
   * @generated from field: string workflow_id = 3;
   */
  workflowId: string;

  constructor(data?: PartialMessage<Waitable>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.plugins.Waitable";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Waitable;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Waitable;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Waitable;

  static equals(a: Waitable | PlainMessage<Waitable> | undefined, b: Waitable | PlainMessage<Waitable> | undefined): boolean;
}

