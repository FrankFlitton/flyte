// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/plugins/kubeflow/tensorflow.proto (package flyteidl.plugins.kubeflow, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { RestartPolicy, RunPolicy } from "./common_pb.js";
import type { Resources } from "../../core/tasks_pb.js";

/**
 * Proto for plugin that enables distributed training using https://github.com/kubeflow/tf-operator
 *
 * @generated from message flyteidl.plugins.kubeflow.DistributedTensorflowTrainingTask
 */
export declare class DistributedTensorflowTrainingTask extends Message<DistributedTensorflowTrainingTask> {
  /**
   * Worker replicas spec
   *
   * @generated from field: flyteidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec worker_replicas = 1;
   */
  workerReplicas?: DistributedTensorflowTrainingReplicaSpec;

  /**
   * Parameter server replicas spec
   *
   * @generated from field: flyteidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec ps_replicas = 2;
   */
  psReplicas?: DistributedTensorflowTrainingReplicaSpec;

  /**
   * Chief replicas spec
   *
   * @generated from field: flyteidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec chief_replicas = 3;
   */
  chiefReplicas?: DistributedTensorflowTrainingReplicaSpec;

  /**
   * RunPolicy encapsulates various runtime policies of the distributed training
   * job, for example how to clean up resources and how long the job can stay
   * active.
   *
   * @generated from field: flyteidl.plugins.kubeflow.RunPolicy run_policy = 4;
   */
  runPolicy?: RunPolicy;

  /**
   * Evaluator replicas spec
   *
   * @generated from field: flyteidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec evaluator_replicas = 5;
   */
  evaluatorReplicas?: DistributedTensorflowTrainingReplicaSpec;

  constructor(data?: PartialMessage<DistributedTensorflowTrainingTask>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.plugins.kubeflow.DistributedTensorflowTrainingTask";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DistributedTensorflowTrainingTask;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DistributedTensorflowTrainingTask;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DistributedTensorflowTrainingTask;

  static equals(a: DistributedTensorflowTrainingTask | PlainMessage<DistributedTensorflowTrainingTask> | undefined, b: DistributedTensorflowTrainingTask | PlainMessage<DistributedTensorflowTrainingTask> | undefined): boolean;
}

/**
 * @generated from message flyteidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec
 */
export declare class DistributedTensorflowTrainingReplicaSpec extends Message<DistributedTensorflowTrainingReplicaSpec> {
  /**
   * Number of replicas
   *
   * @generated from field: int32 replicas = 1;
   */
  replicas: number;

  /**
   * Image used for the replica group
   *
   * @generated from field: string image = 2;
   */
  image: string;

  /**
   * Resources required for the replica group
   *
   * @generated from field: flyteidl.core.Resources resources = 3;
   */
  resources?: Resources;

  /**
   * RestartPolicy Determines whether pods will be restarted when they exit
   *
   * @generated from field: flyteidl.plugins.kubeflow.RestartPolicy restart_policy = 4;
   */
  restartPolicy: RestartPolicy;

  constructor(data?: PartialMessage<DistributedTensorflowTrainingReplicaSpec>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.plugins.kubeflow.DistributedTensorflowTrainingReplicaSpec";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DistributedTensorflowTrainingReplicaSpec;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DistributedTensorflowTrainingReplicaSpec;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DistributedTensorflowTrainingReplicaSpec;

  static equals(a: DistributedTensorflowTrainingReplicaSpec | PlainMessage<DistributedTensorflowTrainingReplicaSpec> | undefined, b: DistributedTensorflowTrainingReplicaSpec | PlainMessage<DistributedTensorflowTrainingReplicaSpec> | undefined): boolean;
}

