// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/plugins/dask.proto (package flyteidl.plugins, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Resources } from "../core/tasks_pb.js";

/**
 * Custom Proto for Dask Plugin.
 *
 * @generated from message flyteidl.plugins.DaskJob
 */
export declare class DaskJob extends Message<DaskJob> {
  /**
   * Spec for the scheduler pod.
   *
   * @generated from field: flyteidl.plugins.DaskScheduler scheduler = 1;
   */
  scheduler?: DaskScheduler;

  /**
   * Spec of the default worker group.
   *
   * @generated from field: flyteidl.plugins.DaskWorkerGroup workers = 2;
   */
  workers?: DaskWorkerGroup;

  constructor(data?: PartialMessage<DaskJob>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.plugins.DaskJob";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DaskJob;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DaskJob;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DaskJob;

  static equals(a: DaskJob | PlainMessage<DaskJob> | undefined, b: DaskJob | PlainMessage<DaskJob> | undefined): boolean;
}

/**
 * Specification for the scheduler pod.
 *
 * @generated from message flyteidl.plugins.DaskScheduler
 */
export declare class DaskScheduler extends Message<DaskScheduler> {
  /**
   * Optional image to use. If unset, will use the default image.
   *
   * @generated from field: string image = 1;
   */
  image: string;

  /**
   * Resources assigned to the scheduler pod.
   *
   * @generated from field: flyteidl.core.Resources resources = 2;
   */
  resources?: Resources;

  constructor(data?: PartialMessage<DaskScheduler>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.plugins.DaskScheduler";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DaskScheduler;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DaskScheduler;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DaskScheduler;

  static equals(a: DaskScheduler | PlainMessage<DaskScheduler> | undefined, b: DaskScheduler | PlainMessage<DaskScheduler> | undefined): boolean;
}

/**
 * @generated from message flyteidl.plugins.DaskWorkerGroup
 */
export declare class DaskWorkerGroup extends Message<DaskWorkerGroup> {
  /**
   * Number of workers in the group.
   *
   * @generated from field: uint32 number_of_workers = 1;
   */
  numberOfWorkers: number;

  /**
   * Optional image to use for the pods of the worker group. If unset, will use the default image.
   *
   * @generated from field: string image = 2;
   */
  image: string;

  /**
   * Resources assigned to the all pods of the worker group.
   * As per https://kubernetes.dask.org/en/latest/kubecluster.html?highlight=limit#best-practices 
   * it is advised to only set limits. If requests are not explicitly set, the plugin will make
   * sure to set requests==limits.
   * The plugin sets ` --memory-limit` as well as `--nthreads` for the workers according to the limit.
   *
   * @generated from field: flyteidl.core.Resources resources = 3;
   */
  resources?: Resources;

  constructor(data?: PartialMessage<DaskWorkerGroup>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.plugins.DaskWorkerGroup";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DaskWorkerGroup;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DaskWorkerGroup;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DaskWorkerGroup;

  static equals(a: DaskWorkerGroup | PlainMessage<DaskWorkerGroup> | undefined, b: DaskWorkerGroup | PlainMessage<DaskWorkerGroup> | undefined): boolean;
}

