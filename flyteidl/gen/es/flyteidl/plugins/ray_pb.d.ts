// @generated by protoc-gen-es v1.4.2 with parameter "target=js+dts+ts,keep_empty_files=false"
// @generated from file flyteidl/plugins/ray.proto (package flyteidl.plugins, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * RayJobSpec defines the desired state of RayJob
 *
 * @generated from message flyteidl.plugins.RayJob
 */
export declare class RayJob extends Message<RayJob> {
  /**
   * RayClusterSpec is the cluster template to run the job
   *
   * @generated from field: flyteidl.plugins.RayCluster ray_cluster = 1;
   */
  rayCluster?: RayCluster;

  /**
   * runtime_env is base64 encoded.
   * Ray runtime environments: https://docs.ray.io/en/latest/ray-core/handling-dependencies.html#runtime-environments
   *
   * @generated from field: string runtime_env = 2;
   */
  runtimeEnv: string;

  constructor(data?: PartialMessage<RayJob>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.plugins.RayJob";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RayJob;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RayJob;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RayJob;

  static equals(a: RayJob | PlainMessage<RayJob> | undefined, b: RayJob | PlainMessage<RayJob> | undefined): boolean;
}

/**
 * Define Ray cluster defines the desired state of RayCluster
 *
 * @generated from message flyteidl.plugins.RayCluster
 */
export declare class RayCluster extends Message<RayCluster> {
  /**
   * HeadGroupSpecs are the spec for the head pod
   *
   * @generated from field: flyteidl.plugins.HeadGroupSpec head_group_spec = 1;
   */
  headGroupSpec?: HeadGroupSpec;

  /**
   * WorkerGroupSpecs are the specs for the worker pods
   *
   * @generated from field: repeated flyteidl.plugins.WorkerGroupSpec worker_group_spec = 2;
   */
  workerGroupSpec: WorkerGroupSpec[];

  constructor(data?: PartialMessage<RayCluster>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.plugins.RayCluster";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RayCluster;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RayCluster;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RayCluster;

  static equals(a: RayCluster | PlainMessage<RayCluster> | undefined, b: RayCluster | PlainMessage<RayCluster> | undefined): boolean;
}

/**
 * HeadGroupSpec are the spec for the head pod
 *
 * @generated from message flyteidl.plugins.HeadGroupSpec
 */
export declare class HeadGroupSpec extends Message<HeadGroupSpec> {
  /**
   * Optional. RayStartParams are the params of the start command: address, object-store-memory.
   * Refer to https://docs.ray.io/en/latest/ray-core/package-ref.html#ray-start
   *
   * @generated from field: map<string, string> ray_start_params = 1;
   */
  rayStartParams: { [key: string]: string };

  constructor(data?: PartialMessage<HeadGroupSpec>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.plugins.HeadGroupSpec";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HeadGroupSpec;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HeadGroupSpec;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HeadGroupSpec;

  static equals(a: HeadGroupSpec | PlainMessage<HeadGroupSpec> | undefined, b: HeadGroupSpec | PlainMessage<HeadGroupSpec> | undefined): boolean;
}

/**
 * WorkerGroupSpec are the specs for the worker pods
 *
 * @generated from message flyteidl.plugins.WorkerGroupSpec
 */
export declare class WorkerGroupSpec extends Message<WorkerGroupSpec> {
  /**
   * Required. RayCluster can have multiple worker groups, and it distinguishes them by name
   *
   * @generated from field: string group_name = 1;
   */
  groupName: string;

  /**
   * Required. Desired replicas of the worker group. Defaults to 1.
   *
   * @generated from field: int32 replicas = 2;
   */
  replicas: number;

  /**
   * Optional. Min replicas of the worker group. MinReplicas defaults to 1.
   *
   * @generated from field: int32 min_replicas = 3;
   */
  minReplicas: number;

  /**
   * Optional. Max replicas of the worker group. MaxReplicas defaults to maxInt32
   *
   * @generated from field: int32 max_replicas = 4;
   */
  maxReplicas: number;

  /**
   * Optional. RayStartParams are the params of the start command: address, object-store-memory.
   * Refer to https://docs.ray.io/en/latest/ray-core/package-ref.html#ray-start
   *
   * @generated from field: map<string, string> ray_start_params = 5;
   */
  rayStartParams: { [key: string]: string };

  constructor(data?: PartialMessage<WorkerGroupSpec>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "flyteidl.plugins.WorkerGroupSpec";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkerGroupSpec;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkerGroupSpec;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkerGroupSpec;

  static equals(a: WorkerGroupSpec | PlainMessage<WorkerGroupSpec> | undefined, b: WorkerGroupSpec | PlainMessage<WorkerGroupSpec> | undefined): boolean;
}

